/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 2cf24d0046363badc4b95a8c906bab49 */

/* creation time: Tue Sep  8 14:12:09 2015 */
/* tdr version: 2.6.3, build at 20150209 */

#ifndef _access_protocol_h_
#define _access_protocol_h_

#include "TdrBuf.h"
#include "TdrError.h"
#include "TdrBufUtil.h"
#include "TdrTypeUtil.h"


using tsf4g_tdr::TdrError;
using tsf4g_tdr::TdrReadBuf;
using tsf4g_tdr::TdrWriteBuf;

namespace access_svr
{


enum
{
    ACCESS_MAX_BODY_LEN = 20480, // 最大网络包(20K)
    ACCESS_MAX_MESSAGE_LEN = 128, // 最大消息长度
    ACCESS_TOKEN_LEN = 8, // Token长度
    SESSION_MAX_LEN = 512, // SESSION最大长度
    USER_MAX_NODE = 300, // 用户节点最大数
    MAX_USER_LIST = 512, // 广播用户列表最大个数
};


enum AccessChatCmds
{
    ACCESS_CHAT_NET_HEART_BEAT_REQUEST = 4097, // 大厅和网关之间的心跳
    CHAT_ACCESS_NET_HEART_BEAT_RESPONSE = 4098, // 网关和大厅之间的心跳
    CHAT_ACCESS_REGISTER_CMD_REQUEST = 4099, // 大厅注册请求
    ACCESS_CHAT_REGISTER_CMD_RESPONSE = 4100, // 大厅注册返回
    ACCESS_CHAT_COMM_CMD_REQUEST = 4101, // 网关到聊天服务器通用数据请求
    CHAT_ACCESS_COMM_CMD_RSPONSE = 4102, // 聊天服务器到网关通用数据返回
    CHAT_ACCESS_FORWARD_MSG_PKG = 4103, // 聊天服务器到网关转发通用数据
    ACCESS_CHAT_SEND_MSG = 4105, // 网关到聊天服务器发送聊天消息
};


enum AccessTradeCmds
{
    ACCESS_TRADE_NET_HEART_BEAT_REQUEST = 8193, // 大厅和网关之间的心跳
    TRADE_ACCESS_NET_HEART_BEAT_RESPONSE = 8194, // 网关和大厅之间的心跳
    TRADE_ACCESS_REGISTER_CMD_REQUEST = 8195, // 大厅注册请求
    ACCESS_TRADE_REGISTER_CMD_RESPONSE = 8196, // 大厅注册返回
    ACCESS_TRADE_COMM_CMD_REQUEST = 8197, // 通用数据请求
    TRADE_ACCESS_COMM_CMD_RSPONSE = 8198, // 通用数据返回
    ACCESS_TRADE_LOGON_NOTIFY_REQUEST = 8199, // 登录成功之后通知trade请求
    TRADE_ACCESS_LOGON_NOTIFY_RSPONSE = 8200, // 登录成功之后通知trade返回
    ACCESS_TRADE_LOGIN_INFO_NOTIFY_REQUEST = 8201, // access通知trade 用户登录成功或下线 请求
    TRADE_ACCESS_LOGIN_INFO_NOTIFY_RSPONSE = 8202, // access通知trade 用户登录成功或下线 响应
    ACCESS_REQUEST_TRADE_UPDATE_USER_INFO = 8203, // access请求trade 更新玩家交易账号信息
    TRADE_RSPONSE_ACCESS_UPDATE_USER_INFO = 8204, // trade返回access 更新玩家交易账号信息
    ACCESS_REQUEST_TRADE_ClIENT_LOGIN = 8205, // 客户端通过access请求trade 登录
    TRADE_RSPONSE_ACCESS_ClIENT_LOGIN = 8206, // trade通过access返回客户端 登录
    ACCESS_REQUEST_TRADE_ClIENT_LOGOUT = 8207, // 客户端通过access请求trade 安全退出
    TRADE_RSPONSE_ACCESS_ClIENT_LOGOUT = 8208, // trade通过access返回客户端 安全退出
    TRADE_REQUEST_ACCESS_KICK_SOMEONE = 8209, // trade请求access踢某人下线
    ACCESS_RSPONSE_TRADE_KICK_SOMEONE = 8210, // trade请求access踢某人下线返回
};


enum ChatForwardCommPkgFlag // 消息pkg转发标识
{
    CHAT_FORWARD_COMMPKG_FLAG_NONE = 0, // 不做任何转发处理
    CHAT_FORWARD_COMMPKG_FLAG_TO_ANOTHER_USER = 1, // 聊天信息转发给单人对话的接收者
};


enum UserRegisterPromoteFlag // 用户注册推广标志
{
    REGISTER_PROMOTE_FAILED = 0, // 用户推广成功
    REGISTER_PROMOTE_SUCCESS = 1, // 用户推广失败
};


#pragma pack(1)


class CommPkg
{
    public: /* members */
        uint64_t ullUserID;
        int32_t iBodyLen;
        char szBody[ACCESS_MAX_BODY_LEN]; // 

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CommPkg          tagCommPkg;
typedef       CommPkg             COMMPKG;
typedef       CommPkg*          LPCOMMPKG;
typedef const CommPkg*         LCPCOMMPKG;


class TradeRegReq
{
    public: /* members */
        uint32_t dwGameID; // 游戏ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeRegReq          tagTradeRegReq;
typedef       TradeRegReq             TRADEREGREQ;
typedef       TradeRegReq*          LPTRADEREGREQ;
typedef const TradeRegReq*         LCPTRADEREGREQ;


class TradeRegResp
{
    public: /* members */
        int32_t iResult;

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeRegResp          tagTradeRegResp;
typedef       TradeRegResp             TRADEREGRESP;
typedef       TradeRegResp*          LPTRADEREGRESP;
typedef const TradeRegResp*         LCPTRADEREGRESP;


class TradeCommPkgReq
{
    public: /* members */
        CommPkg stData; // 客户端包

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeCommPkgReq          tagTradeCommPkgReq;
typedef       TradeCommPkgReq             TRADECOMMPKGREQ;
typedef       TradeCommPkgReq*          LPTRADECOMMPKGREQ;
typedef const TradeCommPkgReq*         LCPTRADECOMMPKGREQ;


class TradeCommPkgResp
{
    public: /* members */
        int32_t iResult; // 返回状态
        CommPkg stData; // 客户端包

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeCommPkgResp          tagTradeCommPkgResp;
typedef       TradeCommPkgResp             TRADECOMMPKGRESP;
typedef       TradeCommPkgResp*          LPTRADECOMMPKGRESP;
typedef const TradeCommPkgResp*         LCPTRADECOMMPKGRESP;


class AccessNotifyTradeLogonReq
{
    public: /* members */
        int8_t chPlaceholder; // 占位符,暂时没用

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessNotifyTradeLogonReq          tagAccessNotifyTradeLogonReq;
typedef       AccessNotifyTradeLogonReq             ACCESSNOTIFYTRADELOGONREQ;
typedef       AccessNotifyTradeLogonReq*          LPACCESSNOTIFYTRADELOGONREQ;
typedef const AccessNotifyTradeLogonReq*         LCPACCESSNOTIFYTRADELOGONREQ;


class AccessNotifyTradeLogonResp
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessNotifyTradeLogonResp          tagAccessNotifyTradeLogonResp;
typedef       AccessNotifyTradeLogonResp             ACCESSNOTIFYTRADELOGONRESP;
typedef       AccessNotifyTradeLogonResp*          LPACCESSNOTIFYTRADELOGONRESP;
typedef const AccessNotifyTradeLogonResp*         LCPACCESSNOTIFYTRADELOGONRESP;


class AccessRequestTradeUpdateUserInfo
{
    public: /* members */
        CommPkg stData; // 客户端包

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessRequestTradeUpdateUserInfo          tagAccessRequestTradeUpdateUserInfo;
typedef       AccessRequestTradeUpdateUserInfo             ACCESSREQUESTTRADEUPDATEUSERINFO;
typedef       AccessRequestTradeUpdateUserInfo*          LPACCESSREQUESTTRADEUPDATEUSERINFO;
typedef const AccessRequestTradeUpdateUserInfo*         LCPACCESSREQUESTTRADEUPDATEUSERINFO;


class TradeRsponseAccessUpdateUserInfo
{
    public: /* members */
        int32_t iResult; // 返回状态
        CommPkg stData; // 客户端包

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeRsponseAccessUpdateUserInfo          tagTradeRsponseAccessUpdateUserInfo;
typedef       TradeRsponseAccessUpdateUserInfo             TRADERSPONSEACCESSUPDATEUSERINFO;
typedef       TradeRsponseAccessUpdateUserInfo*          LPTRADERSPONSEACCESSUPDATEUSERINFO;
typedef const TradeRsponseAccessUpdateUserInfo*         LCPTRADERSPONSEACCESSUPDATEUSERINFO;


class AccessNotifyTradeLoginInfoReq
{
    public: /* members */
        int64_t llUid; // 用户自己的ID
        int8_t chLoginInfoFlag; // 用户登录成功或下线 标识

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessNotifyTradeLoginInfoReq          tagAccessNotifyTradeLoginInfoReq;
typedef       AccessNotifyTradeLoginInfoReq             ACCESSNOTIFYTRADELOGININFOREQ;
typedef       AccessNotifyTradeLoginInfoReq*          LPACCESSNOTIFYTRADELOGININFOREQ;
typedef const AccessNotifyTradeLoginInfoReq*         LCPACCESSNOTIFYTRADELOGININFOREQ;


class AccessNotifyTradeLoginInfoResp
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessNotifyTradeLoginInfoResp          tagAccessNotifyTradeLoginInfoResp;
typedef       AccessNotifyTradeLoginInfoResp             ACCESSNOTIFYTRADELOGININFORESP;
typedef       AccessNotifyTradeLoginInfoResp*          LPACCESSNOTIFYTRADELOGININFORESP;
typedef const AccessNotifyTradeLoginInfoResp*         LCPACCESSNOTIFYTRADELOGININFORESP;


class AccessTradeHeartBeatRequest // 大厅到网关之间的心跳请求.
{
    public: /* members */
        tdr_datetime_t tHostTime; // 大厅本机当前时间

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessTradeHeartBeatRequest          tagAccessTradeHeartBeatRequest;
typedef       AccessTradeHeartBeatRequest             ACCESSTRADEHEARTBEATREQUEST;
typedef       AccessTradeHeartBeatRequest*          LPACCESSTRADEHEARTBEATREQUEST;
typedef const AccessTradeHeartBeatRequest*         LCPACCESSTRADEHEARTBEATREQUEST;


class AccessTradeHeartBeatResponse // 网关到大厅的心跳返回
{
    public: /* members */
        tdr_datetime_t tHostTime; // 大厅发送心跳时的本机时间
        tdr_datetime_t tServTime; // 网关本机当前时间

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessTradeHeartBeatResponse          tagAccessTradeHeartBeatResponse;
typedef       AccessTradeHeartBeatResponse             ACCESSTRADEHEARTBEATRESPONSE;
typedef       AccessTradeHeartBeatResponse*          LPACCESSTRADEHEARTBEATRESPONSE;
typedef const AccessTradeHeartBeatResponse*         LCPACCESSTRADEHEARTBEATRESPONSE;


class AccessRequestTradeClientLogin
{
    public: /* members */
        int64_t llUid; // 用户自己的ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessRequestTradeClientLogin          tagAccessRequestTradeClientLogin;
typedef       AccessRequestTradeClientLogin             ACCESSREQUESTTRADECLIENTLOGIN;
typedef       AccessRequestTradeClientLogin*          LPACCESSREQUESTTRADECLIENTLOGIN;
typedef const AccessRequestTradeClientLogin*         LCPACCESSREQUESTTRADECLIENTLOGIN;


class AccessRequestTradeClientLogout
{
    public: /* members */
        int64_t llUid; // 用户自己的ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessRequestTradeClientLogout          tagAccessRequestTradeClientLogout;
typedef       AccessRequestTradeClientLogout             ACCESSREQUESTTRADECLIENTLOGOUT;
typedef       AccessRequestTradeClientLogout*          LPACCESSREQUESTTRADECLIENTLOGOUT;
typedef const AccessRequestTradeClientLogout*         LCPACCESSREQUESTTRADECLIENTLOGOUT;


class TradeRequestAccessKickSomeone
{
    public: /* members */
        int64_t llUid; // 被踢玩家uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeRequestAccessKickSomeone          tagTradeRequestAccessKickSomeone;
typedef       TradeRequestAccessKickSomeone             TRADEREQUESTACCESSKICKSOMEONE;
typedef       TradeRequestAccessKickSomeone*          LPTRADEREQUESTACCESSKICKSOMEONE;
typedef const TradeRequestAccessKickSomeone*         LCPTRADEREQUESTACCESSKICKSOMEONE;


class AccessRsponseTradeKickSomeone
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessRsponseTradeKickSomeone          tagAccessRsponseTradeKickSomeone;
typedef       AccessRsponseTradeKickSomeone             ACCESSRSPONSETRADEKICKSOMEONE;
typedef       AccessRsponseTradeKickSomeone*          LPACCESSRSPONSETRADEKICKSOMEONE;
typedef const AccessRsponseTradeKickSomeone*         LCPACCESSRSPONSETRADEKICKSOMEONE;


class ChatRegReq
{
    public: /* members */
        uint32_t dwGameID; // 游戏ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ChatRegReq          tagChatRegReq;
typedef       ChatRegReq             CHATREGREQ;
typedef       ChatRegReq*          LPCHATREGREQ;
typedef const ChatRegReq*         LCPCHATREGREQ;


class ChatRegResp
{
    public: /* members */
        int32_t iResult;

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ChatRegResp          tagChatRegResp;
typedef       ChatRegResp             CHATREGRESP;
typedef       ChatRegResp*          LPCHATREGRESP;
typedef const ChatRegResp*         LCPCHATREGRESP;


class ChatCommPkgReq
{
    public: /* members */
        CommPkg stData; // 客户端包

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ChatCommPkgReq          tagChatCommPkgReq;
typedef       ChatCommPkgReq             CHATCOMMPKGREQ;
typedef       ChatCommPkgReq*          LPCHATCOMMPKGREQ;
typedef const ChatCommPkgReq*         LCPCHATCOMMPKGREQ;


class ChatCommPkgResp
{
    public: /* members */
        int32_t iResult; // 返回状态
        uint8_t bIsLogonRetVal; // 是否是网关登录聊天服务器返回的（如果是则值为1，否值为0）
        CommPkg stData; // 客户端包

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ChatCommPkgResp          tagChatCommPkgResp;
typedef       ChatCommPkgResp             CHATCOMMPKGRESP;
typedef       ChatCommPkgResp*          LPCHATCOMMPKGRESP;
typedef const ChatCommPkgResp*         LCPCHATCOMMPKGRESP;


class ChatMsgPkg
{
    public: /* members */
        int64_t llSenderUid; // 聊天消息接收者的用户ID
        int64_t llReceiverUid; // 聊天消息接收者的用户ID
        int32_t iBodyLen;
        char szBody[ACCESS_MAX_BODY_LEN]; // 聊天内容

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ChatMsgPkg          tagChatMsgPkg;
typedef       ChatMsgPkg             CHATMSGPKG;
typedef       ChatMsgPkg*          LPCHATMSGPKG;
typedef const ChatMsgPkg*         LCPCHATMSGPKG;


class ChatForwardMsgPkg
{
    public: /* members */
        int64_t llSenderUid; // 聊天消息接收者的用户ID
        int64_t llReceiverUid; // 聊天消息接收者的用户ID
        uint32_t dwChatID; // 聊天服务器编号
        uint8_t bForwardFlag; // 转发标识
        int32_t iBodyLen;
        char szBody[ACCESS_MAX_BODY_LEN]; // 聊天内容

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ChatForwardMsgPkg          tagChatForwardMsgPkg;
typedef       ChatForwardMsgPkg             CHATFORWARDMSGPKG;
typedef       ChatForwardMsgPkg*          LPCHATFORWARDMSGPKG;
typedef const ChatForwardMsgPkg*         LCPCHATFORWARDMSGPKG;


class AccessChatHeartBeatRequest // 大厅到网关之间的心跳请求.
{
    public: /* members */
        tdr_datetime_t tHostTime; // 大厅本机当前时间

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessChatHeartBeatRequest          tagAccessChatHeartBeatRequest;
typedef       AccessChatHeartBeatRequest             ACCESSCHATHEARTBEATREQUEST;
typedef       AccessChatHeartBeatRequest*          LPACCESSCHATHEARTBEATREQUEST;
typedef const AccessChatHeartBeatRequest*         LCPACCESSCHATHEARTBEATREQUEST;


class AccessChatHeartBeatResponse // 网关到大厅的心跳返回
{
    public: /* members */
        tdr_datetime_t tHostTime; // 大厅发送心跳时的本机时间
        tdr_datetime_t tServTime; // 网关本机当前时间

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessChatHeartBeatResponse          tagAccessChatHeartBeatResponse;
typedef       AccessChatHeartBeatResponse             ACCESSCHATHEARTBEATRESPONSE;
typedef       AccessChatHeartBeatResponse*          LPACCESSCHATHEARTBEATRESPONSE;
typedef const AccessChatHeartBeatResponse*         LCPACCESSCHATHEARTBEATRESPONSE;


class GamePkgHead
{
    public: /* members */
        uint16_t wDataSize; // 包长度
        uint32_t dwChatID; // 聊天服务器编号
        uint32_t dwTradeID; // 交易服务器编号
        uint16_t wCommand; // 命令字
        uint8_t bMessageVer; // 版本标识

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       GamePkgHead          tagGamePkgHead;
typedef       GamePkgHead             GAMEPKGHEAD;
typedef       GamePkgHead*          LPGAMEPKGHEAD;
typedef const GamePkgHead*         LCPGAMEPKGHEAD;


class GamePkgBody
{
    public: /* members */
        union
        {
            AccessChatHeartBeatRequest stChatHeartBeatReq; // 大厅和网关的心跳请求
            AccessChatHeartBeatResponse stChatHeartBeatResp; // 网关和大厅的心跳返回
            ChatRegReq stChatRegReq; // 大厅注册请求
            ChatRegResp stChatRegResp; // 大厅注册返回
            ChatCommPkgReq stChatCommPkgReq; // 网关到聊天服务器通用数据请求
            ChatCommPkgResp stChatCommPkgResp; // 聊天服务器到网关通用数据返回
            ChatForwardMsgPkg stChatForwardMsgPkg; // 聊天服务器到网关转发聊天消息
            ChatMsgPkg stChatMsgPkg; // 网关到聊天服务器发送聊天消息
            AccessTradeHeartBeatRequest stTradeHeartBeatReq; // 大厅和网关的心跳请求
            AccessTradeHeartBeatResponse stTradeHeartBeatResp; // 网关和大厅的心跳返回
            TradeRegReq stTradeRegReq; // 大厅注册请求
            TradeRegResp stTradeRegResp; // 大厅注册返回
            TradeCommPkgReq stTradeCommPkgReq; // 通用数据请求
            TradeCommPkgResp stTradeCommPkgResp; // 通用数据返回
            AccessNotifyTradeLogonReq stAccessNotifyTradeLogonReq; // 登录成功之后通知trade请求
            AccessNotifyTradeLogonResp stAccessNotifyTradeLogonResp; // 登录成功之后通知trade返回
            AccessNotifyTradeLoginInfoReq stAccessNotifyTradeLoginInfoReq; // access通知trade 用户登录成功或下线 请求
            AccessRequestTradeUpdateUserInfo stAccessRequestTradeUpdateUserInfo; // access请求trade 更新玩家交易账号信息
            TradeRsponseAccessUpdateUserInfo stTradeRsponseAccessUpdateUserInfo; // trade返回access 更新玩家交易账号信息
            AccessRequestTradeClientLogin stAccessRequestTradeClientLogin; // 客户端通过access请求trade 登录
            AccessRequestTradeClientLogout stAccessRequestTradeClientLogout; // 客户端通过access请求trade 安全退出
            TradeRequestAccessKickSomeone stTradeRequestAccessKickSomeone; // trade请求access踢某人下线
            AccessRsponseTradeKickSomeone stAccessRsponseTradeKickSomeone; // trade请求access踢某人下线返回
        };

    public: /* methods */
        TdrError::ErrorType construct(int64_t selector);

        TdrError::ErrorType pack(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(int64_t selector, char* buffer, size_t size,
                                 size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(int64_t selector, const char* buffer, size_t size,
                                   size_t* usedSize = NULL, unsigned cutVer = 0);

        TdrError::ErrorType visualize(int64_t selector, TdrWriteBuf& destBuf,
                                      int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(int64_t selector, char* buffer, size_t size,
                                      size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       GamePkgBody          tagGamePkgBody;
typedef       GamePkgBody             GAMEPKGBODY;
typedef       GamePkgBody*          LPGAMEPKGBODY;
typedef const GamePkgBody*         LCPGAMEPKGBODY;


class GamePkg
{
    public: /* members */
        GamePkgHead stPkgHead; // 包头
        GamePkgBody stPkgBody; // 包体

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       GamePkg          tagGamePkg;
typedef       GamePkg             GAMEPKG;
typedef       GamePkg*          LPGAMEPKG;
typedef const GamePkg*         LCPGAMEPKG;


#pragma pack()

}
#endif
