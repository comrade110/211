/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 2 */
/* metalib md5sum: 0822406026b27bb2b88868677cc8d59f */

/* creation time: Fri Sep 11 10:17:39 2015 */
/* tdr version: 2.6.3, build at 20150209 */

#if defined(_WIN32) || defined(_WIN64)
#pragma warning(disable:4996 4244)
#endif

#include "client_protocol.h"
#include "TdrTypeUtil.h"

using tsf4g_tdr::TdrBufUtil;
using tsf4g_tdr::TdrTypeUtil;

namespace client
{


TdrError::ErrorType
CmdKickoffUserNotify::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CmdKickoffUserNotify::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CmdKickoffUserNotify::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CmdKickoffUserNotify::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CmdKickoffUserNotify::CURRVERSION < cutVer)
    {
        cutVer = CmdKickoffUserNotify::CURRVERSION;
    }

    /* check cutversion */
    if (CmdKickoffUserNotify::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->chPlaceholder */
    {
        ret = destBuf.writeInt8(this->chPlaceholder);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CmdKickoffUserNotify::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CmdKickoffUserNotify::CURRVERSION < cutVer)
    {
        cutVer = CmdKickoffUserNotify::CURRVERSION;
    }

    /* check cutversion */
    if (CmdKickoffUserNotify::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->chPlaceholder */
    {
        ret = destBuf.writeInt8(this->chPlaceholder);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CmdKickoffUserNotify::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CmdKickoffUserNotify::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CmdKickoffUserNotify::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CmdKickoffUserNotify::CURRVERSION < cutVer)
    {
        cutVer = CmdKickoffUserNotify::CURRVERSION;
    }

    /* check cutversion */
    if (CmdKickoffUserNotify::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->chPlaceholder */
    {
        ret = srcBuf.readInt8(this->chPlaceholder);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CmdKickoffUserNotify::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CmdKickoffUserNotify::CURRVERSION < cutVer)
    {
        cutVer = CmdKickoffUserNotify::CURRVERSION;
    }

    /* check cutversion */
    if (CmdKickoffUserNotify::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->chPlaceholder */
    {
        ret = srcBuf.readInt8(this->chPlaceholder);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CmdKickoffUserNotify::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CmdKickoffUserNotify::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->chPlaceholder */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chPlaceholder]", "0x%02x", this->chPlaceholder);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CmdKickoffUserNotify::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CmdKickoffUserNotify::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientVcCodeReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientVcCodeReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientVcCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientVcCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientVcCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhoneNum */
    {
        ret = destBuf.writeInt64(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientVcCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientVcCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientVcCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhoneNum */
    {
        ret = destBuf.writeInt64_l(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientVcCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientVcCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientVcCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhoneNum */
    {
        ret = srcBuf.readInt64(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientVcCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientVcCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientVcCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhoneNum */
    {
        ret = srcBuf.readInt64_l(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llPhoneNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPhoneNum]", TDR_CPP_INT64_FORMAT, this->llPhoneNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientVcCodeReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientVcCodeReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientVcCodeResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientVcCodeResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientVcCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientVcCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientVcCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIsRegister */
    {
        ret = destBuf.writeInt32(this->iIsRegister);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientVcCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientVcCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientVcCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIsRegister */
    {
        ret = destBuf.writeInt32_l(this->iIsRegister);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientVcCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientVcCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientVcCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIsRegister */
    {
        ret = srcBuf.readInt32(this->iIsRegister);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientVcCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientVcCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientVcCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIsRegister */
    {
        ret = srcBuf.readInt32_l(this->iIsRegister);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientVcCodeResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iIsRegister */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iIsRegister]", "%d", this->iIsRegister);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientVcCodeResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientVcCodeResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRegisterReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRegisterReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRegisterReq::CURRVERSION < cutVer)
    {
        cutVer = ClientRegisterReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRegisterReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhoneNum */
    {
        ret = destBuf.writeInt64(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVcCode */
    {
        ret = destBuf.writeInt32(this->iVcCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNameLen */
    {
        ret = destBuf.writeInt32(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPwLen */
    {
        ret = destBuf.writeInt32(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPassWord */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPassWord, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPromotionCode */
    {
        ret = destBuf.writeInt64(this->llPromotionCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRegister_channel */
    {
        ret = destBuf.writeInt32(this->iRegister_channel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRegisterReq::CURRVERSION < cutVer)
    {
        cutVer = ClientRegisterReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRegisterReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhoneNum */
    {
        ret = destBuf.writeInt64_l(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVcCode */
    {
        ret = destBuf.writeInt32_l(this->iVcCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPwLen */
    {
        ret = destBuf.writeInt32_l(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPassWord */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPassWord, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPromotionCode */
    {
        ret = destBuf.writeInt64_l(this->llPromotionCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRegister_channel */
    {
        ret = destBuf.writeInt32_l(this->iRegister_channel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRegisterReq::CURRVERSION < cutVer)
    {
        cutVer = ClientRegisterReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRegisterReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhoneNum */
    {
        ret = srcBuf.readInt64(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVcCode */
    {
        ret = srcBuf.readInt32(this->iVcCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNameLen */
    {
        ret = srcBuf.readInt32(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPwLen */
    {
        ret = srcBuf.readInt32(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPassWord */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPassWord, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPromotionCode */
    {
        ret = srcBuf.readInt64(this->llPromotionCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRegister_channel */
    {
        ret = srcBuf.readInt32(this->iRegister_channel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRegisterReq::CURRVERSION < cutVer)
    {
        cutVer = ClientRegisterReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRegisterReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhoneNum */
    {
        ret = srcBuf.readInt64_l(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVcCode */
    {
        ret = srcBuf.readInt32_l(this->iVcCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPwLen */
    {
        ret = srcBuf.readInt32_l(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPassWord */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPassWord, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPromotionCode */
    {
        ret = srcBuf.readInt64_l(this->llPromotionCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRegister_channel */
    {
        ret = srcBuf.readInt32_l(this->iRegister_channel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llPhoneNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPhoneNum]", TDR_CPP_INT64_FORMAT, this->llPhoneNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVcCode */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVcCode]", "%d", this->iVcCode);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNameLen]", "%d", this->iNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szName */
    if (0 > this->iNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NAME_LEN < this->iNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szName]", this->iNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szName_i = 0; szName_i < this->iNameLen; szName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szName[szName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPwLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPwLen]", "%d", this->iPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szPassWord */
    if (0 > this->iPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_PASSWORD_LEN < this->iPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szPassWord]", this->iPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szPassWord_i = 0; szPassWord_i < this->iPwLen; szPassWord_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szPassWord[szPassWord_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPromotionCode */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPromotionCode]", TDR_CPP_INT64_FORMAT, this->llPromotionCode);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRegister_channel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRegister_channel]", "%d", this->iRegister_channel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRegisterReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRegisterReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRegisterResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRegisterResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRegisterResp::CURRVERSION < cutVer)
    {
        cutVer = ClientRegisterResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRegisterResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRegisterResp::CURRVERSION < cutVer)
    {
        cutVer = ClientRegisterResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRegisterResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRegisterResp::CURRVERSION < cutVer)
    {
        cutVer = ClientRegisterResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRegisterResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRegisterResp::CURRVERSION < cutVer)
    {
        cutVer = ClientRegisterResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRegisterResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRegisterResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRegisterResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRegisterResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRetrieveCodeReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRetrieveCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientRetrieveCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRetrieveCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhoneNum */
    {
        ret = destBuf.writeInt64(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRetrieveCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientRetrieveCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRetrieveCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhoneNum */
    {
        ret = destBuf.writeInt64_l(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRetrieveCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientRetrieveCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRetrieveCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhoneNum */
    {
        ret = srcBuf.readInt64(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRetrieveCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientRetrieveCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRetrieveCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhoneNum */
    {
        ret = srcBuf.readInt64_l(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llPhoneNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPhoneNum]", TDR_CPP_INT64_FORMAT, this->llPhoneNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRetrieveCodeReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRetrieveCodeReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRetrieveCodeResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRetrieveCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientRetrieveCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRetrieveCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRetrieveCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientRetrieveCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRetrieveCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRetrieveCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientRetrieveCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRetrieveCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRetrieveCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientRetrieveCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRetrieveCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRetrieveCodeResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRetrieveCodeResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRetrieveCodeResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientValidateRetrieveCodeReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientValidateRetrieveCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientValidateRetrieveCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientValidateRetrieveCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhoneNum */
    {
        ret = destBuf.writeInt64(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCode */
    {
        ret = destBuf.writeInt32(this->iCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientValidateRetrieveCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientValidateRetrieveCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientValidateRetrieveCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhoneNum */
    {
        ret = destBuf.writeInt64_l(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCode */
    {
        ret = destBuf.writeInt32_l(this->iCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientValidateRetrieveCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientValidateRetrieveCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientValidateRetrieveCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhoneNum */
    {
        ret = srcBuf.readInt64(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCode */
    {
        ret = srcBuf.readInt32(this->iCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientValidateRetrieveCodeReq::CURRVERSION < cutVer)
    {
        cutVer = ClientValidateRetrieveCodeReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientValidateRetrieveCodeReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhoneNum */
    {
        ret = srcBuf.readInt64_l(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCode */
    {
        ret = srcBuf.readInt32_l(this->iCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llPhoneNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPhoneNum]", TDR_CPP_INT64_FORMAT, this->llPhoneNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCode */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCode]", "%d", this->iCode);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientValidateRetrieveCodeReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientValidateRetrieveCodeReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientValidateRetrieveCodeResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientValidateRetrieveCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientValidateRetrieveCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientValidateRetrieveCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCodeStatus */
    {
        ret = destBuf.writeInt32(this->iCodeStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientValidateRetrieveCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientValidateRetrieveCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientValidateRetrieveCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCodeStatus */
    {
        ret = destBuf.writeInt32_l(this->iCodeStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientValidateRetrieveCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientValidateRetrieveCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientValidateRetrieveCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCodeStatus */
    {
        ret = srcBuf.readInt32(this->iCodeStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientValidateRetrieveCodeResp::CURRVERSION < cutVer)
    {
        cutVer = ClientValidateRetrieveCodeResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientValidateRetrieveCodeResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCodeStatus */
    {
        ret = srcBuf.readInt32_l(this->iCodeStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientValidateRetrieveCodeResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCodeStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCodeStatus]", "%d", this->iCodeStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientValidateRetrieveCodeResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientValidateRetrieveCodeResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientModifyPasswordReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientModifyPasswordReq::CURRVERSION < cutVer)
    {
        cutVer = ClientModifyPasswordReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientModifyPasswordReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhoneNum */
    {
        ret = destBuf.writeInt64(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPwdLen */
    {
        ret = destBuf.writeInt32(this->iPwdLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPassWord */
    {
        if (0 > this->iPwdLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwdLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPassWord, this->iPwdLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientModifyPasswordReq::CURRVERSION < cutVer)
    {
        cutVer = ClientModifyPasswordReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientModifyPasswordReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhoneNum */
    {
        ret = destBuf.writeInt64_l(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPwdLen */
    {
        ret = destBuf.writeInt32_l(this->iPwdLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPassWord */
    {
        if (0 > this->iPwdLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwdLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPassWord, this->iPwdLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientModifyPasswordReq::CURRVERSION < cutVer)
    {
        cutVer = ClientModifyPasswordReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientModifyPasswordReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhoneNum */
    {
        ret = srcBuf.readInt64(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPwdLen */
    {
        ret = srcBuf.readInt32(this->iPwdLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPassWord */
    {
        if (0 > this->iPwdLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwdLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPassWord, this->iPwdLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientModifyPasswordReq::CURRVERSION < cutVer)
    {
        cutVer = ClientModifyPasswordReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientModifyPasswordReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhoneNum */
    {
        ret = srcBuf.readInt64_l(this->llPhoneNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPwdLen */
    {
        ret = srcBuf.readInt32_l(this->iPwdLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPassWord */
    {
        if (0 > this->iPwdLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwdLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPassWord, this->iPwdLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llPhoneNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPhoneNum]", TDR_CPP_INT64_FORMAT, this->llPhoneNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPwdLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPwdLen]", "%d", this->iPwdLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szPassWord */
    if (0 > this->iPwdLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_PASSWORD_LEN < this->iPwdLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szPassWord]", this->iPwdLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szPassWord_i = 0; szPassWord_i < this->iPwdLen; szPassWord_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szPassWord[szPassWord_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientModifyPasswordReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientModifyPasswordReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientModifyPasswordResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientModifyPasswordResp::CURRVERSION < cutVer)
    {
        cutVer = ClientModifyPasswordResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientModifyPasswordResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientModifyPasswordResp::CURRVERSION < cutVer)
    {
        cutVer = ClientModifyPasswordResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientModifyPasswordResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientModifyPasswordResp::CURRVERSION < cutVer)
    {
        cutVer = ClientModifyPasswordResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientModifyPasswordResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientModifyPasswordResp::CURRVERSION < cutVer)
    {
        cutVer = ClientModifyPasswordResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientModifyPasswordResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientModifyPasswordResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientModifyPasswordResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientModifyPasswordResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientNameLogonReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientNameLogonReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNameLogonReq::CURRVERSION < cutVer)
    {
        cutVer = ClientNameLogonReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNameLogonReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iNameLen */
    {
        ret = destBuf.writeInt32(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_LOGON_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPwLen */
    {
        ret = destBuf.writeInt32(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPassword */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPassword, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNameLogonReq::CURRVERSION < cutVer)
    {
        cutVer = ClientNameLogonReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNameLogonReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_LOGON_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPwLen */
    {
        ret = destBuf.writeInt32_l(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPassword */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPassword, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNameLogonReq::CURRVERSION < cutVer)
    {
        cutVer = ClientNameLogonReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNameLogonReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iNameLen */
    {
        ret = srcBuf.readInt32(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_LOGON_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPwLen */
    {
        ret = srcBuf.readInt32(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPassword */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPassword, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNameLogonReq::CURRVERSION < cutVer)
    {
        cutVer = ClientNameLogonReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNameLogonReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_LOGON_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPwLen */
    {
        ret = srcBuf.readInt32_l(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPassword */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPassword, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNameLen]", "%d", this->iNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szName */
    if (0 > this->iNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_LOGON_NAME_LEN < this->iNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szName]", this->iNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szName_i = 0; szName_i < this->iNameLen; szName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szName[szName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPwLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPwLen]", "%d", this->iPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szPassword */
    if (0 > this->iPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_PASSWORD_LEN < this->iPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szPassword]", this->iPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szPassword_i = 0; szPassword_i < this->iPwLen; szPassword_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szPassword[szPassword_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientNameLogonReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientNameLogonReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientNameLogonResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientNameLogonResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNameLogonResp::CURRVERSION < cutVer)
    {
        cutVer = ClientNameLogonResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNameLogonResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chThirdPartyPwLen */
    {
        ret = destBuf.writeInt8(this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szThirdPartyPassword */
    {
        if (0 > this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szThirdPartyPassword, this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOssTokenLen */
    {
        ret = destBuf.writeInt32(this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szOssToken */
    {
        if (0 > this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OSS_TOKEN_MAX_LEN < this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szOssToken, this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLoginTokenLen */
    {
        ret = destBuf.writeInt32(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNameLogonResp::CURRVERSION < cutVer)
    {
        cutVer = ClientNameLogonResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNameLogonResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chThirdPartyPwLen */
    {
        ret = destBuf.writeInt8(this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szThirdPartyPassword */
    {
        if (0 > this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szThirdPartyPassword, this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOssTokenLen */
    {
        ret = destBuf.writeInt32_l(this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szOssToken */
    {
        if (0 > this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OSS_TOKEN_MAX_LEN < this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szOssToken, this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLoginTokenLen */
    {
        ret = destBuf.writeInt32_l(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNameLogonResp::CURRVERSION < cutVer)
    {
        cutVer = ClientNameLogonResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNameLogonResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chThirdPartyPwLen */
    {
        ret = srcBuf.readInt8(this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szThirdPartyPassword */
    {
        if (0 > this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szThirdPartyPassword, this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOssTokenLen */
    {
        ret = srcBuf.readInt32(this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szOssToken */
    {
        if (0 > this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OSS_TOKEN_MAX_LEN < this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szOssToken, this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLoginTokenLen */
    {
        ret = srcBuf.readInt32(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNameLogonResp::CURRVERSION < cutVer)
    {
        cutVer = ClientNameLogonResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNameLogonResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chThirdPartyPwLen */
    {
        ret = srcBuf.readInt8(this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szThirdPartyPassword */
    {
        if (0 > this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szThirdPartyPassword, this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOssTokenLen */
    {
        ret = srcBuf.readInt32_l(this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szOssToken */
    {
        if (0 > this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OSS_TOKEN_MAX_LEN < this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szOssToken, this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLoginTokenLen */
    {
        ret = srcBuf.readInt32_l(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNameLogonResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chThirdPartyPwLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chThirdPartyPwLen]", "0x%02x", this->chThirdPartyPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szThirdPartyPassword */
    if (0 > this->chThirdPartyPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->chThirdPartyPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szThirdPartyPassword]", this->chThirdPartyPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int8_t szThirdPartyPassword_i = 0; szThirdPartyPassword_i < this->chThirdPartyPwLen; szThirdPartyPassword_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szThirdPartyPassword[szThirdPartyPassword_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOssTokenLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOssTokenLen]", "%d", this->iOssTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szOssToken */
    if (0 > this->iOssTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (OSS_TOKEN_MAX_LEN < this->iOssTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szOssToken]", this->iOssTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szOssToken_i = 0; szOssToken_i < this->iOssTokenLen; szOssToken_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szOssToken[szOssToken_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iLoginTokenLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLoginTokenLen]", "%d", this->iLoginTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szLoginToken */
    if (0 > this->iLoginTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szLoginToken]", this->iLoginTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szLoginToken_i = 0; szLoginToken_i < this->iLoginTokenLen; szLoginToken_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szLoginToken[szLoginToken_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientNameLogonResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientNameLogonResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessNameLogin::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessNameLogin::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessNameLogin::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessNameLogin::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessNameLogin::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessNameLogin::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessNameLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iNameLen */
    {
        ret = destBuf.writeInt32(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_LOGON_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPwLen */
    {
        ret = destBuf.writeInt32(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPassword */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPassword, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessNameLogin::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessNameLogin::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessNameLogin::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessNameLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_LOGON_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPwLen */
    {
        ret = destBuf.writeInt32_l(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPassword */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPassword, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessNameLogin::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessNameLogin::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessNameLogin::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessNameLogin::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessNameLogin::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessNameLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iNameLen */
    {
        ret = srcBuf.readInt32(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_LOGON_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPwLen */
    {
        ret = srcBuf.readInt32(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPassword */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPassword, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessNameLogin::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessNameLogin::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessNameLogin::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessNameLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szName */
    {
        if (0 > this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_LOGON_NAME_LEN < this->iNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szName, this->iNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPwLen */
    {
        ret = srcBuf.readInt32_l(this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPassword */
    {
        if (0 > this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_PASSWORD_LEN < this->iPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPassword, this->iPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessNameLogin::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessNameLogin::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNameLen]", "%d", this->iNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szName */
    if (0 > this->iNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_LOGON_NAME_LEN < this->iNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szName]", this->iNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szName_i = 0; szName_i < this->iNameLen; szName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szName[szName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPwLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPwLen]", "%d", this->iPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szPassword */
    if (0 > this->iPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_PASSWORD_LEN < this->iPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szPassword]", this->iPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szPassword_i = 0; szPassword_i < this->iPwLen; szPassword_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szPassword[szPassword_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessNameLogin::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessNameLogin::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTokenLogin::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTokenLogin::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTokenLogin::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTokenLogin::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTokenLogin::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTokenLogin::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTokenLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iLoginTokenLen */
    {
        ret = destBuf.writeInt32(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTokenLogin::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTokenLogin::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTokenLogin::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTokenLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iLoginTokenLen */
    {
        ret = destBuf.writeInt32_l(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTokenLogin::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTokenLogin::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTokenLogin::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTokenLogin::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTokenLogin::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTokenLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iLoginTokenLen */
    {
        ret = srcBuf.readInt32(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTokenLogin::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTokenLogin::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTokenLogin::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTokenLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iLoginTokenLen */
    {
        ret = srcBuf.readInt32_l(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTokenLogin::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTokenLogin::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iLoginTokenLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLoginTokenLen]", "%d", this->iLoginTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szLoginToken */
    if (0 > this->iLoginTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szLoginToken]", this->iLoginTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szLoginToken_i = 0; szLoginToken_i < this->iLoginTokenLen; szLoginToken_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szLoginToken[szLoginToken_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTokenLogin::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTokenLogin::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessResponseClientNameLogin::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessResponseClientNameLogin::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessResponseClientNameLogin::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessResponseClientNameLogin::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessResponseClientNameLogin::CURRVERSION < cutVer)
    {
        cutVer = AccessResponseClientNameLogin::CURRVERSION;
    }

    /* check cutversion */
    if (AccessResponseClientNameLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRegister_channel */
    {
        ret = destBuf.writeInt32(this->iRegister_channel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bGender */
    {
        ret = destBuf.writeUInt8(this->bGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickname */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickname, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iThirdPartyPwLen */
    {
        ret = destBuf.writeInt32(this->iThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szThirdPartyPassword */
    {
        if (0 > this->iThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->iThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szThirdPartyPassword, this->iThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAge */
    {
        ret = destBuf.writeInt32(this->iAge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iConstellation */
    {
        ret = destBuf.writeInt32(this->iConstellation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidence */
    {
        ret = destBuf.writeInt32(this->iResidence);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidence_detailLen */
    {
        ret = destBuf.writeInt32(this->iResidence_detailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidence_detail */
    {
        if (0 > this->iResidence_detailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidence_detailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidence_detail, this->iResidence_detailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPromoter */
    {
        ret = destBuf.writeInt64(this->llPromoter);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromote_count */
    {
        ret = destBuf.writeInt32(this->iPromote_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromote_level */
    {
        ret = destBuf.writeInt32(this->iPromote_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLoginTokenLen */
    {
        ret = destBuf.writeInt32(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_integrity */
    {
        ret = destBuf.writeInt32(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIntegrity_level */
    {
        ret = destBuf.writeInt32(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_youwo */
    {
        ret = destBuf.writeInt32(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_game */
    {
        ret = destBuf.writeInt32(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_validate */
    {
        ret = destBuf.writeInt32(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_level */
    {
        ret = destBuf.writeInt32(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_buy_time */
    {
        ret = destBuf.writeInt32(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_deadline */
    {
        ret = destBuf.writeInt32(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPhoto_count */
    {
        ret = destBuf.writeInt32(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCert_flags */
    {
        ret = destBuf.writeInt64(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSincerity_value */
    {
        ret = destBuf.writeInt32(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBusiness_value */
    {
        ret = destBuf.writeInt32(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVisitor_count */
    {
        ret = destBuf.writeInt32(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llExp */
    {
        ret = destBuf.writeInt64(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLevel */
    {
        ret = destBuf.writeInt32(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRecharge */
    {
        ret = destBuf.writeInt32(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_level */
    {
        ret = destBuf.writeInt32(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_limit */
    {
        ret = destBuf.writeInt32(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOffline_deposit_limit */
    {
        ret = destBuf.writeInt32(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_create_fnum */
    {
        ret = destBuf.writeInt32(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_apply_fnum */
    {
        ret = destBuf.writeInt32(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llInterest */
    {
        ret = destBuf.writeInt64(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iShowLoginTips */
    {
        ret = destBuf.writeInt32(this->iShowLoginTips);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLoginTipsLen */
    {
        ret = destBuf.writeInt32(this->iLoginTipsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginTips */
    {
        if (0 > this->iLoginTipsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SHOW_TIPS_LEN < this->iLoginTipsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginTips, this->iLoginTipsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDueOrderCount */
    {
        ret = destBuf.writeInt32(this->iDueOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dueOrderList */
    {
        if (0 > this->iDueOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DUE_ORDER_COUNT < this->iDueOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t dueOrderList_i = 0; dueOrderList_i < this->iDueOrderCount; dueOrderList_i++)
        {
            ret = destBuf.writeInt64(this->dueOrderList[dueOrderList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iNow_time */
    {
        ret = destBuf.writeInt32(this->iNow_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AccessResponseClientNameLogin::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessResponseClientNameLogin::CURRVERSION < cutVer)
    {
        cutVer = AccessResponseClientNameLogin::CURRVERSION;
    }

    /* check cutversion */
    if (AccessResponseClientNameLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRegister_channel */
    {
        ret = destBuf.writeInt32_l(this->iRegister_channel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bGender */
    {
        ret = destBuf.writeUInt8(this->bGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickname */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickname, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iThirdPartyPwLen */
    {
        ret = destBuf.writeInt32_l(this->iThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szThirdPartyPassword */
    {
        if (0 > this->iThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->iThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szThirdPartyPassword, this->iThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAge */
    {
        ret = destBuf.writeInt32_l(this->iAge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iConstellation */
    {
        ret = destBuf.writeInt32_l(this->iConstellation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidence */
    {
        ret = destBuf.writeInt32_l(this->iResidence);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidence_detailLen */
    {
        ret = destBuf.writeInt32_l(this->iResidence_detailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidence_detail */
    {
        if (0 > this->iResidence_detailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidence_detailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidence_detail, this->iResidence_detailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPromoter */
    {
        ret = destBuf.writeInt64_l(this->llPromoter);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromote_count */
    {
        ret = destBuf.writeInt32_l(this->iPromote_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromote_level */
    {
        ret = destBuf.writeInt32_l(this->iPromote_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLoginTokenLen */
    {
        ret = destBuf.writeInt32_l(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_integrity */
    {
        ret = destBuf.writeInt32_l(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIntegrity_level */
    {
        ret = destBuf.writeInt32_l(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_youwo */
    {
        ret = destBuf.writeInt32_l(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_game */
    {
        ret = destBuf.writeInt32_l(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_validate */
    {
        ret = destBuf.writeInt32_l(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_level */
    {
        ret = destBuf.writeInt32_l(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_buy_time */
    {
        ret = destBuf.writeInt32_l(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_deadline */
    {
        ret = destBuf.writeInt32_l(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPhoto_count */
    {
        ret = destBuf.writeInt32_l(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCert_flags */
    {
        ret = destBuf.writeInt64_l(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSincerity_value */
    {
        ret = destBuf.writeInt32_l(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBusiness_value */
    {
        ret = destBuf.writeInt32_l(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVisitor_count */
    {
        ret = destBuf.writeInt32_l(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llExp */
    {
        ret = destBuf.writeInt64_l(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLevel */
    {
        ret = destBuf.writeInt32_l(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRecharge */
    {
        ret = destBuf.writeInt32_l(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_level */
    {
        ret = destBuf.writeInt32_l(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_limit */
    {
        ret = destBuf.writeInt32_l(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOffline_deposit_limit */
    {
        ret = destBuf.writeInt32_l(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_create_fnum */
    {
        ret = destBuf.writeInt32_l(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_apply_fnum */
    {
        ret = destBuf.writeInt32_l(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llInterest */
    {
        ret = destBuf.writeInt64_l(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iShowLoginTips */
    {
        ret = destBuf.writeInt32_l(this->iShowLoginTips);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLoginTipsLen */
    {
        ret = destBuf.writeInt32_l(this->iLoginTipsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginTips */
    {
        if (0 > this->iLoginTipsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SHOW_TIPS_LEN < this->iLoginTipsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginTips, this->iLoginTipsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDueOrderCount */
    {
        ret = destBuf.writeInt32_l(this->iDueOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dueOrderList */
    {
        if (0 > this->iDueOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DUE_ORDER_COUNT < this->iDueOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t dueOrderList_i = 0; dueOrderList_i < this->iDueOrderCount; dueOrderList_i++)
        {
            ret = destBuf.writeInt64_l(this->dueOrderList[dueOrderList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iNow_time */
    {
        ret = destBuf.writeInt32_l(this->iNow_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AccessResponseClientNameLogin::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessResponseClientNameLogin::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessResponseClientNameLogin::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessResponseClientNameLogin::CURRVERSION < cutVer)
    {
        cutVer = AccessResponseClientNameLogin::CURRVERSION;
    }

    /* check cutversion */
    if (AccessResponseClientNameLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRegister_channel */
    {
        ret = srcBuf.readInt32(this->iRegister_channel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bGender */
    {
        ret = srcBuf.readUInt8(this->bGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickname */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickname, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iThirdPartyPwLen */
    {
        ret = srcBuf.readInt32(this->iThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szThirdPartyPassword */
    {
        if (0 > this->iThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->iThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szThirdPartyPassword, this->iThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAge */
    {
        ret = srcBuf.readInt32(this->iAge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iConstellation */
    {
        ret = srcBuf.readInt32(this->iConstellation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidence */
    {
        ret = srcBuf.readInt32(this->iResidence);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidence_detailLen */
    {
        ret = srcBuf.readInt32(this->iResidence_detailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szResidence_detail */
    {
        if (0 > this->iResidence_detailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidence_detailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidence_detail, this->iResidence_detailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPromoter */
    {
        ret = srcBuf.readInt64(this->llPromoter);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromote_count */
    {
        ret = srcBuf.readInt32(this->iPromote_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromote_level */
    {
        ret = srcBuf.readInt32(this->iPromote_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLoginTokenLen */
    {
        ret = srcBuf.readInt32(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_integrity */
    {
        ret = srcBuf.readInt32(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIntegrity_level */
    {
        ret = srcBuf.readInt32(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_youwo */
    {
        ret = srcBuf.readInt32(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_game */
    {
        ret = srcBuf.readInt32(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_validate */
    {
        ret = srcBuf.readInt32(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_level */
    {
        ret = srcBuf.readInt32(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_buy_time */
    {
        ret = srcBuf.readInt32(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_deadline */
    {
        ret = srcBuf.readInt32(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPhoto_count */
    {
        ret = srcBuf.readInt32(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCert_flags */
    {
        ret = srcBuf.readInt64(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSincerity_value */
    {
        ret = srcBuf.readInt32(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBusiness_value */
    {
        ret = srcBuf.readInt32(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVisitor_count */
    {
        ret = srcBuf.readInt32(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llExp */
    {
        ret = srcBuf.readInt64(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLevel */
    {
        ret = srcBuf.readInt32(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRecharge */
    {
        ret = srcBuf.readInt32(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_level */
    {
        ret = srcBuf.readInt32(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_limit */
    {
        ret = srcBuf.readInt32(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOffline_deposit_limit */
    {
        ret = srcBuf.readInt32(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_create_fnum */
    {
        ret = srcBuf.readInt32(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_apply_fnum */
    {
        ret = srcBuf.readInt32(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llInterest */
    {
        ret = srcBuf.readInt64(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iShowLoginTips */
    {
        ret = srcBuf.readInt32(this->iShowLoginTips);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLoginTipsLen */
    {
        ret = srcBuf.readInt32(this->iLoginTipsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginTips */
    {
        if (0 > this->iLoginTipsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SHOW_TIPS_LEN < this->iLoginTipsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginTips, this->iLoginTipsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDueOrderCount */
    {
        ret = srcBuf.readInt32(this->iDueOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dueOrderList */
    {
        if (0 > this->iDueOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DUE_ORDER_COUNT < this->iDueOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t dueOrderList_i = 0; dueOrderList_i < this->iDueOrderCount; dueOrderList_i++)
        {
            ret = srcBuf.readInt64(this->dueOrderList[dueOrderList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iNow_time */
    {
        ret = srcBuf.readInt32(this->iNow_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AccessResponseClientNameLogin::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessResponseClientNameLogin::CURRVERSION < cutVer)
    {
        cutVer = AccessResponseClientNameLogin::CURRVERSION;
    }

    /* check cutversion */
    if (AccessResponseClientNameLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRegister_channel */
    {
        ret = srcBuf.readInt32_l(this->iRegister_channel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bGender */
    {
        ret = srcBuf.readUInt8(this->bGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickname */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickname, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iThirdPartyPwLen */
    {
        ret = srcBuf.readInt32_l(this->iThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szThirdPartyPassword */
    {
        if (0 > this->iThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->iThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szThirdPartyPassword, this->iThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAge */
    {
        ret = srcBuf.readInt32_l(this->iAge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iConstellation */
    {
        ret = srcBuf.readInt32_l(this->iConstellation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidence */
    {
        ret = srcBuf.readInt32_l(this->iResidence);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidence_detailLen */
    {
        ret = srcBuf.readInt32_l(this->iResidence_detailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szResidence_detail */
    {
        if (0 > this->iResidence_detailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidence_detailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidence_detail, this->iResidence_detailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPromoter */
    {
        ret = srcBuf.readInt64_l(this->llPromoter);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromote_count */
    {
        ret = srcBuf.readInt32_l(this->iPromote_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromote_level */
    {
        ret = srcBuf.readInt32_l(this->iPromote_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLoginTokenLen */
    {
        ret = srcBuf.readInt32_l(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_integrity */
    {
        ret = srcBuf.readInt32_l(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIntegrity_level */
    {
        ret = srcBuf.readInt32_l(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_youwo */
    {
        ret = srcBuf.readInt32_l(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_game */
    {
        ret = srcBuf.readInt32_l(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_validate */
    {
        ret = srcBuf.readInt32_l(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_level */
    {
        ret = srcBuf.readInt32_l(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_buy_time */
    {
        ret = srcBuf.readInt32_l(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_deadline */
    {
        ret = srcBuf.readInt32_l(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPhoto_count */
    {
        ret = srcBuf.readInt32_l(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCert_flags */
    {
        ret = srcBuf.readInt64_l(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSincerity_value */
    {
        ret = srcBuf.readInt32_l(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBusiness_value */
    {
        ret = srcBuf.readInt32_l(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVisitor_count */
    {
        ret = srcBuf.readInt32_l(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llExp */
    {
        ret = srcBuf.readInt64_l(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLevel */
    {
        ret = srcBuf.readInt32_l(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRecharge */
    {
        ret = srcBuf.readInt32_l(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_level */
    {
        ret = srcBuf.readInt32_l(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_limit */
    {
        ret = srcBuf.readInt32_l(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOffline_deposit_limit */
    {
        ret = srcBuf.readInt32_l(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_create_fnum */
    {
        ret = srcBuf.readInt32_l(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_apply_fnum */
    {
        ret = srcBuf.readInt32_l(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llInterest */
    {
        ret = srcBuf.readInt64_l(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iShowLoginTips */
    {
        ret = srcBuf.readInt32_l(this->iShowLoginTips);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLoginTipsLen */
    {
        ret = srcBuf.readInt32_l(this->iLoginTipsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginTips */
    {
        if (0 > this->iLoginTipsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SHOW_TIPS_LEN < this->iLoginTipsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginTips, this->iLoginTipsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDueOrderCount */
    {
        ret = srcBuf.readInt32_l(this->iDueOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dueOrderList */
    {
        if (0 > this->iDueOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DUE_ORDER_COUNT < this->iDueOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t dueOrderList_i = 0; dueOrderList_i < this->iDueOrderCount; dueOrderList_i++)
        {
            ret = srcBuf.readInt64_l(this->dueOrderList[dueOrderList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iNow_time */
    {
        ret = srcBuf.readInt32_l(this->iNow_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AccessResponseClientNameLogin::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessResponseClientNameLogin::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRegister_channel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRegister_channel]", "%d", this->iRegister_channel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPortrait */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPortrait]", TDR_CPP_INT64_FORMAT, this->llPortrait);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llBirthday */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llBirthday]", TDR_CPP_INT64_FORMAT, this->llBirthday);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bGender]", "0x%02x", this->bGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickname */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickname]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickname_i = 0; szNickname_i < this->iNickNameLen; szNickname_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickname[szNickname_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iThirdPartyPwLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iThirdPartyPwLen]", "%d", this->iThirdPartyPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szThirdPartyPassword */
    if (0 > this->iThirdPartyPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->iThirdPartyPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szThirdPartyPassword]", this->iThirdPartyPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szThirdPartyPassword_i = 0; szThirdPartyPassword_i < this->iThirdPartyPwLen; szThirdPartyPassword_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szThirdPartyPassword[szThirdPartyPassword_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAge */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAge]", "%d", this->iAge);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOccupation */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOccupation]", "%d", this->iOccupation);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iConstellation */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConstellation]", "%d", this->iConstellation);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSignatureLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSignatureLen]", "%d", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szSignature */
    if (0 > this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szSignature]", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szSignature_i = 0; szSignature_i < this->iSignatureLen; szSignature_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szSignature[szSignature_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResidence */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidence]", "%d", this->iResidence);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResidence_detailLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidence_detailLen]", "%d", this->iResidence_detailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szResidence_detail */
    if (0 > this->iResidence_detailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidence_detailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szResidence_detail]", this->iResidence_detailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szResidence_detail_i = 0; szResidence_detail_i < this->iResidence_detailLen; szResidence_detail_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szResidence_detail[szResidence_detail_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPromoter */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPromoter]", TDR_CPP_INT64_FORMAT, this->llPromoter);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPromote_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPromote_count]", "%d", this->iPromote_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPromote_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPromote_level]", "%d", this->iPromote_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iLoginTokenLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLoginTokenLen]", "%d", this->iLoginTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szLoginToken */
    if (0 > this->iLoginTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szLoginToken]", this->iLoginTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szLoginToken_i = 0; szLoginToken_i < this->iLoginTokenLen; szLoginToken_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szLoginToken[szLoginToken_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_integrity */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_integrity]", "%d", this->iGold_integrity);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iIntegrity_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iIntegrity_level]", "%d", this->iIntegrity_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_youwo */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_youwo]", "%d", this->iGold_youwo);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_game */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_game]", "%d", this->iGold_game);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_validate */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_validate]", "%d", this->iGold_validate);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVip_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVip_level]", "%d", this->iVip_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVip_buy_time */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVip_buy_time]", "%d", this->iVip_buy_time);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVip_deadline */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVip_deadline]", "%d", this->iVip_deadline);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPhoto_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPhoto_count]", "%d", this->iPhoto_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCert_flags */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCert_flags]", TDR_CPP_INT64_FORMAT, this->llCert_flags);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSincerity_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSincerity_value]", "%d", this->iSincerity_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBusiness_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBusiness_value]", "%d", this->iBusiness_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVisitor_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVisitor_count]", "%d", this->iVisitor_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llExp */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llExp]", TDR_CPP_INT64_FORMAT, this->llExp);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iLevel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLevel]", "%d", this->iLevel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRecharge */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRecharge]", "%d", this->iRecharge);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDeposit_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDeposit_level]", "%d", this->iDeposit_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDeposit_limit */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDeposit_limit]", "%d", this->iDeposit_limit);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOffline_deposit_limit */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOffline_deposit_limit]", "%d", this->iOffline_deposit_limit);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrder_create_fnum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrder_create_fnum]", "%d", this->iOrder_create_fnum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrder_apply_fnum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrder_apply_fnum]", "%d", this->iOrder_apply_fnum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llInterest */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llInterest]", TDR_CPP_INT64_FORMAT, this->llInterest);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iShowLoginTips */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iShowLoginTips]", "%d", this->iShowLoginTips);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iLoginTipsLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLoginTipsLen]", "%d", this->iLoginTipsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szLoginTips */
    if (0 > this->iLoginTipsLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_SHOW_TIPS_LEN < this->iLoginTipsLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szLoginTips]", this->iLoginTipsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szLoginTips_i = 0; szLoginTips_i < this->iLoginTipsLen; szLoginTips_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szLoginTips[szLoginTips_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDueOrderCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDueOrderCount]", "%d", this->iDueOrderCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dueOrderList */
    if (0 > this->iDueOrderCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_DUE_ORDER_COUNT < this->iDueOrderCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[dueOrderList]", this->iDueOrderCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t dueOrderList_i = 0; dueOrderList_i < this->iDueOrderCount; dueOrderList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->dueOrderList[dueOrderList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNow_time */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNow_time]", "%d", this->iNow_time);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessResponseClientNameLogin::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessResponseClientNameLogin::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientTokenLoginReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientTokenLoginReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientTokenLoginReq::CURRVERSION < cutVer)
    {
        cutVer = ClientTokenLoginReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientTokenLoginReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iLoginTokenLen */
    {
        ret = destBuf.writeInt32(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientTokenLoginReq::CURRVERSION < cutVer)
    {
        cutVer = ClientTokenLoginReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientTokenLoginReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iLoginTokenLen */
    {
        ret = destBuf.writeInt32_l(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientTokenLoginReq::CURRVERSION < cutVer)
    {
        cutVer = ClientTokenLoginReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientTokenLoginReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iLoginTokenLen */
    {
        ret = srcBuf.readInt32(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientTokenLoginReq::CURRVERSION < cutVer)
    {
        cutVer = ClientTokenLoginReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientTokenLoginReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iLoginTokenLen */
    {
        ret = srcBuf.readInt32_l(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iLoginTokenLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLoginTokenLen]", "%d", this->iLoginTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szLoginToken */
    if (0 > this->iLoginTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szLoginToken]", this->iLoginTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szLoginToken_i = 0; szLoginToken_i < this->iLoginTokenLen; szLoginToken_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szLoginToken[szLoginToken_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientTokenLoginReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientTokenLoginReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientTokenLoginResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientTokenLoginResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientTokenLoginResp::CURRVERSION < cutVer)
    {
        cutVer = ClientTokenLoginResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientTokenLoginResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chThirdPartyPwLen */
    {
        ret = destBuf.writeInt8(this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szThirdPartyPassword */
    {
        if (0 > this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szThirdPartyPassword, this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOssTokenLen */
    {
        ret = destBuf.writeInt32(this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szOssToken */
    {
        if (0 > this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OSS_TOKEN_MAX_LEN < this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szOssToken, this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLoginTokenLen */
    {
        ret = destBuf.writeInt32(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientTokenLoginResp::CURRVERSION < cutVer)
    {
        cutVer = ClientTokenLoginResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientTokenLoginResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chThirdPartyPwLen */
    {
        ret = destBuf.writeInt8(this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szThirdPartyPassword */
    {
        if (0 > this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szThirdPartyPassword, this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOssTokenLen */
    {
        ret = destBuf.writeInt32_l(this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szOssToken */
    {
        if (0 > this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OSS_TOKEN_MAX_LEN < this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szOssToken, this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLoginTokenLen */
    {
        ret = destBuf.writeInt32_l(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientTokenLoginResp::CURRVERSION < cutVer)
    {
        cutVer = ClientTokenLoginResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientTokenLoginResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chThirdPartyPwLen */
    {
        ret = srcBuf.readInt8(this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szThirdPartyPassword */
    {
        if (0 > this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szThirdPartyPassword, this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOssTokenLen */
    {
        ret = srcBuf.readInt32(this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szOssToken */
    {
        if (0 > this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OSS_TOKEN_MAX_LEN < this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szOssToken, this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLoginTokenLen */
    {
        ret = srcBuf.readInt32(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientTokenLoginResp::CURRVERSION < cutVer)
    {
        cutVer = ClientTokenLoginResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientTokenLoginResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chThirdPartyPwLen */
    {
        ret = srcBuf.readInt8(this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szThirdPartyPassword */
    {
        if (0 > this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->chThirdPartyPwLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szThirdPartyPassword, this->chThirdPartyPwLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOssTokenLen */
    {
        ret = srcBuf.readInt32_l(this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szOssToken */
    {
        if (0 > this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OSS_TOKEN_MAX_LEN < this->iOssTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szOssToken, this->iOssTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLoginTokenLen */
    {
        ret = srcBuf.readInt32_l(this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szLoginToken */
    {
        if (0 > this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szLoginToken, this->iLoginTokenLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientTokenLoginResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chThirdPartyPwLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chThirdPartyPwLen]", "0x%02x", this->chThirdPartyPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szThirdPartyPassword */
    if (0 > this->chThirdPartyPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_THIRD_PARTY_PASSWORD_LEN < this->chThirdPartyPwLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szThirdPartyPassword]", this->chThirdPartyPwLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int8_t szThirdPartyPassword_i = 0; szThirdPartyPassword_i < this->chThirdPartyPwLen; szThirdPartyPassword_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szThirdPartyPassword[szThirdPartyPassword_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOssTokenLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOssTokenLen]", "%d", this->iOssTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szOssToken */
    if (0 > this->iOssTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (OSS_TOKEN_MAX_LEN < this->iOssTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szOssToken]", this->iOssTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szOssToken_i = 0; szOssToken_i < this->iOssTokenLen; szOssToken_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szOssToken[szOssToken_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iLoginTokenLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLoginTokenLen]", "%d", this->iLoginTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szLoginToken */
    if (0 > this->iLoginTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_LOGIN_TOKEN_LEN < this->iLoginTokenLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szLoginToken]", this->iLoginTokenLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szLoginToken_i = 0; szLoginToken_i < this->iLoginTokenLen; szLoginToken_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szLoginToken[szLoginToken_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientTokenLoginResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientTokenLoginResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AddressPhoneInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AddressPhoneInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AddressPhoneInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AddressPhoneInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AddressPhoneInfo::CURRVERSION < cutVer)
    {
        cutVer = AddressPhoneInfo::CURRVERSION;
    }

    /* check cutversion */
    if (AddressPhoneInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhone */
    {
        ret = destBuf.writeInt64(this->llPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIsFriend */
    {
        ret = destBuf.writeInt32(this->iIsFriend);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AddressPhoneInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AddressPhoneInfo::CURRVERSION < cutVer)
    {
        cutVer = AddressPhoneInfo::CURRVERSION;
    }

    /* check cutversion */
    if (AddressPhoneInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPhone */
    {
        ret = destBuf.writeInt64_l(this->llPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIsFriend */
    {
        ret = destBuf.writeInt32_l(this->iIsFriend);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AddressPhoneInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AddressPhoneInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AddressPhoneInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AddressPhoneInfo::CURRVERSION < cutVer)
    {
        cutVer = AddressPhoneInfo::CURRVERSION;
    }

    /* check cutversion */
    if (AddressPhoneInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhone */
    {
        ret = srcBuf.readInt64(this->llPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIsFriend */
    {
        ret = srcBuf.readInt32(this->iIsFriend);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AddressPhoneInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AddressPhoneInfo::CURRVERSION < cutVer)
    {
        cutVer = AddressPhoneInfo::CURRVERSION;
    }

    /* check cutversion */
    if (AddressPhoneInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPhone */
    {
        ret = srcBuf.readInt64_l(this->llPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIsFriend */
    {
        ret = srcBuf.readInt32_l(this->iIsFriend);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AddressPhoneInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AddressPhoneInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llPhone */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPhone]", TDR_CPP_INT64_FORMAT, this->llPhone);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickName */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickName]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickName_i = 0; szNickName_i < this->iNickNameLen; szNickName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickName[szNickName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iIsFriend */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iIsFriend]", "%d", this->iIsFriend);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AddressPhoneInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AddressPhoneInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientAddressPhoneQueryReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddressPhoneQueryReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAddressPhoneQueryReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddressPhoneQueryReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iAddressPhoneCount */
    {
        ret = destBuf.writeInt32(this->iAddressPhoneCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->addressPhones */
    {
        if (0 > this->iAddressPhoneCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_ADDRESS_PHONE_COUNT_ONCE < this->iAddressPhoneCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t addressPhones_i = 0; addressPhones_i < this->iAddressPhoneCount; addressPhones_i++)
        {
            ret = destBuf.writeInt64(this->addressPhones[addressPhones_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddressPhoneQueryReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAddressPhoneQueryReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddressPhoneQueryReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iAddressPhoneCount */
    {
        ret = destBuf.writeInt32_l(this->iAddressPhoneCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->addressPhones */
    {
        if (0 > this->iAddressPhoneCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_ADDRESS_PHONE_COUNT_ONCE < this->iAddressPhoneCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t addressPhones_i = 0; addressPhones_i < this->iAddressPhoneCount; addressPhones_i++)
        {
            ret = destBuf.writeInt64_l(this->addressPhones[addressPhones_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddressPhoneQueryReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAddressPhoneQueryReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddressPhoneQueryReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iAddressPhoneCount */
    {
        ret = srcBuf.readInt32(this->iAddressPhoneCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->addressPhones */
    {
        if (0 > this->iAddressPhoneCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_ADDRESS_PHONE_COUNT_ONCE < this->iAddressPhoneCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t addressPhones_i = 0; addressPhones_i < this->iAddressPhoneCount; addressPhones_i++)
        {
            ret = srcBuf.readInt64(this->addressPhones[addressPhones_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddressPhoneQueryReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAddressPhoneQueryReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddressPhoneQueryReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iAddressPhoneCount */
    {
        ret = srcBuf.readInt32_l(this->iAddressPhoneCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->addressPhones */
    {
        if (0 > this->iAddressPhoneCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_ADDRESS_PHONE_COUNT_ONCE < this->iAddressPhoneCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t addressPhones_i = 0; addressPhones_i < this->iAddressPhoneCount; addressPhones_i++)
        {
            ret = srcBuf.readInt64_l(this->addressPhones[addressPhones_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iAddressPhoneCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAddressPhoneCount]", "%d", this->iAddressPhoneCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->addressPhones */
    if (0 > this->iAddressPhoneCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_ADDRESS_PHONE_COUNT_ONCE < this->iAddressPhoneCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[addressPhones]", this->iAddressPhoneCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t addressPhones_i = 0; addressPhones_i < this->iAddressPhoneCount; addressPhones_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->addressPhones[addressPhones_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientAddressPhoneQueryReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientAddressPhoneQueryReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientAddressPhoneQueryResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddressPhoneQueryResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAddressPhoneQueryResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddressPhoneQueryResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAddressPhoneInfoCount */
    {
        ret = destBuf.writeInt32(this->iAddressPhoneInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astAddressPhoneInfo */
    {
        if (0 > this->iAddressPhoneInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_ADDRESS_PHONE_COUNT_ONCE < this->iAddressPhoneInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAddressPhoneInfo_i = 0; astAddressPhoneInfo_i < this->iAddressPhoneInfoCount; astAddressPhoneInfo_i++)
        {
            ret = this->astAddressPhoneInfo[astAddressPhoneInfo_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddressPhoneQueryResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAddressPhoneQueryResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddressPhoneQueryResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAddressPhoneInfoCount */
    {
        ret = destBuf.writeInt32_l(this->iAddressPhoneInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astAddressPhoneInfo */
    {
        if (0 > this->iAddressPhoneInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_ADDRESS_PHONE_COUNT_ONCE < this->iAddressPhoneInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAddressPhoneInfo_i = 0; astAddressPhoneInfo_i < this->iAddressPhoneInfoCount; astAddressPhoneInfo_i++)
        {
            ret = this->astAddressPhoneInfo[astAddressPhoneInfo_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddressPhoneQueryResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAddressPhoneQueryResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddressPhoneQueryResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAddressPhoneInfoCount */
    {
        ret = srcBuf.readInt32(this->iAddressPhoneInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astAddressPhoneInfo */
    {
        if (0 > this->iAddressPhoneInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_ADDRESS_PHONE_COUNT_ONCE < this->iAddressPhoneInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAddressPhoneInfo_i = 0; astAddressPhoneInfo_i < this->iAddressPhoneInfoCount; astAddressPhoneInfo_i++)
        {
            ret = this->astAddressPhoneInfo[astAddressPhoneInfo_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddressPhoneQueryResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAddressPhoneQueryResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddressPhoneQueryResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAddressPhoneInfoCount */
    {
        ret = srcBuf.readInt32_l(this->iAddressPhoneInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astAddressPhoneInfo */
    {
        if (0 > this->iAddressPhoneInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_ADDRESS_PHONE_COUNT_ONCE < this->iAddressPhoneInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAddressPhoneInfo_i = 0; astAddressPhoneInfo_i < this->iAddressPhoneInfoCount; astAddressPhoneInfo_i++)
        {
            ret = this->astAddressPhoneInfo[astAddressPhoneInfo_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddressPhoneQueryResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAddressPhoneInfoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAddressPhoneInfoCount]", "%d", this->iAddressPhoneInfoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astAddressPhoneInfo */
    if (0 > this->iAddressPhoneInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_ADDRESS_PHONE_COUNT_ONCE < this->iAddressPhoneInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astAddressPhoneInfo_i = 0; astAddressPhoneInfo_i < this->iAddressPhoneInfoCount; astAddressPhoneInfo_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astAddressPhoneInfo]", astAddressPhoneInfo_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astAddressPhoneInfo[astAddressPhoneInfo_i] */
        if (0 > indent)
        {
            ret = this->astAddressPhoneInfo[astAddressPhoneInfo_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astAddressPhoneInfo[astAddressPhoneInfo_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
ClientAddressPhoneQueryResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientAddressPhoneQueryResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientBaseInfoReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientBaseInfoReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientBaseInfoReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientBaseInfoReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientBaseInfoResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientBaseInfoResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chAdapted */
    {
        ret = destBuf.writeInt8(this->chAdapted);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chAdapted */
    {
        ret = destBuf.writeInt8(this->chAdapted);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chAdapted */
    {
        ret = srcBuf.readInt8(this->chAdapted);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chAdapted */
    {
        ret = srcBuf.readInt8(this->chAdapted);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chAdapted */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chAdapted]", "0x%02x", this->chAdapted);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chGender]", "0x%02x", this->chGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llBirthday */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llBirthday]", TDR_CPP_INT64_FORMAT, this->llBirthday);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPortrait */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPortrait]", TDR_CPP_INT64_FORMAT, this->llPortrait);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickName */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickName]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickName_i = 0; szNickName_i < this->iNickNameLen; szNickName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickName[szNickName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientBaseInfoResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientBaseInfoResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
UserBaseInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
UserBaseInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
UserBaseInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
UserBaseInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || UserBaseInfo::CURRVERSION < cutVer)
    {
        cutVer = UserBaseInfo::CURRVERSION;
    }

    /* check cutversion */
    if (UserBaseInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->chAdapted */
    {
        ret = destBuf.writeInt8(this->chAdapted);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidention */
    {
        ret = destBuf.writeInt32(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidentionDetailLen */
    {
        ret = destBuf.writeInt32(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iId */
    {
        ret = destBuf.writeInt32(this->iId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
UserBaseInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || UserBaseInfo::CURRVERSION < cutVer)
    {
        cutVer = UserBaseInfo::CURRVERSION;
    }

    /* check cutversion */
    if (UserBaseInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->chAdapted */
    {
        ret = destBuf.writeInt8(this->chAdapted);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidention */
    {
        ret = destBuf.writeInt32_l(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidentionDetailLen */
    {
        ret = destBuf.writeInt32_l(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iId */
    {
        ret = destBuf.writeInt32_l(this->iId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
UserBaseInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
UserBaseInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
UserBaseInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || UserBaseInfo::CURRVERSION < cutVer)
    {
        cutVer = UserBaseInfo::CURRVERSION;
    }

    /* check cutversion */
    if (UserBaseInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->chAdapted */
    {
        ret = srcBuf.readInt8(this->chAdapted);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidention */
    {
        ret = srcBuf.readInt32(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidentionDetailLen */
    {
        ret = srcBuf.readInt32(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iId */
    {
        ret = srcBuf.readInt32(this->iId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
UserBaseInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || UserBaseInfo::CURRVERSION < cutVer)
    {
        cutVer = UserBaseInfo::CURRVERSION;
    }

    /* check cutversion */
    if (UserBaseInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->chAdapted */
    {
        ret = srcBuf.readInt8(this->chAdapted);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidention */
    {
        ret = srcBuf.readInt32_l(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidentionDetailLen */
    {
        ret = srcBuf.readInt32_l(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iId */
    {
        ret = srcBuf.readInt32_l(this->iId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
UserBaseInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
UserBaseInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->chAdapted */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chAdapted]", "0x%02x", this->chAdapted);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chGender]", "0x%02x", this->chGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llBirthday */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llBirthday]", TDR_CPP_INT64_FORMAT, this->llBirthday);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPortrait */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPortrait]", TDR_CPP_INT64_FORMAT, this->llPortrait);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickName */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickName]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickName_i = 0; szNickName_i < this->iNickNameLen; szNickName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickName[szNickName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOccupation */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOccupation]", "%d", this->iOccupation);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSignatureLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSignatureLen]", "%d", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szSignature */
    if (0 > this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szSignature]", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szSignature_i = 0; szSignature_i < this->iSignatureLen; szSignature_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szSignature[szSignature_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResidention */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidention]", "%d", this->iResidention);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResidentionDetailLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidentionDetailLen]", "%d", this->iResidentionDetailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szResidentionDetail */
    if (0 > this->iResidentionDetailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szResidentionDetail]", this->iResidentionDetailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szResidentionDetail_i = 0; szResidentionDetail_i < this->iResidentionDetailLen; szResidentionDetail_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szResidentionDetail[szResidentionDetail_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iId]", "%d", this->iId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
UserBaseInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
UserBaseInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUserAccountInfoReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUserAccountInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUserAccountInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUserAccountInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUserAccountInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUserAccountInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUserAccountInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUserAccountInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUserAccountInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUserAccountInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUserAccountInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUserAccountInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUserAccountInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUserAccountInfoReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUserAccountInfoReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUserAccountInfoResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUserAccountInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUserAccountInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUserAccountInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidention */
    {
        ret = destBuf.writeInt32(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidentionDetailLen */
    {
        ret = destBuf.writeInt32(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUserAccountInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUserAccountInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUserAccountInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidention */
    {
        ret = destBuf.writeInt32_l(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidentionDetailLen */
    {
        ret = destBuf.writeInt32_l(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUserAccountInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUserAccountInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUserAccountInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidention */
    {
        ret = srcBuf.readInt32(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidentionDetailLen */
    {
        ret = srcBuf.readInt32(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUserAccountInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUserAccountInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUserAccountInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidention */
    {
        ret = srcBuf.readInt32_l(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidentionDetailLen */
    {
        ret = srcBuf.readInt32_l(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUserAccountInfoResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chGender]", "0x%02x", this->chGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llBirthday */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llBirthday]", TDR_CPP_INT64_FORMAT, this->llBirthday);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPortrait */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPortrait]", TDR_CPP_INT64_FORMAT, this->llPortrait);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickName */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickName]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickName_i = 0; szNickName_i < this->iNickNameLen; szNickName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickName[szNickName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOccupation */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOccupation]", "%d", this->iOccupation);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSignatureLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSignatureLen]", "%d", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szSignature */
    if (0 > this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szSignature]", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szSignature_i = 0; szSignature_i < this->iSignatureLen; szSignature_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szSignature[szSignature_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResidention */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidention]", "%d", this->iResidention);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResidentionDetailLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidentionDetailLen]", "%d", this->iResidentionDetailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szResidentionDetail */
    if (0 > this->iResidentionDetailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szResidentionDetail]", this->iResidentionDetailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szResidentionDetail_i = 0; szResidentionDetail_i < this->iResidentionDetailLen; szResidentionDetail_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szResidentionDetail[szResidentionDetail_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUserAccountInfoResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUserAccountInfoResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientAccountInfoListReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAccountInfoListReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAccountInfoListReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAccountInfoListReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iUidCount */
    {
        ret = destBuf.writeInt32(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_ACCOUNT_INFO_MAX_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = destBuf.writeInt64(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAccountInfoListReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAccountInfoListReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAccountInfoListReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iUidCount */
    {
        ret = destBuf.writeInt32_l(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_ACCOUNT_INFO_MAX_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = destBuf.writeInt64_l(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAccountInfoListReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAccountInfoListReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAccountInfoListReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iUidCount */
    {
        ret = srcBuf.readInt32(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_ACCOUNT_INFO_MAX_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = srcBuf.readInt64(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAccountInfoListReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAccountInfoListReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAccountInfoListReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iUidCount */
    {
        ret = srcBuf.readInt32_l(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_ACCOUNT_INFO_MAX_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = srcBuf.readInt64_l(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iUidCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iUidCount]", "%d", this->iUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->uidList */
    if (0 > this->iUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_ACCOUNT_INFO_MAX_COUNT < this->iUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[uidList]", this->iUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->uidList[uidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientAccountInfoListReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientAccountInfoListReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientAccountInfoListResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAccountInfoListResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAccountInfoListResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAccountInfoListResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iUserInfoCount */
    {
        ret = destBuf.writeInt32(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astUserInfos */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_ACCOUNT_INFO_MAX_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfos_i = 0; astUserInfos_i < this->iUserInfoCount; astUserInfos_i++)
        {
            ret = this->astUserInfos[astUserInfos_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAccountInfoListResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAccountInfoListResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAccountInfoListResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iUserInfoCount */
    {
        ret = destBuf.writeInt32_l(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astUserInfos */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_ACCOUNT_INFO_MAX_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfos_i = 0; astUserInfos_i < this->iUserInfoCount; astUserInfos_i++)
        {
            ret = this->astUserInfos[astUserInfos_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAccountInfoListResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAccountInfoListResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAccountInfoListResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iUserInfoCount */
    {
        ret = srcBuf.readInt32(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astUserInfos */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_ACCOUNT_INFO_MAX_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfos_i = 0; astUserInfos_i < this->iUserInfoCount; astUserInfos_i++)
        {
            ret = this->astUserInfos[astUserInfos_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAccountInfoListResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAccountInfoListResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAccountInfoListResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iUserInfoCount */
    {
        ret = srcBuf.readInt32_l(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astUserInfos */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_ACCOUNT_INFO_MAX_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfos_i = 0; astUserInfos_i < this->iUserInfoCount; astUserInfos_i++)
        {
            ret = this->astUserInfos[astUserInfos_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAccountInfoListResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iUserInfoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iUserInfoCount]", "%d", this->iUserInfoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astUserInfos */
    if (0 > this->iUserInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_ACCOUNT_INFO_MAX_COUNT < this->iUserInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astUserInfos_i = 0; astUserInfos_i < this->iUserInfoCount; astUserInfos_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astUserInfos]", astUserInfos_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astUserInfos[astUserInfos_i] */
        if (0 > indent)
        {
            ret = this->astUserInfos[astUserInfos_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astUserInfos[astUserInfos_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
ClientAccountInfoListResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientAccountInfoListResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientBaseInfoListReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoListReq::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoListReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoListReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iUidCount */
    {
        ret = destBuf.writeInt32(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_BASE_INFO_MAX_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = destBuf.writeInt64(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoListReq::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoListReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoListReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iUidCount */
    {
        ret = destBuf.writeInt32_l(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_BASE_INFO_MAX_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = destBuf.writeInt64_l(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoListReq::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoListReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoListReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iUidCount */
    {
        ret = srcBuf.readInt32(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_BASE_INFO_MAX_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = srcBuf.readInt64(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoListReq::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoListReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoListReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iUidCount */
    {
        ret = srcBuf.readInt32_l(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_BASE_INFO_MAX_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = srcBuf.readInt64_l(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iUidCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iUidCount]", "%d", this->iUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->uidList */
    if (0 > this->iUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_BASE_INFO_MAX_COUNT < this->iUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[uidList]", this->iUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->uidList[uidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientBaseInfoListReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientBaseInfoListReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientBaseInfoListResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoListResp::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoListResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoListResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iUserInfoCount */
    {
        ret = destBuf.writeInt32(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astUserInfos */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_BASE_INFO_MAX_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfos_i = 0; astUserInfos_i < this->iUserInfoCount; astUserInfos_i++)
        {
            ret = this->astUserInfos[astUserInfos_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoListResp::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoListResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoListResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iUserInfoCount */
    {
        ret = destBuf.writeInt32_l(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astUserInfos */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_BASE_INFO_MAX_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfos_i = 0; astUserInfos_i < this->iUserInfoCount; astUserInfos_i++)
        {
            ret = this->astUserInfos[astUserInfos_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoListResp::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoListResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoListResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iUserInfoCount */
    {
        ret = srcBuf.readInt32(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astUserInfos */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_BASE_INFO_MAX_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfos_i = 0; astUserInfos_i < this->iUserInfoCount; astUserInfos_i++)
        {
            ret = this->astUserInfos[astUserInfos_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientBaseInfoListResp::CURRVERSION < cutVer)
    {
        cutVer = ClientBaseInfoListResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientBaseInfoListResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iUserInfoCount */
    {
        ret = srcBuf.readInt32_l(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astUserInfos */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_BASE_INFO_MAX_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfos_i = 0; astUserInfos_i < this->iUserInfoCount; astUserInfos_i++)
        {
            ret = this->astUserInfos[astUserInfos_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientBaseInfoListResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iUserInfoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iUserInfoCount]", "%d", this->iUserInfoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astUserInfos */
    if (0 > this->iUserInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_BASE_INFO_MAX_COUNT < this->iUserInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astUserInfos_i = 0; astUserInfos_i < this->iUserInfoCount; astUserInfos_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astUserInfos]", astUserInfos_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astUserInfos[astUserInfos_i] */
        if (0 > indent)
        {
            ret = this->astUserInfos[astUserInfos_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astUserInfos[astUserInfos_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
ClientBaseInfoListResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientBaseInfoListResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateBaseInfoReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBaseInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBaseInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBaseInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llInterest */
    {
        ret = destBuf.writeInt64(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBaseInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBaseInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBaseInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llInterest */
    {
        ret = destBuf.writeInt64_l(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBaseInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBaseInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBaseInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llInterest */
    {
        ret = srcBuf.readInt64(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBaseInfoReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBaseInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBaseInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llInterest */
    {
        ret = srcBuf.readInt64_l(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->chGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chGender]", "0x%02x", this->chGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llBirthday */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llBirthday]", TDR_CPP_INT64_FORMAT, this->llBirthday);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPortrait */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPortrait]", TDR_CPP_INT64_FORMAT, this->llPortrait);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llInterest */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llInterest]", TDR_CPP_INT64_FORMAT, this->llInterest);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickName */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickName]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickName_i = 0; szNickName_i < this->iNickNameLen; szNickName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickName[szNickName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateBaseInfoReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateBaseInfoReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateBaseInfoResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBaseInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBaseInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBaseInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBaseInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBaseInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBaseInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBaseInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBaseInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBaseInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBaseInfoResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBaseInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBaseInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBaseInfoResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateBaseInfoResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateBaseInfoResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientPhoneQueryUserIdReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPhoneQueryUserIdReq::CURRVERSION < cutVer)
    {
        cutVer = ClientPhoneQueryUserIdReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPhoneQueryUserIdReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iPhoneCodeLen */
    {
        ret = destBuf.writeInt32(this->iPhoneCodeLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPhoneCode */
    {
        if (0 > this->iPhoneCodeLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (PHONE_CODE_MAX_LEN < this->iPhoneCodeLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPhoneCode, this->iPhoneCodeLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPhoneQueryUserIdReq::CURRVERSION < cutVer)
    {
        cutVer = ClientPhoneQueryUserIdReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPhoneQueryUserIdReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iPhoneCodeLen */
    {
        ret = destBuf.writeInt32_l(this->iPhoneCodeLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPhoneCode */
    {
        if (0 > this->iPhoneCodeLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (PHONE_CODE_MAX_LEN < this->iPhoneCodeLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPhoneCode, this->iPhoneCodeLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPhoneQueryUserIdReq::CURRVERSION < cutVer)
    {
        cutVer = ClientPhoneQueryUserIdReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPhoneQueryUserIdReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iPhoneCodeLen */
    {
        ret = srcBuf.readInt32(this->iPhoneCodeLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPhoneCode */
    {
        if (0 > this->iPhoneCodeLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (PHONE_CODE_MAX_LEN < this->iPhoneCodeLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPhoneCode, this->iPhoneCodeLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPhoneQueryUserIdReq::CURRVERSION < cutVer)
    {
        cutVer = ClientPhoneQueryUserIdReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPhoneQueryUserIdReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iPhoneCodeLen */
    {
        ret = srcBuf.readInt32_l(this->iPhoneCodeLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPhoneCode */
    {
        if (0 > this->iPhoneCodeLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (PHONE_CODE_MAX_LEN < this->iPhoneCodeLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPhoneCode, this->iPhoneCodeLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iPhoneCodeLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPhoneCodeLen]", "%d", this->iPhoneCodeLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szPhoneCode */
    if (0 > this->iPhoneCodeLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (PHONE_CODE_MAX_LEN < this->iPhoneCodeLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szPhoneCode]", this->iPhoneCodeLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szPhoneCode_i = 0; szPhoneCode_i < this->iPhoneCodeLen; szPhoneCode_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szPhoneCode[szPhoneCode_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientPhoneQueryUserIdReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientPhoneQueryUserIdReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientPhoneQueryUserIdResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPhoneQueryUserIdResp::CURRVERSION < cutVer)
    {
        cutVer = ClientPhoneQueryUserIdResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPhoneQueryUserIdResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPhoneQueryUserIdResp::CURRVERSION < cutVer)
    {
        cutVer = ClientPhoneQueryUserIdResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPhoneQueryUserIdResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPhoneQueryUserIdResp::CURRVERSION < cutVer)
    {
        cutVer = ClientPhoneQueryUserIdResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPhoneQueryUserIdResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPhoneQueryUserIdResp::CURRVERSION < cutVer)
    {
        cutVer = ClientPhoneQueryUserIdResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPhoneQueryUserIdResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPhoneQueryUserIdResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientPhoneQueryUserIdResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientPhoneQueryUserIdResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientChatLogonReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientChatLogonReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatLogonReq::CURRVERSION < cutVer)
    {
        cutVer = ClientChatLogonReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatLogonReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iData */
    {
        ret = destBuf.writeInt32(this->iData);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatLogonReq::CURRVERSION < cutVer)
    {
        cutVer = ClientChatLogonReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatLogonReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iData */
    {
        ret = destBuf.writeInt32_l(this->iData);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatLogonReq::CURRVERSION < cutVer)
    {
        cutVer = ClientChatLogonReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatLogonReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iData */
    {
        ret = srcBuf.readInt32(this->iData);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatLogonReq::CURRVERSION < cutVer)
    {
        cutVer = ClientChatLogonReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatLogonReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iData */
    {
        ret = srcBuf.readInt32_l(this->iData);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iData */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iData]", "%d", this->iData);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientChatLogonReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientChatLogonReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientChatLogonResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientChatLogonResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatLogonResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatLogonResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatLogonResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatLogonResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatLogonResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatLogonResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatLogonResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatLogonResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatLogonResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatLogonResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatLogonResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatLogonResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatLogonResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientChatLogonResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientChatLogonResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientAddFriendReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientAddFriendReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddFriendReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAddFriendReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddFriendReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llFriendUid */
    {
        ret = destBuf.writeInt64(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddFriendReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAddFriendReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddFriendReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llFriendUid */
    {
        ret = destBuf.writeInt64_l(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddFriendReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAddFriendReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddFriendReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llFriendUid */
    {
        ret = srcBuf.readInt64(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddFriendReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAddFriendReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddFriendReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llFriendUid */
    {
        ret = srcBuf.readInt64_l(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llFriendUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llFriendUid]", TDR_CPP_INT64_FORMAT, this->llFriendUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientAddFriendReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientAddFriendReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientAddFriendResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientAddFriendResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddFriendResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAddFriendResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddFriendResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddFriendResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAddFriendResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddFriendResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddFriendResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAddFriendResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddFriendResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAddFriendResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAddFriendResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAddFriendResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAddFriendResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientAddFriendResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientAddFriendResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientDeleteFriendReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientDeleteFriendReq::CURRVERSION < cutVer)
    {
        cutVer = ClientDeleteFriendReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientDeleteFriendReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llFriendUid */
    {
        ret = destBuf.writeInt64(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientDeleteFriendReq::CURRVERSION < cutVer)
    {
        cutVer = ClientDeleteFriendReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientDeleteFriendReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llFriendUid */
    {
        ret = destBuf.writeInt64_l(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientDeleteFriendReq::CURRVERSION < cutVer)
    {
        cutVer = ClientDeleteFriendReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientDeleteFriendReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llFriendUid */
    {
        ret = srcBuf.readInt64(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientDeleteFriendReq::CURRVERSION < cutVer)
    {
        cutVer = ClientDeleteFriendReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientDeleteFriendReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llFriendUid */
    {
        ret = srcBuf.readInt64_l(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llFriendUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llFriendUid]", TDR_CPP_INT64_FORMAT, this->llFriendUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientDeleteFriendReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientDeleteFriendReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientDeleteFriendResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientDeleteFriendResp::CURRVERSION < cutVer)
    {
        cutVer = ClientDeleteFriendResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientDeleteFriendResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientDeleteFriendResp::CURRVERSION < cutVer)
    {
        cutVer = ClientDeleteFriendResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientDeleteFriendResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientDeleteFriendResp::CURRVERSION < cutVer)
    {
        cutVer = ClientDeleteFriendResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientDeleteFriendResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientDeleteFriendResp::CURRVERSION < cutVer)
    {
        cutVer = ClientDeleteFriendResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientDeleteFriendResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientDeleteFriendResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientDeleteFriendResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientDeleteFriendResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientJoinGroupReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientJoinGroupReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientJoinGroupReq::CURRVERSION < cutVer)
    {
        cutVer = ClientJoinGroupReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientJoinGroupReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llGroupId */
    {
        ret = destBuf.writeInt64(this->llGroupId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llGroupOwnerId */
    {
        ret = destBuf.writeInt64(this->llGroupOwnerId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->nGroupNameCount */
    {
        ret = destBuf.writeInt16(this->nGroupNameCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szGroupName */
    {
        if (0 > this->nGroupNameCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_GROUP_NAME_MAX_LEN < this->nGroupNameCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szGroupName, this->nGroupNameCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->nMemberUidCount */
    {
        ret = destBuf.writeInt16(this->nMemberUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->memberUid */
    {
        if (0 > this->nMemberUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_IN_GROUP_MAX_MEMBER < this->nMemberUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int16_t memberUid_i = 0; memberUid_i < this->nMemberUidCount; memberUid_i++)
        {
            ret = destBuf.writeInt64(this->memberUid[memberUid_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientJoinGroupReq::CURRVERSION < cutVer)
    {
        cutVer = ClientJoinGroupReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientJoinGroupReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llGroupId */
    {
        ret = destBuf.writeInt64_l(this->llGroupId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llGroupOwnerId */
    {
        ret = destBuf.writeInt64_l(this->llGroupOwnerId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->nGroupNameCount */
    {
        ret = destBuf.writeInt16_l(this->nGroupNameCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szGroupName */
    {
        if (0 > this->nGroupNameCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_GROUP_NAME_MAX_LEN < this->nGroupNameCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szGroupName, this->nGroupNameCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->nMemberUidCount */
    {
        ret = destBuf.writeInt16_l(this->nMemberUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->memberUid */
    {
        if (0 > this->nMemberUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_IN_GROUP_MAX_MEMBER < this->nMemberUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int16_t memberUid_i = 0; memberUid_i < this->nMemberUidCount; memberUid_i++)
        {
            ret = destBuf.writeInt64_l(this->memberUid[memberUid_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientJoinGroupReq::CURRVERSION < cutVer)
    {
        cutVer = ClientJoinGroupReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientJoinGroupReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llGroupId */
    {
        ret = srcBuf.readInt64(this->llGroupId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llGroupOwnerId */
    {
        ret = srcBuf.readInt64(this->llGroupOwnerId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->nGroupNameCount */
    {
        ret = srcBuf.readInt16(this->nGroupNameCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szGroupName */
    {
        if (0 > this->nGroupNameCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_GROUP_NAME_MAX_LEN < this->nGroupNameCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szGroupName, this->nGroupNameCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->nMemberUidCount */
    {
        ret = srcBuf.readInt16(this->nMemberUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->memberUid */
    {
        if (0 > this->nMemberUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_IN_GROUP_MAX_MEMBER < this->nMemberUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int16_t memberUid_i = 0; memberUid_i < this->nMemberUidCount; memberUid_i++)
        {
            ret = srcBuf.readInt64(this->memberUid[memberUid_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientJoinGroupReq::CURRVERSION < cutVer)
    {
        cutVer = ClientJoinGroupReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientJoinGroupReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llGroupId */
    {
        ret = srcBuf.readInt64_l(this->llGroupId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llGroupOwnerId */
    {
        ret = srcBuf.readInt64_l(this->llGroupOwnerId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->nGroupNameCount */
    {
        ret = srcBuf.readInt16_l(this->nGroupNameCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szGroupName */
    {
        if (0 > this->nGroupNameCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_GROUP_NAME_MAX_LEN < this->nGroupNameCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szGroupName, this->nGroupNameCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->nMemberUidCount */
    {
        ret = srcBuf.readInt16_l(this->nMemberUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->memberUid */
    {
        if (0 > this->nMemberUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_IN_GROUP_MAX_MEMBER < this->nMemberUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int16_t memberUid_i = 0; memberUid_i < this->nMemberUidCount; memberUid_i++)
        {
            ret = srcBuf.readInt64_l(this->memberUid[memberUid_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llGroupId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llGroupId]", TDR_CPP_INT64_FORMAT, this->llGroupId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llGroupOwnerId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llGroupOwnerId]", TDR_CPP_INT64_FORMAT, this->llGroupOwnerId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->nGroupNameCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[nGroupNameCount]", "%d", this->nGroupNameCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szGroupName */
    if (0 > this->nGroupNameCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_GROUP_NAME_MAX_LEN < this->nGroupNameCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szGroupName]", this->nGroupNameCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int16_t szGroupName_i = 0; szGroupName_i < this->nGroupNameCount; szGroupName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szGroupName[szGroupName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->nMemberUidCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[nMemberUidCount]", "%d", this->nMemberUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->memberUid */
    if (0 > this->nMemberUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_IN_GROUP_MAX_MEMBER < this->nMemberUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[memberUid]", this->nMemberUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int16_t memberUid_i = 0; memberUid_i < this->nMemberUidCount; memberUid_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->memberUid[memberUid_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientJoinGroupReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientJoinGroupReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientJoinGroupResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientJoinGroupResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientJoinGroupResp::CURRVERSION < cutVer)
    {
        cutVer = ClientJoinGroupResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientJoinGroupResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientJoinGroupResp::CURRVERSION < cutVer)
    {
        cutVer = ClientJoinGroupResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientJoinGroupResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientJoinGroupResp::CURRVERSION < cutVer)
    {
        cutVer = ClientJoinGroupResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientJoinGroupResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientJoinGroupResp::CURRVERSION < cutVer)
    {
        cutVer = ClientJoinGroupResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientJoinGroupResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientJoinGroupResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientJoinGroupResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientJoinGroupResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientSecedeGroupReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientSecedeGroupReq::CURRVERSION < cutVer)
    {
        cutVer = ClientSecedeGroupReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientSecedeGroupReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llMemberUid */
    {
        ret = destBuf.writeInt64(this->llMemberUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llGroupId */
    {
        ret = destBuf.writeInt64(this->llGroupId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientSecedeGroupReq::CURRVERSION < cutVer)
    {
        cutVer = ClientSecedeGroupReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientSecedeGroupReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llMemberUid */
    {
        ret = destBuf.writeInt64_l(this->llMemberUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llGroupId */
    {
        ret = destBuf.writeInt64_l(this->llGroupId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientSecedeGroupReq::CURRVERSION < cutVer)
    {
        cutVer = ClientSecedeGroupReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientSecedeGroupReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llMemberUid */
    {
        ret = srcBuf.readInt64(this->llMemberUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llGroupId */
    {
        ret = srcBuf.readInt64(this->llGroupId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientSecedeGroupReq::CURRVERSION < cutVer)
    {
        cutVer = ClientSecedeGroupReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientSecedeGroupReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llMemberUid */
    {
        ret = srcBuf.readInt64_l(this->llMemberUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llGroupId */
    {
        ret = srcBuf.readInt64_l(this->llGroupId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llMemberUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llMemberUid]", TDR_CPP_INT64_FORMAT, this->llMemberUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llGroupId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llGroupId]", TDR_CPP_INT64_FORMAT, this->llGroupId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientSecedeGroupReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientSecedeGroupReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientSecedeGroupResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientSecedeGroupResp::CURRVERSION < cutVer)
    {
        cutVer = ClientSecedeGroupResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientSecedeGroupResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientSecedeGroupResp::CURRVERSION < cutVer)
    {
        cutVer = ClientSecedeGroupResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientSecedeGroupResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientSecedeGroupResp::CURRVERSION < cutVer)
    {
        cutVer = ClientSecedeGroupResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientSecedeGroupResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientSecedeGroupResp::CURRVERSION < cutVer)
    {
        cutVer = ClientSecedeGroupResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientSecedeGroupResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientSecedeGroupResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientSecedeGroupResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientSecedeGroupResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientChatSendMsgReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatSendMsgReq::CURRVERSION < cutVer)
    {
        cutVer = ClientChatSendMsgReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatSendMsgReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llReceiverID */
    {
        ret = destBuf.writeInt64(this->llReceiverID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMsgLen */
    {
        ret = destBuf.writeInt32(this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szMessage */
    {
        if (0 > this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_CHAT_MSG_MAX_LEN < this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szMessage, this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatSendMsgReq::CURRVERSION < cutVer)
    {
        cutVer = ClientChatSendMsgReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatSendMsgReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llReceiverID */
    {
        ret = destBuf.writeInt64_l(this->llReceiverID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMsgLen */
    {
        ret = destBuf.writeInt32_l(this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szMessage */
    {
        if (0 > this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_CHAT_MSG_MAX_LEN < this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szMessage, this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatSendMsgReq::CURRVERSION < cutVer)
    {
        cutVer = ClientChatSendMsgReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatSendMsgReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llReceiverID */
    {
        ret = srcBuf.readInt64(this->llReceiverID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMsgLen */
    {
        ret = srcBuf.readInt32(this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szMessage */
    {
        if (0 > this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_CHAT_MSG_MAX_LEN < this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szMessage, this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatSendMsgReq::CURRVERSION < cutVer)
    {
        cutVer = ClientChatSendMsgReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatSendMsgReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llReceiverID */
    {
        ret = srcBuf.readInt64_l(this->llReceiverID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMsgLen */
    {
        ret = srcBuf.readInt32_l(this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szMessage */
    {
        if (0 > this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_CHAT_MSG_MAX_LEN < this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szMessage, this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llReceiverID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llReceiverID]", TDR_CPP_INT64_FORMAT, this->llReceiverID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMsgLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMsgLen]", "%d", this->iMsgLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szMessage */
    if (0 > this->iMsgLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_CHAT_MSG_MAX_LEN < this->iMsgLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szMessage]", this->iMsgLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szMessage_i = 0; szMessage_i < this->iMsgLen; szMessage_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szMessage[szMessage_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientChatSendMsgReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientChatSendMsgReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientChatSendMsgResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatSendMsgResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatSendMsgResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatSendMsgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatSendMsgResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatSendMsgResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatSendMsgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatSendMsgResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatSendMsgResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatSendMsgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatSendMsgResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatSendMsgResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatSendMsgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatSendMsgResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientChatSendMsgResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientChatSendMsgResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientChatsvrForwardMsg::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsg::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsg::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsg::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatsvrForwardMsg::CURRVERSION < cutVer)
    {
        cutVer = ClientChatsvrForwardMsg::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatsvrForwardMsg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llSenderID */
    {
        ret = destBuf.writeInt64(this->llSenderID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMsgLen */
    {
        ret = destBuf.writeInt32(this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szMessage */
    {
        if (0 > this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_CHAT_MSG_MAX_LEN < this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szMessage, this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsg::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatsvrForwardMsg::CURRVERSION < cutVer)
    {
        cutVer = ClientChatsvrForwardMsg::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatsvrForwardMsg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llSenderID */
    {
        ret = destBuf.writeInt64_l(this->llSenderID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMsgLen */
    {
        ret = destBuf.writeInt32_l(this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szMessage */
    {
        if (0 > this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_CHAT_MSG_MAX_LEN < this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szMessage, this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsg::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsg::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsg::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatsvrForwardMsg::CURRVERSION < cutVer)
    {
        cutVer = ClientChatsvrForwardMsg::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatsvrForwardMsg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llSenderID */
    {
        ret = srcBuf.readInt64(this->llSenderID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMsgLen */
    {
        ret = srcBuf.readInt32(this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szMessage */
    {
        if (0 > this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_CHAT_MSG_MAX_LEN < this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szMessage, this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsg::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatsvrForwardMsg::CURRVERSION < cutVer)
    {
        cutVer = ClientChatsvrForwardMsg::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatsvrForwardMsg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llSenderID */
    {
        ret = srcBuf.readInt64_l(this->llSenderID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMsgLen */
    {
        ret = srcBuf.readInt32_l(this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szMessage */
    {
        if (0 > this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_CHAT_MSG_MAX_LEN < this->iMsgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szMessage, this->iMsgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsg::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsg::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llSenderID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llSenderID]", TDR_CPP_INT64_FORMAT, this->llSenderID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMsgLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMsgLen]", "%d", this->iMsgLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szMessage */
    if (0 > this->iMsgLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_CHAT_MSG_MAX_LEN < this->iMsgLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szMessage]", this->iMsgLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szMessage_i = 0; szMessage_i < this->iMsgLen; szMessage_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szMessage[szMessage_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientChatsvrForwardMsg::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientChatsvrForwardMsg::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientChatsvrForwardMsgResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsgResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsgResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsgResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatsvrForwardMsgResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatsvrForwardMsgResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatsvrForwardMsgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsgResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatsvrForwardMsgResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatsvrForwardMsgResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatsvrForwardMsgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsgResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsgResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsgResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatsvrForwardMsgResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatsvrForwardMsgResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatsvrForwardMsgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsgResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientChatsvrForwardMsgResp::CURRVERSION < cutVer)
    {
        cutVer = ClientChatsvrForwardMsgResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientChatsvrForwardMsgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsgResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientChatsvrForwardMsgResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientChatsvrForwardMsgResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientChatsvrForwardMsgResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
GISInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
GISInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GISInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GISInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GISInfo::CURRVERSION < cutVer)
    {
        cutVer = GISInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GISInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDimension */
    {
        ret = destBuf.writeInt64(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GISInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GISInfo::CURRVERSION < cutVer)
    {
        cutVer = GISInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GISInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDimension */
    {
        ret = destBuf.writeInt64_l(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GISInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GISInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GISInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GISInfo::CURRVERSION < cutVer)
    {
        cutVer = GISInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GISInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDimension */
    {
        ret = srcBuf.readInt64(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GISInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GISInfo::CURRVERSION < cutVer)
    {
        cutVer = GISInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GISInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDimension */
    {
        ret = srcBuf.readInt64_l(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GISInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GISInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llLongitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLongitude]", TDR_CPP_INT64_FORMAT, this->llLongitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llDimension */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llDimension]", TDR_CPP_INT64_FORMAT, this->llDimension);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
GISInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
GISInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AudioInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AudioInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AudioInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AudioInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AudioInfo::CURRVERSION < cutVer)
    {
        cutVer = AudioInfo::CURRVERSION;
    }

    /* check cutversion */
    if (AudioInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llAudioId */
    {
        ret = destBuf.writeInt64(this->llAudioId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSeconds */
    {
        ret = destBuf.writeInt32(this->iSeconds);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AudioInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AudioInfo::CURRVERSION < cutVer)
    {
        cutVer = AudioInfo::CURRVERSION;
    }

    /* check cutversion */
    if (AudioInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llAudioId */
    {
        ret = destBuf.writeInt64_l(this->llAudioId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSeconds */
    {
        ret = destBuf.writeInt32_l(this->iSeconds);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AudioInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AudioInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AudioInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AudioInfo::CURRVERSION < cutVer)
    {
        cutVer = AudioInfo::CURRVERSION;
    }

    /* check cutversion */
    if (AudioInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llAudioId */
    {
        ret = srcBuf.readInt64(this->llAudioId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSeconds */
    {
        ret = srcBuf.readInt32(this->iSeconds);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AudioInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AudioInfo::CURRVERSION < cutVer)
    {
        cutVer = AudioInfo::CURRVERSION;
    }

    /* check cutversion */
    if (AudioInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llAudioId */
    {
        ret = srcBuf.readInt64_l(this->llAudioId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSeconds */
    {
        ret = srcBuf.readInt32_l(this->iSeconds);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AudioInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AudioInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llAudioId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llAudioId]", TDR_CPP_INT64_FORMAT, this->llAudioId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSeconds */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSeconds]", "%d", this->iSeconds);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AudioInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AudioInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCreateOrder::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCreateOrder::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCreateOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iType */
    {
        ret = destBuf.writeInt32(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwPosInfoLen */
    {
        ret = destBuf.writeUInt32(this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPosInfo */
    {
        if (TRADE_POSINFO_LEN < this->dwPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPosInfo, this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyType */
    {
        ret = destBuf.writeInt32(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyNum */
    {
        ret = destBuf.writeInt32(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stGISInfo */
    {
        ret = this->stGISInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwParticularsLen */
    {
        ret = destBuf.writeUInt32(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (TRADE_PARTICULARS_LEN < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPictureNum */
    {
        ret = destBuf.writeInt32(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = destBuf.writeInt64(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iAudioNum */
    {
        ret = destBuf.writeInt32(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iVersionType */
    if (ClientRequestAccessTradeCreateOrder::VERSION_iVersionType <= cutVer)
    {
        ret = destBuf.writeInt32(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCreateOrder::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCreateOrder::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCreateOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iType */
    {
        ret = destBuf.writeInt32_l(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwPosInfoLen */
    {
        ret = destBuf.writeUInt32_l(this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPosInfo */
    {
        if (TRADE_POSINFO_LEN < this->dwPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPosInfo, this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyType */
    {
        ret = destBuf.writeInt32_l(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyNum */
    {
        ret = destBuf.writeInt32_l(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stGISInfo */
    {
        ret = this->stGISInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwParticularsLen */
    {
        ret = destBuf.writeUInt32_l(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (TRADE_PARTICULARS_LEN < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPictureNum */
    {
        ret = destBuf.writeInt32_l(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = destBuf.writeInt64_l(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iAudioNum */
    {
        ret = destBuf.writeInt32_l(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iVersionType */
    if (ClientRequestAccessTradeCreateOrder::VERSION_iVersionType <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCreateOrder::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCreateOrder::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCreateOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iType */
    {
        ret = srcBuf.readInt32(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwPosInfoLen */
    {
        ret = srcBuf.readUInt32(this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPosInfo */
    {
        if (TRADE_POSINFO_LEN < this->dwPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPosInfo, this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyType */
    {
        ret = srcBuf.readInt32(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyNum */
    {
        ret = srcBuf.readInt32(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stGISInfo */
    {
        ret = this->stGISInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwParticularsLen */
    {
        ret = srcBuf.readUInt32(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (TRADE_PARTICULARS_LEN < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPictureNum */
    {
        ret = srcBuf.readInt32(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = srcBuf.readInt64(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iAudioNum */
    {
        ret = srcBuf.readInt32(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iVersionType */
    if (ClientRequestAccessTradeCreateOrder::VERSION_iVersionType <= cutVer)
    {
        ret = srcBuf.readInt32(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iVersionType = 0;
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCreateOrder::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCreateOrder::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCreateOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iType */
    {
        ret = srcBuf.readInt32_l(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwPosInfoLen */
    {
        ret = srcBuf.readUInt32_l(this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPosInfo */
    {
        if (TRADE_POSINFO_LEN < this->dwPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPosInfo, this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyType */
    {
        ret = srcBuf.readInt32_l(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyNum */
    {
        ret = srcBuf.readInt32_l(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stGISInfo */
    {
        ret = this->stGISInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwParticularsLen */
    {
        ret = srcBuf.readUInt32_l(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (TRADE_PARTICULARS_LEN < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPictureNum */
    {
        ret = srcBuf.readInt32_l(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = srcBuf.readInt64_l(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iAudioNum */
    {
        ret = srcBuf.readInt32_l(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iVersionType */
    if (ClientRequestAccessTradeCreateOrder::VERSION_iVersionType <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iVersionType = 0;
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateOrder::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iType]", "%d", this->iType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwPosInfoLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwPosInfoLen]", "%u", this->dwPosInfoLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szPosInfo */
    if (TRADE_POSINFO_LEN < this->dwPosInfoLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szPosInfo]", this->dwPosInfoLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (uint32_t szPosInfo_i = 0; szPosInfo_i < this->dwPosInfoLen; szPosInfo_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szPosInfo[szPosInfo_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoneyType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoneyType]", "%d", this->iMoneyType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoneyNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoneyNum]", "%d", this->iMoneyNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGender]", "%d", this->iGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stGISInfo */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stGISInfo]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stGISInfo */
    if (0 > indent)
    {
        ret = this->stGISInfo.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stGISInfo.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwParticularsLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwParticularsLen]", "%u", this->dwParticularsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szParticulars */
    if (TRADE_PARTICULARS_LEN < this->dwParticularsLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szParticulars]", this->dwParticularsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (uint32_t szParticulars_i = 0; szParticulars_i < this->dwParticularsLen; szParticulars_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szParticulars[szParticulars_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPictureNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPictureNum]", "%d", this->iPictureNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->pictureidList */
    if (0 > this->iPictureNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[pictureidList]", this->iPictureNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->pictureidList[pictureidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAudioNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAudioNum]", "%d", this->iAudioNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astAudioInfo */
    if (0 > this->iAudioNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astAudioInfo]", astAudioInfo_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astAudioInfo[astAudioInfo_i] */
        if (0 > indent)
        {
            ret = this->astAudioInfo[astAudioInfo_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astAudioInfo[astAudioInfo_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* visualize member: this->iVersionType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVersionType]", "%d", this->iVersionType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeCreateOrder::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeCreateOrder::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientCreateOrder::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateOrder::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateOrder::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateOrder::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCreateOrder::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCreateOrder::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCreateOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateOrder::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCreateOrder::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCreateOrder::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCreateOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateOrder::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateOrder::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateOrder::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCreateOrder::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCreateOrder::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCreateOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateOrder::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCreateOrder::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCreateOrder::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCreateOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateOrder::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateOrder::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientCreateOrder::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientCreateOrder::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
OrderBasicInfoToClient::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
OrderBasicInfoToClient::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderBasicInfoToClient::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderBasicInfoToClient::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderBasicInfoToClient::CURRVERSION < cutVer)
    {
        cutVer = OrderBasicInfoToClient::CURRVERSION;
    }

    /* check cutversion */
    if (OrderBasicInfoToClient::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreaterUid */
    {
        ret = destBuf.writeInt64(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bStatus */
    {
        ret = destBuf.writeUInt8(this->bStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iType */
    {
        ret = destBuf.writeInt32(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPayType */
    {
        ret = destBuf.writeInt32(this->iPayType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreater_degree */
    {
        ret = destBuf.writeInt32(this->iCreater_degree);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDone_time */
    {
        ret = destBuf.writeInt32(this->iDone_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iArgue_time */
    {
        ret = destBuf.writeInt32(this->iArgue_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwTopicLen */
    {
        ret = destBuf.writeUInt32(this->dwTopicLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szTopic */
    {
        if (TRADE_TOPIC_LEN < this->dwTopicLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szTopic, this->dwTopicLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwOverTime */
    {
        ret = destBuf.writeUInt32(this->dwOverTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwPosID */
    {
        ret = destBuf.writeUInt32(this->dwPosID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwPosInfoLen */
    {
        ret = destBuf.writeUInt32(this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPosInfo */
    {
        if (TRADE_POSINFO_LEN < this->dwPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPosInfo, this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwTryMoney */
    {
        ret = destBuf.writeUInt32(this->dwTryMoney);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwGratuity */
    {
        ret = destBuf.writeUInt32(this->dwGratuity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwOfficialNum */
    {
        ret = destBuf.writeUInt32(this->dwOfficialNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyStata */
    {
        ret = destBuf.writeInt32(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwDiscussNum */
    {
        ret = destBuf.writeUInt32(this->dwDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stGISInfo */
    {
        ret = this->stGISInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderBasicInfoToClient::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderBasicInfoToClient::CURRVERSION < cutVer)
    {
        cutVer = OrderBasicInfoToClient::CURRVERSION;
    }

    /* check cutversion */
    if (OrderBasicInfoToClient::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreaterUid */
    {
        ret = destBuf.writeInt64_l(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bStatus */
    {
        ret = destBuf.writeUInt8(this->bStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iType */
    {
        ret = destBuf.writeInt32_l(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPayType */
    {
        ret = destBuf.writeInt32_l(this->iPayType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreater_degree */
    {
        ret = destBuf.writeInt32_l(this->iCreater_degree);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDone_time */
    {
        ret = destBuf.writeInt32_l(this->iDone_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iArgue_time */
    {
        ret = destBuf.writeInt32_l(this->iArgue_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwTopicLen */
    {
        ret = destBuf.writeUInt32_l(this->dwTopicLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szTopic */
    {
        if (TRADE_TOPIC_LEN < this->dwTopicLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szTopic, this->dwTopicLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwOverTime */
    {
        ret = destBuf.writeUInt32_l(this->dwOverTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwPosID */
    {
        ret = destBuf.writeUInt32_l(this->dwPosID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwPosInfoLen */
    {
        ret = destBuf.writeUInt32_l(this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPosInfo */
    {
        if (TRADE_POSINFO_LEN < this->dwPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPosInfo, this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwTryMoney */
    {
        ret = destBuf.writeUInt32_l(this->dwTryMoney);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwGratuity */
    {
        ret = destBuf.writeUInt32_l(this->dwGratuity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwOfficialNum */
    {
        ret = destBuf.writeUInt32_l(this->dwOfficialNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyStata */
    {
        ret = destBuf.writeInt32_l(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwDiscussNum */
    {
        ret = destBuf.writeUInt32_l(this->dwDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stGISInfo */
    {
        ret = this->stGISInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderBasicInfoToClient::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderBasicInfoToClient::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderBasicInfoToClient::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderBasicInfoToClient::CURRVERSION < cutVer)
    {
        cutVer = OrderBasicInfoToClient::CURRVERSION;
    }

    /* check cutversion */
    if (OrderBasicInfoToClient::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreaterUid */
    {
        ret = srcBuf.readInt64(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bStatus */
    {
        ret = srcBuf.readUInt8(this->bStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iType */
    {
        ret = srcBuf.readInt32(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPayType */
    {
        ret = srcBuf.readInt32(this->iPayType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreater_degree */
    {
        ret = srcBuf.readInt32(this->iCreater_degree);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDone_time */
    {
        ret = srcBuf.readInt32(this->iDone_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iArgue_time */
    {
        ret = srcBuf.readInt32(this->iArgue_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwTopicLen */
    {
        ret = srcBuf.readUInt32(this->dwTopicLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szTopic */
    {
        if (TRADE_TOPIC_LEN < this->dwTopicLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szTopic, this->dwTopicLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwOverTime */
    {
        ret = srcBuf.readUInt32(this->dwOverTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwPosID */
    {
        ret = srcBuf.readUInt32(this->dwPosID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwPosInfoLen */
    {
        ret = srcBuf.readUInt32(this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPosInfo */
    {
        if (TRADE_POSINFO_LEN < this->dwPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPosInfo, this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwTryMoney */
    {
        ret = srcBuf.readUInt32(this->dwTryMoney);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwGratuity */
    {
        ret = srcBuf.readUInt32(this->dwGratuity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwOfficialNum */
    {
        ret = srcBuf.readUInt32(this->dwOfficialNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyStata */
    {
        ret = srcBuf.readInt32(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwDiscussNum */
    {
        ret = srcBuf.readUInt32(this->dwDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stGISInfo */
    {
        ret = this->stGISInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderBasicInfoToClient::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderBasicInfoToClient::CURRVERSION < cutVer)
    {
        cutVer = OrderBasicInfoToClient::CURRVERSION;
    }

    /* check cutversion */
    if (OrderBasicInfoToClient::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreaterUid */
    {
        ret = srcBuf.readInt64_l(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bStatus */
    {
        ret = srcBuf.readUInt8(this->bStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iType */
    {
        ret = srcBuf.readInt32_l(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPayType */
    {
        ret = srcBuf.readInt32_l(this->iPayType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreater_degree */
    {
        ret = srcBuf.readInt32_l(this->iCreater_degree);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDone_time */
    {
        ret = srcBuf.readInt32_l(this->iDone_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iArgue_time */
    {
        ret = srcBuf.readInt32_l(this->iArgue_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwTopicLen */
    {
        ret = srcBuf.readUInt32_l(this->dwTopicLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szTopic */
    {
        if (TRADE_TOPIC_LEN < this->dwTopicLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szTopic, this->dwTopicLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwOverTime */
    {
        ret = srcBuf.readUInt32_l(this->dwOverTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwPosID */
    {
        ret = srcBuf.readUInt32_l(this->dwPosID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwPosInfoLen */
    {
        ret = srcBuf.readUInt32_l(this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPosInfo */
    {
        if (TRADE_POSINFO_LEN < this->dwPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPosInfo, this->dwPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwTryMoney */
    {
        ret = srcBuf.readUInt32_l(this->dwTryMoney);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwGratuity */
    {
        ret = srcBuf.readUInt32_l(this->dwGratuity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwOfficialNum */
    {
        ret = srcBuf.readUInt32_l(this->dwOfficialNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyStata */
    {
        ret = srcBuf.readInt32_l(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwDiscussNum */
    {
        ret = srcBuf.readUInt32_l(this->dwDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stGISInfo */
    {
        ret = this->stGISInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderBasicInfoToClient::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderBasicInfoToClient::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCreaterUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCreaterUid]", TDR_CPP_INT64_FORMAT, this->llCreaterUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bStatus]", "0x%02x", this->bStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iType]", "%d", this->iType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPayType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPayType]", "%d", this->iPayType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreater_degree */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreater_degree]", "%d", this->iCreater_degree);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDone_time */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDone_time]", "%d", this->iDone_time);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iArgue_time */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iArgue_time]", "%d", this->iArgue_time);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwTopicLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwTopicLen]", "%u", this->dwTopicLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szTopic */
    if (TRADE_TOPIC_LEN < this->dwTopicLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szTopic]", this->dwTopicLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (uint32_t szTopic_i = 0; szTopic_i < this->dwTopicLen; szTopic_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szTopic[szTopic_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwOverTime */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwOverTime]", "%u", this->dwOverTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwPosID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwPosID]", "%u", this->dwPosID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwPosInfoLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwPosInfoLen]", "%u", this->dwPosInfoLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szPosInfo */
    if (TRADE_POSINFO_LEN < this->dwPosInfoLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szPosInfo]", this->dwPosInfoLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (uint32_t szPosInfo_i = 0; szPosInfo_i < this->dwPosInfoLen; szPosInfo_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szPosInfo[szPosInfo_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwTryMoney */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwTryMoney]", "%u", this->dwTryMoney);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwGratuity */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwGratuity]", "%u", this->dwGratuity);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwOfficialNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwOfficialNum]", "%u", this->dwOfficialNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApplyStata */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApplyStata]", "%d", this->iApplyStata);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwDiscussNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwDiscussNum]", "%u", this->dwDiscussNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stGISInfo */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stGISInfo]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stGISInfo */
    if (0 > indent)
    {
        ret = this->stGISInfo.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stGISInfo.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
OrderBasicInfoToClient::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
OrderBasicInfoToClient::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderBasicInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderBasicInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderBasicInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->bSelectType */
    {
        ret = destBuf.writeUInt8(this->bSelectType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bPag */
    {
        ret = destBuf.writeUInt8(this->bPag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bSex */
    {
        ret = destBuf.writeUInt8(this->bSex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bAgeUp */
    {
        ret = destBuf.writeUInt8(this->bAgeUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bAgeDown */
    {
        ret = destBuf.writeUInt8(this->bAgeDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAreaID */
    {
        ret = destBuf.writeInt32(this->iAreaID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stGISInfo */
    {
        ret = this->stGISInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bOrderNum */
    {
        ret = destBuf.writeUInt8(this->bOrderNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwOrderType */
    {
        ret = destBuf.writeUInt32(this->dwOrderType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPreSearchIndex */
    {
        ret = destBuf.writeInt64(this->llPreSearchIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderBasicInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderBasicInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderBasicInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->bSelectType */
    {
        ret = destBuf.writeUInt8(this->bSelectType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bPag */
    {
        ret = destBuf.writeUInt8(this->bPag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bSex */
    {
        ret = destBuf.writeUInt8(this->bSex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bAgeUp */
    {
        ret = destBuf.writeUInt8(this->bAgeUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bAgeDown */
    {
        ret = destBuf.writeUInt8(this->bAgeDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAreaID */
    {
        ret = destBuf.writeInt32_l(this->iAreaID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stGISInfo */
    {
        ret = this->stGISInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bOrderNum */
    {
        ret = destBuf.writeUInt8(this->bOrderNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwOrderType */
    {
        ret = destBuf.writeUInt32_l(this->dwOrderType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPreSearchIndex */
    {
        ret = destBuf.writeInt64_l(this->llPreSearchIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderBasicInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderBasicInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderBasicInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->bSelectType */
    {
        ret = srcBuf.readUInt8(this->bSelectType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bPag */
    {
        ret = srcBuf.readUInt8(this->bPag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bSex */
    {
        ret = srcBuf.readUInt8(this->bSex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bAgeUp */
    {
        ret = srcBuf.readUInt8(this->bAgeUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bAgeDown */
    {
        ret = srcBuf.readUInt8(this->bAgeDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAreaID */
    {
        ret = srcBuf.readInt32(this->iAreaID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stGISInfo */
    {
        ret = this->stGISInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bOrderNum */
    {
        ret = srcBuf.readUInt8(this->bOrderNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwOrderType */
    {
        ret = srcBuf.readUInt32(this->dwOrderType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPreSearchIndex */
    {
        ret = srcBuf.readInt64(this->llPreSearchIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderBasicInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderBasicInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderBasicInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->bSelectType */
    {
        ret = srcBuf.readUInt8(this->bSelectType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bPag */
    {
        ret = srcBuf.readUInt8(this->bPag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bSex */
    {
        ret = srcBuf.readUInt8(this->bSex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bAgeUp */
    {
        ret = srcBuf.readUInt8(this->bAgeUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bAgeDown */
    {
        ret = srcBuf.readUInt8(this->bAgeDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAreaID */
    {
        ret = srcBuf.readInt32_l(this->iAreaID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stGISInfo */
    {
        ret = this->stGISInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bOrderNum */
    {
        ret = srcBuf.readUInt8(this->bOrderNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwOrderType */
    {
        ret = srcBuf.readUInt32_l(this->dwOrderType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPreSearchIndex */
    {
        ret = srcBuf.readInt64_l(this->llPreSearchIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderBasicInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->bSelectType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bSelectType]", "0x%02x", this->bSelectType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bPag */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bPag]", "0x%02x", this->bPag);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bSex */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bSex]", "0x%02x", this->bSex);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bAgeUp */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bAgeUp]", "0x%02x", this->bAgeUp);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bAgeDown */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bAgeDown]", "0x%02x", this->bAgeDown);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAreaID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAreaID]", "%d", this->iAreaID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stGISInfo */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stGISInfo]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stGISInfo */
    if (0 > indent)
    {
        ret = this->stGISInfo.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stGISInfo.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bOrderNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bOrderNum]", "0x%02x", this->bOrderNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwOrderType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwOrderType]", "%u", this->dwOrderType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPreSearchIndex */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPreSearchIndex]", TDR_CPP_INT64_FORMAT, this->llPreSearchIndex);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectOrderBasicInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectOrderBasicInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderBasicInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderBasicInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderBasicInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwInfoCount */
    {
        ret = destBuf.writeUInt32(this->dwInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCurSearchIndex */
    {
        ret = destBuf.writeInt64(this->llCurSearchIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astOrderBasicInfoToClientList */
    {
        if (TRADE_INFONUM_OF_PAG < this->dwInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astOrderBasicInfoToClientList_i = 0; astOrderBasicInfoToClientList_i < this->dwInfoCount; astOrderBasicInfoToClientList_i++)
        {
            ret = this->astOrderBasicInfoToClientList[astOrderBasicInfoToClientList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderBasicInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderBasicInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderBasicInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwInfoCount */
    {
        ret = destBuf.writeUInt32_l(this->dwInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCurSearchIndex */
    {
        ret = destBuf.writeInt64_l(this->llCurSearchIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astOrderBasicInfoToClientList */
    {
        if (TRADE_INFONUM_OF_PAG < this->dwInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astOrderBasicInfoToClientList_i = 0; astOrderBasicInfoToClientList_i < this->dwInfoCount; astOrderBasicInfoToClientList_i++)
        {
            ret = this->astOrderBasicInfoToClientList[astOrderBasicInfoToClientList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderBasicInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderBasicInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderBasicInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwInfoCount */
    {
        ret = srcBuf.readUInt32(this->dwInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCurSearchIndex */
    {
        ret = srcBuf.readInt64(this->llCurSearchIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astOrderBasicInfoToClientList */
    {
        if (TRADE_INFONUM_OF_PAG < this->dwInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astOrderBasicInfoToClientList_i = 0; astOrderBasicInfoToClientList_i < this->dwInfoCount; astOrderBasicInfoToClientList_i++)
        {
            ret = this->astOrderBasicInfoToClientList[astOrderBasicInfoToClientList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderBasicInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderBasicInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderBasicInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwInfoCount */
    {
        ret = srcBuf.readUInt32_l(this->dwInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCurSearchIndex */
    {
        ret = srcBuf.readInt64_l(this->llCurSearchIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astOrderBasicInfoToClientList */
    {
        if (TRADE_INFONUM_OF_PAG < this->dwInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astOrderBasicInfoToClientList_i = 0; astOrderBasicInfoToClientList_i < this->dwInfoCount; astOrderBasicInfoToClientList_i++)
        {
            ret = this->astOrderBasicInfoToClientList[astOrderBasicInfoToClientList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderBasicInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwInfoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwInfoCount]", "%u", this->dwInfoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCurSearchIndex */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCurSearchIndex]", TDR_CPP_INT64_FORMAT, this->llCurSearchIndex);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astOrderBasicInfoToClientList */
    if (TRADE_INFONUM_OF_PAG < this->dwInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (uint32_t astOrderBasicInfoToClientList_i = 0; astOrderBasicInfoToClientList_i < this->dwInfoCount; astOrderBasicInfoToClientList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astOrderBasicInfoToClientList]", astOrderBasicInfoToClientList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astOrderBasicInfoToClientList[astOrderBasicInfoToClientList_i] */
        if (0 > indent)
        {
            ret = this->astOrderBasicInfoToClientList[astOrderBasicInfoToClientList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astOrderBasicInfoToClientList[astOrderBasicInfoToClientList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectOrderBasicInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectOrderBasicInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
HomeOrderInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
HomeOrderInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
HomeOrderInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
HomeOrderInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || HomeOrderInfo::CURRVERSION < cutVer)
    {
        cutVer = HomeOrderInfo::CURRVERSION;
    }

    /* check cutversion */
    if (HomeOrderInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iStatus */
    {
        ret = destBuf.writeInt32(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iType */
    if (HomeOrderInfo::VERSION_iType <= cutVer)
    {
        ret = destBuf.writeInt32(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreaterUid */
    {
        ret = destBuf.writeInt64(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreateTime */
    {
        ret = destBuf.writeInt32(this->iCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPosInfoLen */
    {
        ret = destBuf.writeInt32(this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPosInfo */
    {
        if (0 > this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_POSINFO_LEN < this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPosInfo, this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iParticularsLen */
    {
        ret = destBuf.writeInt32(this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (0 > this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PARTICULARS_LEN < this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyType */
    {
        ret = destBuf.writeInt32(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyNum */
    {
        ret = destBuf.writeInt32(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyStata */
    {
        ret = destBuf.writeInt32(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussNum */
    {
        ret = destBuf.writeInt32(this->iDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLatitude */
    {
        ret = destBuf.writeInt64(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyNum */
    {
        ret = destBuf.writeInt32(this->iApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterNickNameLen */
    {
        ret = destBuf.writeInt32(this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szCreaterNickname */
    {
        if (0 > this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szCreaterNickname, this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreaterBirth */
    {
        ret = destBuf.writeInt64(this->llCreaterBirth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterGender */
    {
        ret = destBuf.writeInt32(this->iCreaterGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPictureNum */
    {
        ret = destBuf.writeInt32(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = destBuf.writeInt64(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iAudioNum */
    {
        ret = destBuf.writeInt32(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iCreaterIntegrity_level */
    {
        ret = destBuf.writeInt32(this->iCreaterIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterCreditLevel */
    {
        ret = destBuf.writeInt32(this->iCreaterCreditLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterCreditValue */
    {
        ret = destBuf.writeInt32(this->iCreaterCreditValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
HomeOrderInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || HomeOrderInfo::CURRVERSION < cutVer)
    {
        cutVer = HomeOrderInfo::CURRVERSION;
    }

    /* check cutversion */
    if (HomeOrderInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iStatus */
    {
        ret = destBuf.writeInt32_l(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iType */
    if (HomeOrderInfo::VERSION_iType <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreaterUid */
    {
        ret = destBuf.writeInt64_l(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreateTime */
    {
        ret = destBuf.writeInt32_l(this->iCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPosInfoLen */
    {
        ret = destBuf.writeInt32_l(this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPosInfo */
    {
        if (0 > this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_POSINFO_LEN < this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPosInfo, this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iParticularsLen */
    {
        ret = destBuf.writeInt32_l(this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (0 > this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PARTICULARS_LEN < this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyType */
    {
        ret = destBuf.writeInt32_l(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyNum */
    {
        ret = destBuf.writeInt32_l(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyStata */
    {
        ret = destBuf.writeInt32_l(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussNum */
    {
        ret = destBuf.writeInt32_l(this->iDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLatitude */
    {
        ret = destBuf.writeInt64_l(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyNum */
    {
        ret = destBuf.writeInt32_l(this->iApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szCreaterNickname */
    {
        if (0 > this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szCreaterNickname, this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreaterBirth */
    {
        ret = destBuf.writeInt64_l(this->llCreaterBirth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterGender */
    {
        ret = destBuf.writeInt32_l(this->iCreaterGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPictureNum */
    {
        ret = destBuf.writeInt32_l(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = destBuf.writeInt64_l(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iAudioNum */
    {
        ret = destBuf.writeInt32_l(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iCreaterIntegrity_level */
    {
        ret = destBuf.writeInt32_l(this->iCreaterIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterCreditLevel */
    {
        ret = destBuf.writeInt32_l(this->iCreaterCreditLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterCreditValue */
    {
        ret = destBuf.writeInt32_l(this->iCreaterCreditValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
HomeOrderInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
HomeOrderInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
HomeOrderInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || HomeOrderInfo::CURRVERSION < cutVer)
    {
        cutVer = HomeOrderInfo::CURRVERSION;
    }

    /* check cutversion */
    if (HomeOrderInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iStatus */
    {
        ret = srcBuf.readInt32(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iType */
    if (HomeOrderInfo::VERSION_iType <= cutVer)
    {
        ret = srcBuf.readInt32(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iType = 0;
    }

    /* unpack member: this->llCreaterUid */
    {
        ret = srcBuf.readInt64(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreateTime */
    {
        ret = srcBuf.readInt32(this->iCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPosInfoLen */
    {
        ret = srcBuf.readInt32(this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPosInfo */
    {
        if (0 > this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_POSINFO_LEN < this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPosInfo, this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iParticularsLen */
    {
        ret = srcBuf.readInt32(this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (0 > this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PARTICULARS_LEN < this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyType */
    {
        ret = srcBuf.readInt32(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyNum */
    {
        ret = srcBuf.readInt32(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyStata */
    {
        ret = srcBuf.readInt32(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussNum */
    {
        ret = srcBuf.readInt32(this->iDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLatitude */
    {
        ret = srcBuf.readInt64(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyNum */
    {
        ret = srcBuf.readInt32(this->iApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterNickNameLen */
    {
        ret = srcBuf.readInt32(this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szCreaterNickname */
    {
        if (0 > this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szCreaterNickname, this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreaterBirth */
    {
        ret = srcBuf.readInt64(this->llCreaterBirth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterGender */
    {
        ret = srcBuf.readInt32(this->iCreaterGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPictureNum */
    {
        ret = srcBuf.readInt32(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = srcBuf.readInt64(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iAudioNum */
    {
        ret = srcBuf.readInt32(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iCreaterIntegrity_level */
    {
        ret = srcBuf.readInt32(this->iCreaterIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterCreditLevel */
    {
        ret = srcBuf.readInt32(this->iCreaterCreditLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterCreditValue */
    {
        ret = srcBuf.readInt32(this->iCreaterCreditValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
HomeOrderInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || HomeOrderInfo::CURRVERSION < cutVer)
    {
        cutVer = HomeOrderInfo::CURRVERSION;
    }

    /* check cutversion */
    if (HomeOrderInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iStatus */
    {
        ret = srcBuf.readInt32_l(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iType */
    if (HomeOrderInfo::VERSION_iType <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iType = 0;
    }

    /* unpack member: this->llCreaterUid */
    {
        ret = srcBuf.readInt64_l(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreateTime */
    {
        ret = srcBuf.readInt32_l(this->iCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPosInfoLen */
    {
        ret = srcBuf.readInt32_l(this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPosInfo */
    {
        if (0 > this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_POSINFO_LEN < this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPosInfo, this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iParticularsLen */
    {
        ret = srcBuf.readInt32_l(this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (0 > this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PARTICULARS_LEN < this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyType */
    {
        ret = srcBuf.readInt32_l(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyNum */
    {
        ret = srcBuf.readInt32_l(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyStata */
    {
        ret = srcBuf.readInt32_l(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussNum */
    {
        ret = srcBuf.readInt32_l(this->iDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLatitude */
    {
        ret = srcBuf.readInt64_l(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyNum */
    {
        ret = srcBuf.readInt32_l(this->iApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szCreaterNickname */
    {
        if (0 > this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szCreaterNickname, this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreaterBirth */
    {
        ret = srcBuf.readInt64_l(this->llCreaterBirth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterGender */
    {
        ret = srcBuf.readInt32_l(this->iCreaterGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPictureNum */
    {
        ret = srcBuf.readInt32_l(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = srcBuf.readInt64_l(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iAudioNum */
    {
        ret = srcBuf.readInt32_l(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iCreaterIntegrity_level */
    {
        ret = srcBuf.readInt32_l(this->iCreaterIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterCreditLevel */
    {
        ret = srcBuf.readInt32_l(this->iCreaterCreditLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterCreditValue */
    {
        ret = srcBuf.readInt32_l(this->iCreaterCreditValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
HomeOrderInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
HomeOrderInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iStatus]", "%d", this->iStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iType]", "%d", this->iType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCreaterUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCreaterUid]", TDR_CPP_INT64_FORMAT, this->llCreaterUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreateTime */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreateTime]", "%d", this->iCreateTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPosInfoLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPosInfoLen]", "%d", this->iPosInfoLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szPosInfo */
    if (0 > this->iPosInfoLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_POSINFO_LEN < this->iPosInfoLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szPosInfo]", this->iPosInfoLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szPosInfo_i = 0; szPosInfo_i < this->iPosInfoLen; szPosInfo_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szPosInfo[szPosInfo_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iParticularsLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iParticularsLen]", "%d", this->iParticularsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szParticulars */
    if (0 > this->iParticularsLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_PARTICULARS_LEN < this->iParticularsLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szParticulars]", this->iParticularsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szParticulars_i = 0; szParticulars_i < this->iParticularsLen; szParticulars_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szParticulars[szParticulars_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoneyType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoneyType]", "%d", this->iMoneyType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoneyNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoneyNum]", "%d", this->iMoneyNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGender]", "%d", this->iGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApplyStata */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApplyStata]", "%d", this->iApplyStata);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDiscussNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDiscussNum]", "%d", this->iDiscussNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLongitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLongitude]", TDR_CPP_INT64_FORMAT, this->llLongitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLatitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLatitude]", TDR_CPP_INT64_FORMAT, this->llLatitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApplyNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApplyNum]", "%d", this->iApplyNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreaterNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreaterNickNameLen]", "%d", this->iCreaterNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szCreaterNickname */
    if (0 > this->iCreaterNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iCreaterNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szCreaterNickname]", this->iCreaterNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szCreaterNickname_i = 0; szCreaterNickname_i < this->iCreaterNickNameLen; szCreaterNickname_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szCreaterNickname[szCreaterNickname_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCreaterBirth */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCreaterBirth]", TDR_CPP_INT64_FORMAT, this->llCreaterBirth);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreaterGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreaterGender]", "%d", this->iCreaterGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPictureNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPictureNum]", "%d", this->iPictureNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->pictureidList */
    if (0 > this->iPictureNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[pictureidList]", this->iPictureNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->pictureidList[pictureidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAudioNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAudioNum]", "%d", this->iAudioNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astAudioInfo */
    if (0 > this->iAudioNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astAudioInfo]", astAudioInfo_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astAudioInfo[astAudioInfo_i] */
        if (0 > indent)
        {
            ret = this->astAudioInfo[astAudioInfo_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astAudioInfo[astAudioInfo_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* visualize member: this->iCreaterIntegrity_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreaterIntegrity_level]", "%d", this->iCreaterIntegrity_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreaterCreditLevel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreaterCreditLevel]", "%d", this->iCreaterCreditLevel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreaterCreditValue */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreaterCreditValue]", "%d", this->iCreaterCreditValue);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
HomeOrderInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
HomeOrderInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_HomeOrderInfo_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_HomeOrderInfo_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_HomeOrderInfo_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_HomeOrderInfo_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_HomeOrderInfo_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_HomeOrderInfo_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_HomeOrderInfo_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iPag */
    {
        ret = destBuf.writeInt32(this->iPag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSex */
    {
        ret = destBuf.writeInt32(this->iSex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLatitude */
    {
        ret = destBuf.writeInt64(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderMainType */
    {
        ret = destBuf.writeInt32(this->iOrderMainType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iValidOrder */
    {
        ret = destBuf.writeInt32(this->iValidOrder);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyType */
    {
        ret = destBuf.writeInt32(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyNumUp */
    {
        ret = destBuf.writeInt32(this->iMoneyNumUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyNumDown */
    {
        ret = destBuf.writeInt32(this->iMoneyNumDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAgeUp */
    {
        ret = destBuf.writeInt32(this->iAgeUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAgeDown */
    {
        ret = destBuf.writeInt32(this->iAgeDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTimeType */
    {
        ret = destBuf.writeInt32(this->iTimeType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDistanceType */
    {
        ret = destBuf.writeInt32(this->iDistanceType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderSortType */
    {
        ret = destBuf.writeInt32(this->iOrderSortType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTimeSpanType */
    if (CT_HomeOrderInfo_Req::VERSION_iTimeSpanType <= cutVer)
    {
        ret = destBuf.writeInt32(this->iTimeSpanType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVersionType */
    if (CT_HomeOrderInfo_Req::VERSION_iVersionType <= cutVer)
    {
        ret = destBuf.writeInt32(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_HomeOrderInfo_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_HomeOrderInfo_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_HomeOrderInfo_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_HomeOrderInfo_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iPag */
    {
        ret = destBuf.writeInt32_l(this->iPag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSex */
    {
        ret = destBuf.writeInt32_l(this->iSex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLatitude */
    {
        ret = destBuf.writeInt64_l(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderMainType */
    {
        ret = destBuf.writeInt32_l(this->iOrderMainType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iValidOrder */
    {
        ret = destBuf.writeInt32_l(this->iValidOrder);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyType */
    {
        ret = destBuf.writeInt32_l(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyNumUp */
    {
        ret = destBuf.writeInt32_l(this->iMoneyNumUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyNumDown */
    {
        ret = destBuf.writeInt32_l(this->iMoneyNumDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAgeUp */
    {
        ret = destBuf.writeInt32_l(this->iAgeUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAgeDown */
    {
        ret = destBuf.writeInt32_l(this->iAgeDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTimeType */
    {
        ret = destBuf.writeInt32_l(this->iTimeType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDistanceType */
    {
        ret = destBuf.writeInt32_l(this->iDistanceType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderSortType */
    {
        ret = destBuf.writeInt32_l(this->iOrderSortType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTimeSpanType */
    if (CT_HomeOrderInfo_Req::VERSION_iTimeSpanType <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iTimeSpanType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVersionType */
    if (CT_HomeOrderInfo_Req::VERSION_iVersionType <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_HomeOrderInfo_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_HomeOrderInfo_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_HomeOrderInfo_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_HomeOrderInfo_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_HomeOrderInfo_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_HomeOrderInfo_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iPag */
    {
        ret = srcBuf.readInt32(this->iPag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSex */
    {
        ret = srcBuf.readInt32(this->iSex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLatitude */
    {
        ret = srcBuf.readInt64(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderMainType */
    {
        ret = srcBuf.readInt32(this->iOrderMainType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iValidOrder */
    {
        ret = srcBuf.readInt32(this->iValidOrder);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyType */
    {
        ret = srcBuf.readInt32(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyNumUp */
    {
        ret = srcBuf.readInt32(this->iMoneyNumUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyNumDown */
    {
        ret = srcBuf.readInt32(this->iMoneyNumDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAgeUp */
    {
        ret = srcBuf.readInt32(this->iAgeUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAgeDown */
    {
        ret = srcBuf.readInt32(this->iAgeDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTimeType */
    {
        ret = srcBuf.readInt32(this->iTimeType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDistanceType */
    {
        ret = srcBuf.readInt32(this->iDistanceType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderSortType */
    {
        ret = srcBuf.readInt32(this->iOrderSortType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTimeSpanType */
    if (CT_HomeOrderInfo_Req::VERSION_iTimeSpanType <= cutVer)
    {
        ret = srcBuf.readInt32(this->iTimeSpanType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iTimeSpanType = 0;
    }

    /* unpack member: this->iVersionType */
    if (CT_HomeOrderInfo_Req::VERSION_iVersionType <= cutVer)
    {
        ret = srcBuf.readInt32(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iVersionType = 0;
    }

    return ret;
}

TdrError::ErrorType
CT_HomeOrderInfo_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_HomeOrderInfo_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_HomeOrderInfo_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_HomeOrderInfo_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iPag */
    {
        ret = srcBuf.readInt32_l(this->iPag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSex */
    {
        ret = srcBuf.readInt32_l(this->iSex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLatitude */
    {
        ret = srcBuf.readInt64_l(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderMainType */
    {
        ret = srcBuf.readInt32_l(this->iOrderMainType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iValidOrder */
    {
        ret = srcBuf.readInt32_l(this->iValidOrder);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyType */
    {
        ret = srcBuf.readInt32_l(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyNumUp */
    {
        ret = srcBuf.readInt32_l(this->iMoneyNumUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyNumDown */
    {
        ret = srcBuf.readInt32_l(this->iMoneyNumDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAgeUp */
    {
        ret = srcBuf.readInt32_l(this->iAgeUp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAgeDown */
    {
        ret = srcBuf.readInt32_l(this->iAgeDown);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTimeType */
    {
        ret = srcBuf.readInt32_l(this->iTimeType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDistanceType */
    {
        ret = srcBuf.readInt32_l(this->iDistanceType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderSortType */
    {
        ret = srcBuf.readInt32_l(this->iOrderSortType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTimeSpanType */
    if (CT_HomeOrderInfo_Req::VERSION_iTimeSpanType <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iTimeSpanType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iTimeSpanType = 0;
    }

    /* unpack member: this->iVersionType */
    if (CT_HomeOrderInfo_Req::VERSION_iVersionType <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iVersionType = 0;
    }

    return ret;
}

TdrError::ErrorType
CT_HomeOrderInfo_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_HomeOrderInfo_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iPag */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPag]", "%d", this->iPag);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSex */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSex]", "%d", this->iSex);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLongitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLongitude]", TDR_CPP_INT64_FORMAT, this->llLongitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLatitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLatitude]", TDR_CPP_INT64_FORMAT, this->llLatitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrderMainType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrderMainType]", "%d", this->iOrderMainType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iValidOrder */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iValidOrder]", "%d", this->iValidOrder);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoneyType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoneyType]", "%d", this->iMoneyType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoneyNumUp */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoneyNumUp]", "%d", this->iMoneyNumUp);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoneyNumDown */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoneyNumDown]", "%d", this->iMoneyNumDown);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAgeUp */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAgeUp]", "%d", this->iAgeUp);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAgeDown */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAgeDown]", "%d", this->iAgeDown);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTimeType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTimeType]", "%d", this->iTimeType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDistanceType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDistanceType]", "%d", this->iDistanceType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrderSortType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrderSortType]", "%d", this->iOrderSortType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTimeSpanType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTimeSpanType]", "%d", this->iTimeSpanType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVersionType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVersionType]", "%d", this->iVersionType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_HomeOrderInfo_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_HomeOrderInfo_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_HomeOrderInfo_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_HomeOrderInfo_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_HomeOrderInfo_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_HomeOrderInfo_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_HomeOrderInfo_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_HomeOrderInfo_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_HomeOrderInfo_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwInfoCount */
    {
        ret = destBuf.writeUInt32(this->dwInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astHomeOrderInfos */
    {
        if (TRADE_INFONUM_OF_PAG < this->dwInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astHomeOrderInfos_i = 0; astHomeOrderInfos_i < this->dwInfoCount; astHomeOrderInfos_i++)
        {
            ret = this->astHomeOrderInfos[astHomeOrderInfos_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_HomeOrderInfo_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_HomeOrderInfo_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_HomeOrderInfo_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_HomeOrderInfo_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwInfoCount */
    {
        ret = destBuf.writeUInt32_l(this->dwInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astHomeOrderInfos */
    {
        if (TRADE_INFONUM_OF_PAG < this->dwInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astHomeOrderInfos_i = 0; astHomeOrderInfos_i < this->dwInfoCount; astHomeOrderInfos_i++)
        {
            ret = this->astHomeOrderInfos[astHomeOrderInfos_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_HomeOrderInfo_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_HomeOrderInfo_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_HomeOrderInfo_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_HomeOrderInfo_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_HomeOrderInfo_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_HomeOrderInfo_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwInfoCount */
    {
        ret = srcBuf.readUInt32(this->dwInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astHomeOrderInfos */
    {
        if (TRADE_INFONUM_OF_PAG < this->dwInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astHomeOrderInfos_i = 0; astHomeOrderInfos_i < this->dwInfoCount; astHomeOrderInfos_i++)
        {
            ret = this->astHomeOrderInfos[astHomeOrderInfos_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_HomeOrderInfo_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_HomeOrderInfo_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_HomeOrderInfo_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_HomeOrderInfo_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwInfoCount */
    {
        ret = srcBuf.readUInt32_l(this->dwInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astHomeOrderInfos */
    {
        if (TRADE_INFONUM_OF_PAG < this->dwInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astHomeOrderInfos_i = 0; astHomeOrderInfos_i < this->dwInfoCount; astHomeOrderInfos_i++)
        {
            ret = this->astHomeOrderInfos[astHomeOrderInfos_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_HomeOrderInfo_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_HomeOrderInfo_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwInfoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwInfoCount]", "%u", this->dwInfoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astHomeOrderInfos */
    if (TRADE_INFONUM_OF_PAG < this->dwInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (uint32_t astHomeOrderInfos_i = 0; astHomeOrderInfos_i < this->dwInfoCount; astHomeOrderInfos_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astHomeOrderInfos]", astHomeOrderInfos_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astHomeOrderInfos[astHomeOrderInfos_i] */
        if (0 > indent)
        {
            ret = this->astHomeOrderInfos[astHomeOrderInfos_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astHomeOrderInfos[astHomeOrderInfos_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TC_HomeOrderInfo_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_HomeOrderInfo_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
OrderStateInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
OrderStateInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderStateInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderStateInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderStateInfo::CURRVERSION < cutVer)
    {
        cutVer = OrderStateInfo::CURRVERSION;
    }

    /* check cutversion */
    if (OrderStateInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iOrderStatus */
    {
        ret = destBuf.writeInt32(this->iOrderStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyStatus */
    {
        ret = destBuf.writeInt32(this->iApplyStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderStateInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderStateInfo::CURRVERSION < cutVer)
    {
        cutVer = OrderStateInfo::CURRVERSION;
    }

    /* check cutversion */
    if (OrderStateInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iOrderStatus */
    {
        ret = destBuf.writeInt32_l(this->iOrderStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyStatus */
    {
        ret = destBuf.writeInt32_l(this->iApplyStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderStateInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderStateInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderStateInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderStateInfo::CURRVERSION < cutVer)
    {
        cutVer = OrderStateInfo::CURRVERSION;
    }

    /* check cutversion */
    if (OrderStateInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iOrderStatus */
    {
        ret = srcBuf.readInt32(this->iOrderStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyStatus */
    {
        ret = srcBuf.readInt32(this->iApplyStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderStateInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderStateInfo::CURRVERSION < cutVer)
    {
        cutVer = OrderStateInfo::CURRVERSION;
    }

    /* check cutversion */
    if (OrderStateInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iOrderStatus */
    {
        ret = srcBuf.readInt32_l(this->iOrderStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyStatus */
    {
        ret = srcBuf.readInt32_l(this->iApplyStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderStateInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderStateInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iOrderStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrderStatus]", "%d", this->iOrderStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApplyStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApplyStatus]", "%d", this->iApplyStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
OrderStateInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
OrderStateInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_OrderStateInfoList_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_OrderStateInfoList_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_OrderStateInfoList_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_OrderStateInfoList_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_OrderStateInfoList_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_OrderStateInfoList_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_OrderStateInfoList_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iOrderCount */
    {
        ret = destBuf.writeInt32(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->orderIds */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t orderIds_i = 0; orderIds_i < this->iOrderCount; orderIds_i++)
        {
            ret = destBuf.writeInt64(this->orderIds[orderIds_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CT_OrderStateInfoList_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_OrderStateInfoList_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_OrderStateInfoList_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_OrderStateInfoList_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iOrderCount */
    {
        ret = destBuf.writeInt32_l(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->orderIds */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t orderIds_i = 0; orderIds_i < this->iOrderCount; orderIds_i++)
        {
            ret = destBuf.writeInt64_l(this->orderIds[orderIds_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CT_OrderStateInfoList_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_OrderStateInfoList_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_OrderStateInfoList_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_OrderStateInfoList_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_OrderStateInfoList_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_OrderStateInfoList_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iOrderCount */
    {
        ret = srcBuf.readInt32(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->orderIds */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t orderIds_i = 0; orderIds_i < this->iOrderCount; orderIds_i++)
        {
            ret = srcBuf.readInt64(this->orderIds[orderIds_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CT_OrderStateInfoList_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_OrderStateInfoList_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_OrderStateInfoList_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_OrderStateInfoList_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iOrderCount */
    {
        ret = srcBuf.readInt32_l(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->orderIds */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t orderIds_i = 0; orderIds_i < this->iOrderCount; orderIds_i++)
        {
            ret = srcBuf.readInt64_l(this->orderIds[orderIds_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CT_OrderStateInfoList_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_OrderStateInfoList_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iOrderCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrderCount]", "%d", this->iOrderCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->orderIds */
    if (0 > this->iOrderCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[orderIds]", this->iOrderCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t orderIds_i = 0; orderIds_i < this->iOrderCount; orderIds_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->orderIds[orderIds_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_OrderStateInfoList_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_OrderStateInfoList_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_OrderStateInfoList_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_OrderStateInfoList_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_OrderStateInfoList_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_OrderStateInfoList_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_OrderStateInfoList_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_OrderStateInfoList_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_OrderStateInfoList_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderCount */
    {
        ret = destBuf.writeInt32(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astOrderStateInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderStateInfoList_i = 0; astOrderStateInfoList_i < this->iOrderCount; astOrderStateInfoList_i++)
        {
            ret = this->astOrderStateInfoList[astOrderStateInfoList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_OrderStateInfoList_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_OrderStateInfoList_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_OrderStateInfoList_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_OrderStateInfoList_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderCount */
    {
        ret = destBuf.writeInt32_l(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astOrderStateInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderStateInfoList_i = 0; astOrderStateInfoList_i < this->iOrderCount; astOrderStateInfoList_i++)
        {
            ret = this->astOrderStateInfoList[astOrderStateInfoList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_OrderStateInfoList_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_OrderStateInfoList_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_OrderStateInfoList_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_OrderStateInfoList_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_OrderStateInfoList_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_OrderStateInfoList_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderCount */
    {
        ret = srcBuf.readInt32(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astOrderStateInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderStateInfoList_i = 0; astOrderStateInfoList_i < this->iOrderCount; astOrderStateInfoList_i++)
        {
            ret = this->astOrderStateInfoList[astOrderStateInfoList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_OrderStateInfoList_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_OrderStateInfoList_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_OrderStateInfoList_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_OrderStateInfoList_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderCount */
    {
        ret = srcBuf.readInt32_l(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astOrderStateInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderStateInfoList_i = 0; astOrderStateInfoList_i < this->iOrderCount; astOrderStateInfoList_i++)
        {
            ret = this->astOrderStateInfoList[astOrderStateInfoList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_OrderStateInfoList_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_OrderStateInfoList_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrderCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrderCount]", "%d", this->iOrderCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astOrderStateInfoList */
    if (0 > this->iOrderCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astOrderStateInfoList_i = 0; astOrderStateInfoList_i < this->iOrderCount; astOrderStateInfoList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astOrderStateInfoList]", astOrderStateInfoList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astOrderStateInfoList[astOrderStateInfoList_i] */
        if (0 > indent)
        {
            ret = this->astOrderStateInfoList[astOrderStateInfoList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astOrderStateInfoList[astOrderStateInfoList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TC_OrderStateInfoList_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_OrderStateInfoList_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ApplyInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ApplyInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ApplyInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ApplyInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ApplyInfo::CURRVERSION < cutVer)
    {
        cutVer = ApplyInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ApplyInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bStatus */
    {
        ret = destBuf.writeUInt8(this->bStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ApplyInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ApplyInfo::CURRVERSION < cutVer)
    {
        cutVer = ApplyInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ApplyInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bStatus */
    {
        ret = destBuf.writeUInt8(this->bStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ApplyInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ApplyInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ApplyInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ApplyInfo::CURRVERSION < cutVer)
    {
        cutVer = ApplyInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ApplyInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bStatus */
    {
        ret = srcBuf.readUInt8(this->bStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ApplyInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ApplyInfo::CURRVERSION < cutVer)
    {
        cutVer = ApplyInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ApplyInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bStatus */
    {
        ret = srcBuf.readUInt8(this->bStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ApplyInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ApplyInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bStatus]", "0x%02x", this->bStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ApplyInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ApplyInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderSpecificInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderSpecificInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderSpecificInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderSpecificInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderSpecificInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderSpecificInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderSpecificInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderSpecificInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderSpecificInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderSpecificInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderSpecificInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderSpecificInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderSpecificInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectOrderSpecificInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectOrderSpecificInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderSpecificInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderSpecificInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderSpecificInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwParticularsLen */
    {
        ret = destBuf.writeUInt32(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (512 < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwApplyNum */
    {
        ret = destBuf.writeUInt32(this->dwApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astApplyInfoList */
    {
        if (100 < this->dwApplyNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astApplyInfoList_i = 0; astApplyInfoList_i < this->dwApplyNum; astApplyInfoList_i++)
        {
            ret = this->astApplyInfoList[astApplyInfoList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->dwDiscussNum */
    {
        ret = destBuf.writeUInt32(this->dwDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwDiscussPagNum */
    {
        ret = destBuf.writeUInt32(this->dwDiscussPagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->discussPagidList */
    {
        if (256 < this->dwDiscussPagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t discussPagidList_i = 0; discussPagidList_i < this->dwDiscussPagNum; discussPagidList_i++)
        {
            ret = destBuf.writeInt64(this->discussPagidList[discussPagidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->llOrderCreaterPhone */
    {
        ret = destBuf.writeInt64(this->llOrderCreaterPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderApplyerPhone */
    {
        ret = destBuf.writeInt64(this->llOrderApplyerPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stOrderBasicInfoToClient */
    {
        ret = this->stOrderBasicInfoToClient.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderSpecificInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderSpecificInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderSpecificInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwParticularsLen */
    {
        ret = destBuf.writeUInt32_l(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (512 < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwApplyNum */
    {
        ret = destBuf.writeUInt32_l(this->dwApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astApplyInfoList */
    {
        if (100 < this->dwApplyNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astApplyInfoList_i = 0; astApplyInfoList_i < this->dwApplyNum; astApplyInfoList_i++)
        {
            ret = this->astApplyInfoList[astApplyInfoList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->dwDiscussNum */
    {
        ret = destBuf.writeUInt32_l(this->dwDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwDiscussPagNum */
    {
        ret = destBuf.writeUInt32_l(this->dwDiscussPagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->discussPagidList */
    {
        if (256 < this->dwDiscussPagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t discussPagidList_i = 0; discussPagidList_i < this->dwDiscussPagNum; discussPagidList_i++)
        {
            ret = destBuf.writeInt64_l(this->discussPagidList[discussPagidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->llOrderCreaterPhone */
    {
        ret = destBuf.writeInt64_l(this->llOrderCreaterPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderApplyerPhone */
    {
        ret = destBuf.writeInt64_l(this->llOrderApplyerPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stOrderBasicInfoToClient */
    {
        ret = this->stOrderBasicInfoToClient.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderSpecificInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderSpecificInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderSpecificInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwParticularsLen */
    {
        ret = srcBuf.readUInt32(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (512 < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwApplyNum */
    {
        ret = srcBuf.readUInt32(this->dwApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astApplyInfoList */
    {
        if (100 < this->dwApplyNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astApplyInfoList_i = 0; astApplyInfoList_i < this->dwApplyNum; astApplyInfoList_i++)
        {
            ret = this->astApplyInfoList[astApplyInfoList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->dwDiscussNum */
    {
        ret = srcBuf.readUInt32(this->dwDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwDiscussPagNum */
    {
        ret = srcBuf.readUInt32(this->dwDiscussPagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->discussPagidList */
    {
        if (256 < this->dwDiscussPagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t discussPagidList_i = 0; discussPagidList_i < this->dwDiscussPagNum; discussPagidList_i++)
        {
            ret = srcBuf.readInt64(this->discussPagidList[discussPagidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->llOrderCreaterPhone */
    {
        ret = srcBuf.readInt64(this->llOrderCreaterPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderApplyerPhone */
    {
        ret = srcBuf.readInt64(this->llOrderApplyerPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stOrderBasicInfoToClient */
    {
        ret = this->stOrderBasicInfoToClient.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderSpecificInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderSpecificInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderSpecificInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwParticularsLen */
    {
        ret = srcBuf.readUInt32_l(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (512 < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwApplyNum */
    {
        ret = srcBuf.readUInt32_l(this->dwApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astApplyInfoList */
    {
        if (100 < this->dwApplyNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t astApplyInfoList_i = 0; astApplyInfoList_i < this->dwApplyNum; astApplyInfoList_i++)
        {
            ret = this->astApplyInfoList[astApplyInfoList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->dwDiscussNum */
    {
        ret = srcBuf.readUInt32_l(this->dwDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwDiscussPagNum */
    {
        ret = srcBuf.readUInt32_l(this->dwDiscussPagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->discussPagidList */
    {
        if (256 < this->dwDiscussPagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t discussPagidList_i = 0; discussPagidList_i < this->dwDiscussPagNum; discussPagidList_i++)
        {
            ret = srcBuf.readInt64_l(this->discussPagidList[discussPagidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->llOrderCreaterPhone */
    {
        ret = srcBuf.readInt64_l(this->llOrderCreaterPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderApplyerPhone */
    {
        ret = srcBuf.readInt64_l(this->llOrderApplyerPhone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stOrderBasicInfoToClient */
    {
        ret = this->stOrderBasicInfoToClient.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderSpecificInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwParticularsLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwParticularsLen]", "%u", this->dwParticularsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szParticulars */
    if (512 < this->dwParticularsLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szParticulars]", this->dwParticularsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (uint32_t szParticulars_i = 0; szParticulars_i < this->dwParticularsLen; szParticulars_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szParticulars[szParticulars_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwApplyNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwApplyNum]", "%u", this->dwApplyNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astApplyInfoList */
    if (100 < this->dwApplyNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (uint32_t astApplyInfoList_i = 0; astApplyInfoList_i < this->dwApplyNum; astApplyInfoList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astApplyInfoList]", astApplyInfoList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astApplyInfoList[astApplyInfoList_i] */
        if (0 > indent)
        {
            ret = this->astApplyInfoList[astApplyInfoList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astApplyInfoList[astApplyInfoList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* visualize member: this->dwDiscussNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwDiscussNum]", "%u", this->dwDiscussNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwDiscussPagNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwDiscussPagNum]", "%u", this->dwDiscussPagNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->discussPagidList */
    if (256 < this->dwDiscussPagNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[discussPagidList]", this->dwDiscussPagNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (uint32_t discussPagidList_i = 0; discussPagidList_i < this->dwDiscussPagNum; discussPagidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->discussPagidList[discussPagidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llOrderCreaterPhone */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderCreaterPhone]", TDR_CPP_INT64_FORMAT, this->llOrderCreaterPhone);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llOrderApplyerPhone */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderApplyerPhone]", TDR_CPP_INT64_FORMAT, this->llOrderApplyerPhone);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stOrderBasicInfoToClient */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stOrderBasicInfoToClient]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stOrderBasicInfoToClient */
    if (0 > indent)
    {
        ret = this->stOrderBasicInfoToClient.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stOrderBasicInfoToClient.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectOrderSpecificInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectOrderSpecificInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeApplyOrder::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeApplyOrder::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeApplyOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyRequestType */
    {
        ret = destBuf.writeInt32(this->iApplyRequestType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeApplyOrder::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeApplyOrder::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeApplyOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyRequestType */
    {
        ret = destBuf.writeInt32_l(this->iApplyRequestType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeApplyOrder::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeApplyOrder::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeApplyOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyRequestType */
    {
        ret = srcBuf.readInt32(this->iApplyRequestType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeApplyOrder::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeApplyOrder::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeApplyOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyRequestType */
    {
        ret = srcBuf.readInt32_l(this->iApplyRequestType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeApplyOrder::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApplyRequestType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApplyRequestType]", "%d", this->iApplyRequestType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeApplyOrder::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeApplyOrder::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientApplyOrder::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientApplyOrder::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientApplyOrder::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientApplyOrder::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientApplyOrder::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientApplyOrder::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientApplyOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientApplyOrder::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientApplyOrder::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientApplyOrder::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientApplyOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientApplyOrder::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientApplyOrder::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientApplyOrder::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientApplyOrder::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientApplyOrder::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientApplyOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientApplyOrder::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientApplyOrder::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientApplyOrder::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientApplyOrder::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientApplyOrder::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientApplyOrder::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientApplyOrder::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientApplyOrder::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectApplyer::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llApplyerid */
    {
        ret = destBuf.writeInt64(this->llApplyerid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectApplyer::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llApplyerid */
    {
        ret = destBuf.writeInt64_l(this->llApplyerid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectApplyer::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llApplyerid */
    {
        ret = srcBuf.readInt64(this->llApplyerid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectApplyer::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llApplyerid */
    {
        ret = srcBuf.readInt64_l(this->llApplyerid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyer::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llApplyerid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llApplyerid]", TDR_CPP_INT64_FORMAT, this->llApplyerid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectApplyer::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectApplyer::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectApplyer::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectApplyer::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectApplyer::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectApplyer::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyer::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectApplyer::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectApplyer::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientConfirmOrCancelOrderReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientConfirmOrCancelOrderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientConfirmOrCancelOrderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientConfirmOrCancelOrderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bConfirmOrCancel */
    {
        ret = destBuf.writeUInt8(this->bConfirmOrCancel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientConfirmOrCancelOrderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientConfirmOrCancelOrderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientConfirmOrCancelOrderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bConfirmOrCancel */
    {
        ret = destBuf.writeUInt8(this->bConfirmOrCancel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientConfirmOrCancelOrderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientConfirmOrCancelOrderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientConfirmOrCancelOrderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bConfirmOrCancel */
    {
        ret = srcBuf.readUInt8(this->bConfirmOrCancel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientConfirmOrCancelOrderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientConfirmOrCancelOrderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientConfirmOrCancelOrderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bConfirmOrCancel */
    {
        ret = srcBuf.readUInt8(this->bConfirmOrCancel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bConfirmOrCancel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bConfirmOrCancel]", "0x%02x", this->bConfirmOrCancel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientConfirmOrCancelOrderReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientConfirmOrCancelOrderReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientConfirmOrCancelOrderResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientConfirmOrCancelOrderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientConfirmOrCancelOrderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientConfirmOrCancelOrderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientConfirmOrCancelOrderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientConfirmOrCancelOrderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientConfirmOrCancelOrderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientConfirmOrCancelOrderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientConfirmOrCancelOrderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientConfirmOrCancelOrderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientConfirmOrCancelOrderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientConfirmOrCancelOrderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientConfirmOrCancelOrderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientConfirmOrCancelOrderResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientConfirmOrCancelOrderResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientConfirmOrCancelOrderResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientCreatedOrderBriefReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientCreatedOrderBriefReq::CURRVERSION < cutVer)
    {
        cutVer = ClientCreatedOrderBriefReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientCreatedOrderBriefReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRecordCount */
    {
        ret = destBuf.writeInt32(this->iRecordCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientCreatedOrderBriefReq::CURRVERSION < cutVer)
    {
        cutVer = ClientCreatedOrderBriefReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientCreatedOrderBriefReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRecordCount */
    {
        ret = destBuf.writeInt32_l(this->iRecordCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientCreatedOrderBriefReq::CURRVERSION < cutVer)
    {
        cutVer = ClientCreatedOrderBriefReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientCreatedOrderBriefReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRecordCount */
    {
        ret = srcBuf.readInt32(this->iRecordCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientCreatedOrderBriefReq::CURRVERSION < cutVer)
    {
        cutVer = ClientCreatedOrderBriefReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientCreatedOrderBriefReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRecordCount */
    {
        ret = srcBuf.readInt32_l(this->iRecordCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llOrderId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderId]", TDR_CPP_INT64_FORMAT, this->llOrderId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRecordCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRecordCount]", "%d", this->iRecordCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientCreatedOrderBriefReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientCreatedOrderBriefReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
OrderCombineInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
OrderCombineInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderCombineInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderCombineInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderCombineInfo::CURRVERSION < cutVer)
    {
        cutVer = OrderCombineInfo::CURRVERSION;
    }

    /* check cutversion */
    if (OrderCombineInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iStatus */
    {
        ret = destBuf.writeInt32(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreaterUid */
    {
        ret = destBuf.writeInt64(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreateTime */
    {
        ret = destBuf.writeInt64(this->llCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPosInfoLen */
    {
        ret = destBuf.writeInt32(this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPosInfo */
    {
        if (0 > this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_POSINFO_LEN < this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPosInfo, this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iParticularsLen */
    {
        ret = destBuf.writeInt32(this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (0 > this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PARTICULARS_LEN < this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyType */
    {
        ret = destBuf.writeInt32(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyNum */
    {
        ret = destBuf.writeInt32(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyStata */
    {
        ret = destBuf.writeInt32(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussNum */
    {
        ret = destBuf.writeInt32(this->iDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLatitude */
    {
        ret = destBuf.writeInt64(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyNum */
    {
        ret = destBuf.writeInt32(this->iApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPictureNum */
    {
        ret = destBuf.writeInt32(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = destBuf.writeInt64(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iAudioNum */
    {
        ret = destBuf.writeInt32(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iCreaterNickNameLen */
    {
        ret = destBuf.writeInt32(this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szCreaterNickname */
    {
        if (0 > this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szCreaterNickname, this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreaterBirth */
    {
        ret = destBuf.writeInt64(this->llCreaterBirth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterGender */
    {
        ret = destBuf.writeInt32(this->iCreaterGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterIntegrityLevel */
    {
        ret = destBuf.writeInt32(this->iCreaterIntegrityLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterCreditLevel */
    {
        ret = destBuf.writeInt32(this->iCreaterCreditLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterCreditValue */
    {
        ret = destBuf.writeInt32(this->iCreaterCreditValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderCombineInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderCombineInfo::CURRVERSION < cutVer)
    {
        cutVer = OrderCombineInfo::CURRVERSION;
    }

    /* check cutversion */
    if (OrderCombineInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iStatus */
    {
        ret = destBuf.writeInt32_l(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreaterUid */
    {
        ret = destBuf.writeInt64_l(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreateTime */
    {
        ret = destBuf.writeInt64_l(this->llCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPosInfoLen */
    {
        ret = destBuf.writeInt32_l(this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPosInfo */
    {
        if (0 > this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_POSINFO_LEN < this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPosInfo, this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iParticularsLen */
    {
        ret = destBuf.writeInt32_l(this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (0 > this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PARTICULARS_LEN < this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyType */
    {
        ret = destBuf.writeInt32_l(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoneyNum */
    {
        ret = destBuf.writeInt32_l(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyStata */
    {
        ret = destBuf.writeInt32_l(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussNum */
    {
        ret = destBuf.writeInt32_l(this->iDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLatitude */
    {
        ret = destBuf.writeInt64_l(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyNum */
    {
        ret = destBuf.writeInt32_l(this->iApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPictureNum */
    {
        ret = destBuf.writeInt32_l(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = destBuf.writeInt64_l(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iAudioNum */
    {
        ret = destBuf.writeInt32_l(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iCreaterNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szCreaterNickname */
    {
        if (0 > this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szCreaterNickname, this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreaterBirth */
    {
        ret = destBuf.writeInt64_l(this->llCreaterBirth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterGender */
    {
        ret = destBuf.writeInt32_l(this->iCreaterGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterIntegrityLevel */
    {
        ret = destBuf.writeInt32_l(this->iCreaterIntegrityLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterCreditLevel */
    {
        ret = destBuf.writeInt32_l(this->iCreaterCreditLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreaterCreditValue */
    {
        ret = destBuf.writeInt32_l(this->iCreaterCreditValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderCombineInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderCombineInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderCombineInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderCombineInfo::CURRVERSION < cutVer)
    {
        cutVer = OrderCombineInfo::CURRVERSION;
    }

    /* check cutversion */
    if (OrderCombineInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iStatus */
    {
        ret = srcBuf.readInt32(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreaterUid */
    {
        ret = srcBuf.readInt64(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreateTime */
    {
        ret = srcBuf.readInt64(this->llCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPosInfoLen */
    {
        ret = srcBuf.readInt32(this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPosInfo */
    {
        if (0 > this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_POSINFO_LEN < this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPosInfo, this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iParticularsLen */
    {
        ret = srcBuf.readInt32(this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (0 > this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PARTICULARS_LEN < this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyType */
    {
        ret = srcBuf.readInt32(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyNum */
    {
        ret = srcBuf.readInt32(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyStata */
    {
        ret = srcBuf.readInt32(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussNum */
    {
        ret = srcBuf.readInt32(this->iDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLatitude */
    {
        ret = srcBuf.readInt64(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyNum */
    {
        ret = srcBuf.readInt32(this->iApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPictureNum */
    {
        ret = srcBuf.readInt32(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = srcBuf.readInt64(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iAudioNum */
    {
        ret = srcBuf.readInt32(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iCreaterNickNameLen */
    {
        ret = srcBuf.readInt32(this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szCreaterNickname */
    {
        if (0 > this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szCreaterNickname, this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreaterBirth */
    {
        ret = srcBuf.readInt64(this->llCreaterBirth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterGender */
    {
        ret = srcBuf.readInt32(this->iCreaterGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterIntegrityLevel */
    {
        ret = srcBuf.readInt32(this->iCreaterIntegrityLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterCreditLevel */
    {
        ret = srcBuf.readInt32(this->iCreaterCreditLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterCreditValue */
    {
        ret = srcBuf.readInt32(this->iCreaterCreditValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderCombineInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OrderCombineInfo::CURRVERSION < cutVer)
    {
        cutVer = OrderCombineInfo::CURRVERSION;
    }

    /* check cutversion */
    if (OrderCombineInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iStatus */
    {
        ret = srcBuf.readInt32_l(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreaterUid */
    {
        ret = srcBuf.readInt64_l(this->llCreaterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreateTime */
    {
        ret = srcBuf.readInt64_l(this->llCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPosInfoLen */
    {
        ret = srcBuf.readInt32_l(this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPosInfo */
    {
        if (0 > this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_POSINFO_LEN < this->iPosInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPosInfo, this->iPosInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iParticularsLen */
    {
        ret = srcBuf.readInt32_l(this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (0 > this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PARTICULARS_LEN < this->iParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->iParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyType */
    {
        ret = srcBuf.readInt32_l(this->iMoneyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoneyNum */
    {
        ret = srcBuf.readInt32_l(this->iMoneyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyStata */
    {
        ret = srcBuf.readInt32_l(this->iApplyStata);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussNum */
    {
        ret = srcBuf.readInt32_l(this->iDiscussNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLatitude */
    {
        ret = srcBuf.readInt64_l(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyNum */
    {
        ret = srcBuf.readInt32_l(this->iApplyNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPictureNum */
    {
        ret = srcBuf.readInt32_l(this->iPictureNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->pictureidList */
    {
        if (0 > this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
        {
            ret = srcBuf.readInt64_l(this->pictureidList[pictureidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iAudioNum */
    {
        ret = srcBuf.readInt32_l(this->iAudioNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astAudioInfo */
    {
        if (0 > this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
        {
            ret = this->astAudioInfo[astAudioInfo_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iCreaterNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szCreaterNickname */
    {
        if (0 > this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreaterNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szCreaterNickname, this->iCreaterNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreaterBirth */
    {
        ret = srcBuf.readInt64_l(this->llCreaterBirth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterGender */
    {
        ret = srcBuf.readInt32_l(this->iCreaterGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterIntegrityLevel */
    {
        ret = srcBuf.readInt32_l(this->iCreaterIntegrityLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterCreditLevel */
    {
        ret = srcBuf.readInt32_l(this->iCreaterCreditLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreaterCreditValue */
    {
        ret = srcBuf.readInt32_l(this->iCreaterCreditValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OrderCombineInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OrderCombineInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iStatus]", "%d", this->iStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCreaterUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCreaterUid]", TDR_CPP_INT64_FORMAT, this->llCreaterUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCreateTime */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCreateTime]", TDR_CPP_INT64_FORMAT, this->llCreateTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPosInfoLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPosInfoLen]", "%d", this->iPosInfoLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szPosInfo */
    if (0 > this->iPosInfoLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_POSINFO_LEN < this->iPosInfoLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szPosInfo]", this->iPosInfoLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szPosInfo_i = 0; szPosInfo_i < this->iPosInfoLen; szPosInfo_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szPosInfo[szPosInfo_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iParticularsLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iParticularsLen]", "%d", this->iParticularsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szParticulars */
    if (0 > this->iParticularsLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_PARTICULARS_LEN < this->iParticularsLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szParticulars]", this->iParticularsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szParticulars_i = 0; szParticulars_i < this->iParticularsLen; szParticulars_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szParticulars[szParticulars_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoneyType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoneyType]", "%d", this->iMoneyType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoneyNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoneyNum]", "%d", this->iMoneyNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApplyStata */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApplyStata]", "%d", this->iApplyStata);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDiscussNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDiscussNum]", "%d", this->iDiscussNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLongitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLongitude]", TDR_CPP_INT64_FORMAT, this->llLongitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLatitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLatitude]", TDR_CPP_INT64_FORMAT, this->llLatitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApplyNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApplyNum]", "%d", this->iApplyNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPictureNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPictureNum]", "%d", this->iPictureNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->pictureidList */
    if (0 > this->iPictureNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (CREATE_ORDER_PICTURE_MAX_NUM < this->iPictureNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[pictureidList]", this->iPictureNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t pictureidList_i = 0; pictureidList_i < this->iPictureNum; pictureidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->pictureidList[pictureidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAudioNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAudioNum]", "%d", this->iAudioNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astAudioInfo */
    if (0 > this->iAudioNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (CREATE_ORDER_AUDIO_MAX_NUM < this->iAudioNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astAudioInfo_i = 0; astAudioInfo_i < this->iAudioNum; astAudioInfo_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astAudioInfo]", astAudioInfo_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astAudioInfo[astAudioInfo_i] */
        if (0 > indent)
        {
            ret = this->astAudioInfo[astAudioInfo_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astAudioInfo[astAudioInfo_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* visualize member: this->iCreaterNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreaterNickNameLen]", "%d", this->iCreaterNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szCreaterNickname */
    if (0 > this->iCreaterNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iCreaterNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szCreaterNickname]", this->iCreaterNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szCreaterNickname_i = 0; szCreaterNickname_i < this->iCreaterNickNameLen; szCreaterNickname_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szCreaterNickname[szCreaterNickname_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCreaterBirth */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCreaterBirth]", TDR_CPP_INT64_FORMAT, this->llCreaterBirth);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreaterGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreaterGender]", "%d", this->iCreaterGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreaterIntegrityLevel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreaterIntegrityLevel]", "%d", this->iCreaterIntegrityLevel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreaterCreditLevel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreaterCreditLevel]", "%d", this->iCreaterCreditLevel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreaterCreditValue */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreaterCreditValue]", "%d", this->iCreaterCreditValue);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
OrderCombineInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
OrderCombineInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientCreatedOrderBriefResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientCreatedOrderBriefResp::CURRVERSION < cutVer)
    {
        cutVer = ClientCreatedOrderBriefResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientCreatedOrderBriefResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTotalCount */
    {
        ret = destBuf.writeInt32(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderCount */
    {
        ret = destBuf.writeInt32(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astOrderCombineInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderCombineInfoList_i = 0; astOrderCombineInfoList_i < this->iOrderCount; astOrderCombineInfoList_i++)
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientCreatedOrderBriefResp::CURRVERSION < cutVer)
    {
        cutVer = ClientCreatedOrderBriefResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientCreatedOrderBriefResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTotalCount */
    {
        ret = destBuf.writeInt32_l(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderCount */
    {
        ret = destBuf.writeInt32_l(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astOrderCombineInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderCombineInfoList_i = 0; astOrderCombineInfoList_i < this->iOrderCount; astOrderCombineInfoList_i++)
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientCreatedOrderBriefResp::CURRVERSION < cutVer)
    {
        cutVer = ClientCreatedOrderBriefResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientCreatedOrderBriefResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTotalCount */
    {
        ret = srcBuf.readInt32(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderCount */
    {
        ret = srcBuf.readInt32(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astOrderCombineInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderCombineInfoList_i = 0; astOrderCombineInfoList_i < this->iOrderCount; astOrderCombineInfoList_i++)
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientCreatedOrderBriefResp::CURRVERSION < cutVer)
    {
        cutVer = ClientCreatedOrderBriefResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientCreatedOrderBriefResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTotalCount */
    {
        ret = srcBuf.readInt32_l(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderCount */
    {
        ret = srcBuf.readInt32_l(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astOrderCombineInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderCombineInfoList_i = 0; astOrderCombineInfoList_i < this->iOrderCount; astOrderCombineInfoList_i++)
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientCreatedOrderBriefResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTotalCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTotalCount]", "%d", this->iTotalCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrderCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrderCount]", "%d", this->iOrderCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astOrderCombineInfoList */
    if (0 > this->iOrderCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astOrderCombineInfoList_i = 0; astOrderCombineInfoList_i < this->iOrderCount; astOrderCombineInfoList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astOrderCombineInfoList]", astOrderCombineInfoList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astOrderCombineInfoList[astOrderCombineInfoList_i] */
        if (0 > indent)
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
ClientCreatedOrderBriefResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientCreatedOrderBriefResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientAppliedOrderBriefReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAppliedOrderBriefReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAppliedOrderBriefReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAppliedOrderBriefReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRecordCount */
    {
        ret = destBuf.writeInt32(this->iRecordCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chStatus */
    {
        ret = destBuf.writeInt8(this->chStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAppliedOrderBriefReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAppliedOrderBriefReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAppliedOrderBriefReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRecordCount */
    {
        ret = destBuf.writeInt32_l(this->iRecordCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chStatus */
    {
        ret = destBuf.writeInt8(this->chStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAppliedOrderBriefReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAppliedOrderBriefReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAppliedOrderBriefReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRecordCount */
    {
        ret = srcBuf.readInt32(this->iRecordCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chStatus */
    {
        ret = srcBuf.readInt8(this->chStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAppliedOrderBriefReq::CURRVERSION < cutVer)
    {
        cutVer = ClientAppliedOrderBriefReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAppliedOrderBriefReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRecordCount */
    {
        ret = srcBuf.readInt32_l(this->iRecordCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chStatus */
    {
        ret = srcBuf.readInt8(this->chStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llOrderId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderId]", TDR_CPP_INT64_FORMAT, this->llOrderId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRecordCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRecordCount]", "%d", this->iRecordCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chStatus]", "0x%02x", this->chStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientAppliedOrderBriefReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientAppliedOrderBriefReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientAppliedOrderBriefResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAppliedOrderBriefResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAppliedOrderBriefResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAppliedOrderBriefResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTotalCount */
    {
        ret = destBuf.writeInt32(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderCount */
    {
        ret = destBuf.writeInt32(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astOrderCombineInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderCombineInfoList_i = 0; astOrderCombineInfoList_i < this->iOrderCount; astOrderCombineInfoList_i++)
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAppliedOrderBriefResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAppliedOrderBriefResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAppliedOrderBriefResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTotalCount */
    {
        ret = destBuf.writeInt32_l(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderCount */
    {
        ret = destBuf.writeInt32_l(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astOrderCombineInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderCombineInfoList_i = 0; astOrderCombineInfoList_i < this->iOrderCount; astOrderCombineInfoList_i++)
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAppliedOrderBriefResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAppliedOrderBriefResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAppliedOrderBriefResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTotalCount */
    {
        ret = srcBuf.readInt32(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderCount */
    {
        ret = srcBuf.readInt32(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astOrderCombineInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderCombineInfoList_i = 0; astOrderCombineInfoList_i < this->iOrderCount; astOrderCombineInfoList_i++)
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientAppliedOrderBriefResp::CURRVERSION < cutVer)
    {
        cutVer = ClientAppliedOrderBriefResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientAppliedOrderBriefResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTotalCount */
    {
        ret = srcBuf.readInt32_l(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderCount */
    {
        ret = srcBuf.readInt32_l(this->iOrderCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astOrderCombineInfoList */
    {
        if (0 > this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOrderCombineInfoList_i = 0; astOrderCombineInfoList_i < this->iOrderCount; astOrderCombineInfoList_i++)
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientAppliedOrderBriefResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTotalCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTotalCount]", "%d", this->iTotalCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrderCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrderCount]", "%d", this->iOrderCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astOrderCombineInfoList */
    if (0 > this->iOrderCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_INFONUM_OF_PAG < this->iOrderCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astOrderCombineInfoList_i = 0; astOrderCombineInfoList_i < this->iOrderCount; astOrderCombineInfoList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astOrderCombineInfoList]", astOrderCombineInfoList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astOrderCombineInfoList[astOrderCombineInfoList_i] */
        if (0 > indent)
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astOrderCombineInfoList[astOrderCombineInfoList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
ClientAppliedOrderBriefResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientAppliedOrderBriefResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
DiscussInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
DiscussInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
DiscussInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
DiscussInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || DiscussInfo::CURRVERSION < cutVer)
    {
        cutVer = DiscussInfo::CURRVERSION;
    }

    /* check cutversion */
    if (DiscussInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTime */
    {
        ret = destBuf.writeInt32(this->iTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iContentLen */
    {
        ret = destBuf.writeInt32(this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szContent */
    {
        if (0 > this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_CONTENT_LEN < this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szContent, this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
DiscussInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || DiscussInfo::CURRVERSION < cutVer)
    {
        cutVer = DiscussInfo::CURRVERSION;
    }

    /* check cutversion */
    if (DiscussInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTime */
    {
        ret = destBuf.writeInt32_l(this->iTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iContentLen */
    {
        ret = destBuf.writeInt32_l(this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szContent */
    {
        if (0 > this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_CONTENT_LEN < this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szContent, this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
DiscussInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
DiscussInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
DiscussInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || DiscussInfo::CURRVERSION < cutVer)
    {
        cutVer = DiscussInfo::CURRVERSION;
    }

    /* check cutversion */
    if (DiscussInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTime */
    {
        ret = srcBuf.readInt32(this->iTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iContentLen */
    {
        ret = srcBuf.readInt32(this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szContent */
    {
        if (0 > this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_CONTENT_LEN < this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szContent, this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
DiscussInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || DiscussInfo::CURRVERSION < cutVer)
    {
        cutVer = DiscussInfo::CURRVERSION;
    }

    /* check cutversion */
    if (DiscussInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTime */
    {
        ret = srcBuf.readInt32_l(this->iTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iContentLen */
    {
        ret = srcBuf.readInt32_l(this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szContent */
    {
        if (0 > this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_CONTENT_LEN < this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szContent, this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
DiscussInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
DiscussInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTime */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTime]", "%d", this->iTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iContentLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iContentLen]", "%d", this->iContentLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szContent */
    if (0 > this->iContentLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_DISCUSS_CONTENT_LEN < this->iContentLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szContent]", this->iContentLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szContent_i = 0; szContent_i < this->iContentLen; szContent_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szContent[szContent_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
DiscussInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
DiscussInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectDiscuss::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llDiscussPagid */
    {
        ret = destBuf.writeInt64(this->llDiscussPagid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectDiscuss::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llDiscussPagid */
    {
        ret = destBuf.writeInt64_l(this->llDiscussPagid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectDiscuss::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llDiscussPagid */
    {
        ret = srcBuf.readInt64(this->llDiscussPagid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectDiscuss::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llDiscussPagid */
    {
        ret = srcBuf.readInt64_l(this->llDiscussPagid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectDiscuss::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llDiscussPagid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llDiscussPagid]", TDR_CPP_INT64_FORMAT, this->llDiscussPagid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectDiscuss::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectDiscuss::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectDiscuss::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussInpagNum */
    {
        ret = destBuf.writeInt32(this->iDiscussInpagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astDiscussInfoList */
    {
        if (0 > this->iDiscussInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_NUM_ONC_PAG < this->iDiscussInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astDiscussInfoList_i = 0; astDiscussInfoList_i < this->iDiscussInpagNum; astDiscussInfoList_i++)
        {
            ret = this->astDiscussInfoList[astDiscussInfoList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectDiscuss::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussInpagNum */
    {
        ret = destBuf.writeInt32_l(this->iDiscussInpagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astDiscussInfoList */
    {
        if (0 > this->iDiscussInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_NUM_ONC_PAG < this->iDiscussInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astDiscussInfoList_i = 0; astDiscussInfoList_i < this->iDiscussInpagNum; astDiscussInfoList_i++)
        {
            ret = this->astDiscussInfoList[astDiscussInfoList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectDiscuss::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussInpagNum */
    {
        ret = srcBuf.readInt32(this->iDiscussInpagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astDiscussInfoList */
    {
        if (0 > this->iDiscussInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_NUM_ONC_PAG < this->iDiscussInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astDiscussInfoList_i = 0; astDiscussInfoList_i < this->iDiscussInpagNum; astDiscussInfoList_i++)
        {
            ret = this->astDiscussInfoList[astDiscussInfoList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectDiscuss::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussInpagNum */
    {
        ret = srcBuf.readInt32_l(this->iDiscussInpagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astDiscussInfoList */
    {
        if (0 > this->iDiscussInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_NUM_ONC_PAG < this->iDiscussInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astDiscussInfoList_i = 0; astDiscussInfoList_i < this->iDiscussInpagNum; astDiscussInfoList_i++)
        {
            ret = this->astDiscussInfoList[astDiscussInfoList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectDiscuss::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDiscussInpagNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDiscussInpagNum]", "%d", this->iDiscussInpagNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astDiscussInfoList */
    if (0 > this->iDiscussInpagNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_DISCUSS_NUM_ONC_PAG < this->iDiscussInpagNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astDiscussInfoList_i = 0; astDiscussInfoList_i < this->iDiscussInpagNum; astDiscussInfoList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astDiscussInfoList]", astDiscussInfoList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astDiscussInfoList[astDiscussInfoList_i] */
        if (0 > indent)
        {
            ret = this->astDiscussInfoList[astDiscussInfoList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astDiscussInfoList[astDiscussInfoList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectDiscuss::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectDiscuss::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCreateDiscuss::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCreateDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCreateDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iContentLen */
    {
        ret = destBuf.writeInt32(this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szContent */
    {
        if (0 > this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_CONTENT_LEN < this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szContent, this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCreateDiscuss::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCreateDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCreateDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iContentLen */
    {
        ret = destBuf.writeInt32_l(this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szContent */
    {
        if (0 > this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_CONTENT_LEN < this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szContent, this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCreateDiscuss::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCreateDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCreateDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iContentLen */
    {
        ret = srcBuf.readInt32(this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szContent */
    {
        if (0 > this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_CONTENT_LEN < this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szContent, this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCreateDiscuss::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCreateDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCreateDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iContentLen */
    {
        ret = srcBuf.readInt32_l(this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szContent */
    {
        if (0 > this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_CONTENT_LEN < this->iContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szContent, this->iContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCreateDiscuss::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iContentLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iContentLen]", "%d", this->iContentLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szContent */
    if (0 > this->iContentLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_DISCUSS_CONTENT_LEN < this->iContentLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szContent]", this->iContentLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szContent_i = 0; szContent_i < this->iContentLen; szContent_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szContent[szContent_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeCreateDiscuss::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeCreateDiscuss::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCreateDiscuss::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCreateDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCreateDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCreateDiscuss::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCreateDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCreateDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCreateDiscuss::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCreateDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCreateDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCreateDiscuss::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCreateDiscuss::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCreateDiscuss::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCreateDiscuss::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientCreateDiscuss::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientCreateDiscuss::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectPhotoWall::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectPhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectPhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectPhotoWall::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectPhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectPhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectPhotoWall::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectPhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectPhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectPhotoWall::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectPhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectPhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectPhotoWall::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectPhotoWall::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectPhotoWall::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectPhotoWall::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectPhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectPhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPhotoCount */
    {
        ret = destBuf.writeInt32(this->iPhotoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->photoWall */
    {
        if (0 > this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PHOTO_WALL_MAX_COUNT < this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t photoWall_i = 0; photoWall_i < this->iPhotoCount; photoWall_i++)
        {
            ret = destBuf.writeInt64(this->photoWall[photoWall_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectPhotoWall::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectPhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectPhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPhotoCount */
    {
        ret = destBuf.writeInt32_l(this->iPhotoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->photoWall */
    {
        if (0 > this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PHOTO_WALL_MAX_COUNT < this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t photoWall_i = 0; photoWall_i < this->iPhotoCount; photoWall_i++)
        {
            ret = destBuf.writeInt64_l(this->photoWall[photoWall_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectPhotoWall::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectPhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectPhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPhotoCount */
    {
        ret = srcBuf.readInt32(this->iPhotoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->photoWall */
    {
        if (0 > this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PHOTO_WALL_MAX_COUNT < this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t photoWall_i = 0; photoWall_i < this->iPhotoCount; photoWall_i++)
        {
            ret = srcBuf.readInt64(this->photoWall[photoWall_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectPhotoWall::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectPhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectPhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPhotoCount */
    {
        ret = srcBuf.readInt32_l(this->iPhotoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->photoWall */
    {
        if (0 > this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PHOTO_WALL_MAX_COUNT < this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t photoWall_i = 0; photoWall_i < this->iPhotoCount; photoWall_i++)
        {
            ret = srcBuf.readInt64_l(this->photoWall[photoWall_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectPhotoWall::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPhotoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPhotoCount]", "%d", this->iPhotoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->photoWall */
    if (0 > this->iPhotoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_PHOTO_WALL_MAX_COUNT < this->iPhotoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[photoWall]", this->iPhotoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t photoWall_i = 0; photoWall_i < this->iPhotoCount; photoWall_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->photoWall[photoWall_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectPhotoWall::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectPhotoWall::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdatePhotoWall::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdatePhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdatePhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iPhotoCount */
    {
        ret = destBuf.writeInt32(this->iPhotoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->photoWall */
    {
        if (0 > this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PHOTO_WALL_MAX_COUNT < this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t photoWall_i = 0; photoWall_i < this->iPhotoCount; photoWall_i++)
        {
            ret = destBuf.writeInt64(this->photoWall[photoWall_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdatePhotoWall::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdatePhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdatePhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iPhotoCount */
    {
        ret = destBuf.writeInt32_l(this->iPhotoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->photoWall */
    {
        if (0 > this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PHOTO_WALL_MAX_COUNT < this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t photoWall_i = 0; photoWall_i < this->iPhotoCount; photoWall_i++)
        {
            ret = destBuf.writeInt64_l(this->photoWall[photoWall_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdatePhotoWall::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdatePhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdatePhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iPhotoCount */
    {
        ret = srcBuf.readInt32(this->iPhotoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->photoWall */
    {
        if (0 > this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PHOTO_WALL_MAX_COUNT < this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t photoWall_i = 0; photoWall_i < this->iPhotoCount; photoWall_i++)
        {
            ret = srcBuf.readInt64(this->photoWall[photoWall_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdatePhotoWall::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdatePhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdatePhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iPhotoCount */
    {
        ret = srcBuf.readInt32_l(this->iPhotoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->photoWall */
    {
        if (0 > this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_PHOTO_WALL_MAX_COUNT < this->iPhotoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t photoWall_i = 0; photoWall_i < this->iPhotoCount; photoWall_i++)
        {
            ret = srcBuf.readInt64_l(this->photoWall[photoWall_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdatePhotoWall::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iPhotoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPhotoCount]", "%d", this->iPhotoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->photoWall */
    if (0 > this->iPhotoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_PHOTO_WALL_MAX_COUNT < this->iPhotoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[photoWall]", this->iPhotoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t photoWall_i = 0; photoWall_i < this->iPhotoCount; photoWall_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->photoWall[photoWall_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeUpdatePhotoWall::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeUpdatePhotoWall::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdatePhotoWall::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdatePhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdatePhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdatePhotoWall::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdatePhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdatePhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdatePhotoWall::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdatePhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdatePhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdatePhotoWall::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdatePhotoWall::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdatePhotoWall::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdatePhotoWall::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientUpdatePhotoWall::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientUpdatePhotoWall::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateBirthdayReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBirthdayReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBirthdayReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBirthdayReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBirthdayReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBirthdayReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBirthdayReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBirthdayReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBirthdayReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBirthdayReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBirthdayReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBirthdayReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBirthdayReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llBirthday */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llBirthday]", TDR_CPP_INT64_FORMAT, this->llBirthday);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateBirthdayReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateBirthdayReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateBirthdayResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBirthdayResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBirthdayResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBirthdayResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBirthdayResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBirthdayResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBirthdayResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBirthdayResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBirthdayResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBirthdayResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateBirthdayResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateBirthdayResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateBirthdayResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateBirthdayResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateBirthdayResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateBirthdayResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateNickNameReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateNickNameReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateNickNameReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateNickNameReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateNickNameReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateNickNameReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateNickNameReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateNickNameReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateNickNameReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateNickNameReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateNickNameReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateNickNameReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateNickNameReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickName */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickName]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickName_i = 0; szNickName_i < this->iNickNameLen; szNickName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickName[szNickName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateNickNameReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateNickNameReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateNickNameResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateNickNameResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateNickNameResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateNickNameResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateNickNameResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateNickNameResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateNickNameResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateNickNameResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateNickNameResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateNickNameResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateNickNameResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateNickNameResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateNickNameResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateNickNameResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateNickNameResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateNickNameResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateOccupationReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateOccupationReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateOccupationReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateOccupationReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateOccupationReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateOccupationReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateOccupationReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateOccupationReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateOccupationReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateOccupationReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateOccupationReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateOccupationReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateOccupationReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iOccupation */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOccupation]", "%d", this->iOccupation);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateOccupationReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateOccupationReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateOccupationResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateOccupationResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateOccupationResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateOccupationResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateOccupationResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateOccupationResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateOccupationResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateOccupationResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateOccupationResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateOccupationResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateOccupationResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateOccupationResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateOccupationResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateOccupationResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateOccupationResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateOccupationResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateResidentionReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateResidentionReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateResidentionReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateResidentionReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResidention */
    {
        ret = destBuf.writeInt32(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateResidentionReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateResidentionReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateResidentionReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResidention */
    {
        ret = destBuf.writeInt32_l(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateResidentionReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateResidentionReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateResidentionReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResidention */
    {
        ret = srcBuf.readInt32(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateResidentionReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateResidentionReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateResidentionReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResidention */
    {
        ret = srcBuf.readInt32_l(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResidention */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidention]", "%d", this->iResidention);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateResidentionReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateResidentionReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateResidentionResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateResidentionResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateResidentionResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateResidentionResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateResidentionResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateResidentionResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateResidentionResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateResidentionResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateResidentionResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateResidentionResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateResidentionResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateResidentionResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateResidentionResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateResidentionResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateResidentionResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateResidentionResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateSignatureReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateSignatureReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateSignatureReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateSignatureReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateSignatureReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateSignatureReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateSignatureReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateSignatureReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateSignatureReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateSignatureReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateSignatureReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateSignatureReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateSignatureReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iSignatureLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSignatureLen]", "%d", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szSignature */
    if (0 > this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szSignature]", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szSignature_i = 0; szSignature_i < this->iSignatureLen; szSignature_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szSignature[szSignature_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateSignatureReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateSignatureReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateSignatureResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateSignatureResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateSignatureResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateSignatureResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateSignatureResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateSignatureResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateSignatureResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateSignatureResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateSignatureResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateSignatureResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateSignatureResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateSignatureResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateSignatureResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateSignatureResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateSignatureResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateSignatureResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdatePortraitReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdatePortraitReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdatePortraitReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdatePortraitReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdatePortraitReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdatePortraitReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdatePortraitReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdatePortraitReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdatePortraitReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdatePortraitReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdatePortraitReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdatePortraitReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdatePortraitReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llPortrait */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPortrait]", TDR_CPP_INT64_FORMAT, this->llPortrait);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdatePortraitReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdatePortraitReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdatePortraitResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdatePortraitResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdatePortraitResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdatePortraitResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdatePortraitResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdatePortraitResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdatePortraitResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdatePortraitResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdatePortraitResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdatePortraitResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdatePortraitResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdatePortraitResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdatePortraitResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdatePortraitResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdatePortraitResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdatePortraitResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateGenderReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateGenderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateGenderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateGenderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateGenderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateGenderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateGenderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateGenderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateGenderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateGenderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateGenderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateGenderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateGenderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->chGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chGender]", "0x%02x", this->chGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateGenderReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateGenderReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientUpdateGenderResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateGenderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateGenderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateGenderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateGenderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateGenderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateGenderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateGenderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateGenderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateGenderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientUpdateGenderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientUpdateGenderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientUpdateGenderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientUpdateGenderResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientUpdateGenderResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientUpdateGenderResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CG_UpdateResidentionDetail_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CG_UpdateResidentionDetail_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CG_UpdateResidentionDetail_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CG_UpdateResidentionDetail_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CG_UpdateResidentionDetail_Req::CURRVERSION < cutVer)
    {
        cutVer = CG_UpdateResidentionDetail_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CG_UpdateResidentionDetail_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResidentionDetailLen */
    {
        ret = destBuf.writeInt32(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CG_UpdateResidentionDetail_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CG_UpdateResidentionDetail_Req::CURRVERSION < cutVer)
    {
        cutVer = CG_UpdateResidentionDetail_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CG_UpdateResidentionDetail_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResidentionDetailLen */
    {
        ret = destBuf.writeInt32_l(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CG_UpdateResidentionDetail_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CG_UpdateResidentionDetail_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CG_UpdateResidentionDetail_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CG_UpdateResidentionDetail_Req::CURRVERSION < cutVer)
    {
        cutVer = CG_UpdateResidentionDetail_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CG_UpdateResidentionDetail_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResidentionDetailLen */
    {
        ret = srcBuf.readInt32(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CG_UpdateResidentionDetail_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CG_UpdateResidentionDetail_Req::CURRVERSION < cutVer)
    {
        cutVer = CG_UpdateResidentionDetail_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CG_UpdateResidentionDetail_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResidentionDetailLen */
    {
        ret = srcBuf.readInt32_l(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CG_UpdateResidentionDetail_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CG_UpdateResidentionDetail_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResidentionDetailLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidentionDetailLen]", "%d", this->iResidentionDetailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szResidentionDetail */
    if (0 > this->iResidentionDetailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szResidentionDetail]", this->iResidentionDetailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szResidentionDetail_i = 0; szResidentionDetail_i < this->iResidentionDetailLen; szResidentionDetail_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szResidentionDetail[szResidentionDetail_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CG_UpdateResidentionDetail_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CG_UpdateResidentionDetail_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GC_UpdateResidentionDetail_Resp::CURRVERSION < cutVer)
    {
        cutVer = GC_UpdateResidentionDetail_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (GC_UpdateResidentionDetail_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GC_UpdateResidentionDetail_Resp::CURRVERSION < cutVer)
    {
        cutVer = GC_UpdateResidentionDetail_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (GC_UpdateResidentionDetail_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GC_UpdateResidentionDetail_Resp::CURRVERSION < cutVer)
    {
        cutVer = GC_UpdateResidentionDetail_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (GC_UpdateResidentionDetail_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GC_UpdateResidentionDetail_Resp::CURRVERSION < cutVer)
    {
        cutVer = GC_UpdateResidentionDetail_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (GC_UpdateResidentionDetail_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GC_UpdateResidentionDetail_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
GC_UpdateResidentionDetail_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
GC_UpdateResidentionDetail_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeRegisterTradeinfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeRegisterTradeinfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeRegisterTradeinfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPromoterUid */
    {
        ret = destBuf.writeInt64(this->llPromoterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromoteFlag */
    {
        ret = destBuf.writeInt32(this->iPromoteFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeRegisterTradeinfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeRegisterTradeinfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeRegisterTradeinfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPromoterUid */
    {
        ret = destBuf.writeInt64_l(this->llPromoterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromoteFlag */
    {
        ret = destBuf.writeInt32_l(this->iPromoteFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeRegisterTradeinfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeRegisterTradeinfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeRegisterTradeinfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPromoterUid */
    {
        ret = srcBuf.readInt64(this->llPromoterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromoteFlag */
    {
        ret = srcBuf.readInt32(this->iPromoteFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeRegisterTradeinfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeRegisterTradeinfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeRegisterTradeinfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPromoterUid */
    {
        ret = srcBuf.readInt64_l(this->llPromoterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromoteFlag */
    {
        ret = srcBuf.readInt32_l(this->iPromoteFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeRegisterTradeinfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPromoterUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPromoterUid]", TDR_CPP_INT64_FORMAT, this->llPromoterUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPromoteFlag */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPromoteFlag]", "%d", this->iPromoteFlag);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeRegisterTradeinfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeRegisterTradeinfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientRegisterTradeinfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientRegisterTradeinfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientRegisterTradeinfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientRegisterTradeinfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientRegisterTradeinfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientRegisterTradeinfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientRegisterTradeinfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientRegisterTradeinfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientRegisterTradeinfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientRegisterTradeinfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientRegisterTradeinfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientRegisterTradeinfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientRegisterTradeinfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientRegisterTradeinfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientRegisterTradeinfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AT_OnlineUserCount_Ntf::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AT_OnlineUserCount_Ntf::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AT_OnlineUserCount_Ntf::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AT_OnlineUserCount_Ntf::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AT_OnlineUserCount_Ntf::CURRVERSION < cutVer)
    {
        cutVer = AT_OnlineUserCount_Ntf::CURRVERSION;
    }

    /* check cutversion */
    if (AT_OnlineUserCount_Ntf::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iTbusLen */
    {
        ret = destBuf.writeInt32(this->iTbusLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szTbus */
    {
        ret = destBuf.writeBytes(&this->szTbus, 20);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iChannel */
    {
        ret = destBuf.writeInt32(this->iChannel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iUserCount */
    {
        ret = destBuf.writeInt32(this->iUserCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AT_OnlineUserCount_Ntf::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AT_OnlineUserCount_Ntf::CURRVERSION < cutVer)
    {
        cutVer = AT_OnlineUserCount_Ntf::CURRVERSION;
    }

    /* check cutversion */
    if (AT_OnlineUserCount_Ntf::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iTbusLen */
    {
        ret = destBuf.writeInt32_l(this->iTbusLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szTbus */
    {
        ret = destBuf.writeBytes(&this->szTbus, 20);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iChannel */
    {
        ret = destBuf.writeInt32_l(this->iChannel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iUserCount */
    {
        ret = destBuf.writeInt32_l(this->iUserCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AT_OnlineUserCount_Ntf::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AT_OnlineUserCount_Ntf::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AT_OnlineUserCount_Ntf::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AT_OnlineUserCount_Ntf::CURRVERSION < cutVer)
    {
        cutVer = AT_OnlineUserCount_Ntf::CURRVERSION;
    }

    /* check cutversion */
    if (AT_OnlineUserCount_Ntf::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iTbusLen */
    {
        ret = srcBuf.readInt32(this->iTbusLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szTbus */
    {
        ret = srcBuf.readBytes(&this->szTbus, 20);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iChannel */
    {
        ret = srcBuf.readInt32(this->iChannel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iUserCount */
    {
        ret = srcBuf.readInt32(this->iUserCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AT_OnlineUserCount_Ntf::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AT_OnlineUserCount_Ntf::CURRVERSION < cutVer)
    {
        cutVer = AT_OnlineUserCount_Ntf::CURRVERSION;
    }

    /* check cutversion */
    if (AT_OnlineUserCount_Ntf::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iTbusLen */
    {
        ret = srcBuf.readInt32_l(this->iTbusLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szTbus */
    {
        ret = srcBuf.readBytes(&this->szTbus, 20);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iChannel */
    {
        ret = srcBuf.readInt32_l(this->iChannel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iUserCount */
    {
        ret = srcBuf.readInt32_l(this->iUserCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
AT_OnlineUserCount_Ntf::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AT_OnlineUserCount_Ntf::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iTbusLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTbusLen]", "%d", this->iTbusLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szTbus */
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szTbus]", 20);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (unsigned szTbus_i = 0; szTbus_i < 20; szTbus_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szTbus[szTbus_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iChannel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iChannel]", "%d", this->iChannel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iUserCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iUserCount]", "%d", this->iUserCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AT_OnlineUserCount_Ntf::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AT_OnlineUserCount_Ntf::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdateArgue::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdateArgue::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdateArgue::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iScore */
    {
        ret = destBuf.writeInt32(this->iScore);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdateArgue::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdateArgue::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdateArgue::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iScore */
    {
        ret = destBuf.writeInt32_l(this->iScore);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdateArgue::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdateArgue::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdateArgue::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iScore */
    {
        ret = srcBuf.readInt32(this->iScore);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdateArgue::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdateArgue::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdateArgue::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iScore */
    {
        ret = srcBuf.readInt32_l(this->iScore);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateArgue::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iScore */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iScore]", "%d", this->iScore);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeUpdateArgue::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeUpdateArgue::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdateArgue::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdateArgue::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdateArgue::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdateArgue::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdateArgue::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdateArgue::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdateArgue::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdateArgue::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdateArgue::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdateArgue::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdateArgue::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdateArgue::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateArgue::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientUpdateArgue::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientUpdateArgue::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectTradeUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectTradeUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectTradeUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectTradeUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectTradeUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectTradeUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectTradeUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectTradeUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectTradeUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectTradeUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectTradeUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectTradeUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTradeUserInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectTradeUserInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectTradeUserInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
UserInfoSimp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
UserInfoSimp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
UserInfoSimp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
UserInfoSimp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || UserInfoSimp::CURRVERSION < cutVer)
    {
        cutVer = UserInfoSimp::CURRVERSION;
    }

    /* check cutversion */
    if (UserInfoSimp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_integrity */
    {
        ret = destBuf.writeInt32(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIntegrity_level */
    {
        ret = destBuf.writeInt32(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_youwo */
    {
        ret = destBuf.writeInt32(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_game */
    {
        ret = destBuf.writeInt32(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_validate */
    {
        ret = destBuf.writeInt32(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_level */
    {
        ret = destBuf.writeInt32(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_buy_time */
    {
        ret = destBuf.writeInt32(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_deadline */
    {
        ret = destBuf.writeInt32(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPhoto_count */
    {
        ret = destBuf.writeInt32(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCert_flags */
    {
        ret = destBuf.writeInt64(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSincerity_value */
    {
        ret = destBuf.writeInt32(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBusiness_value */
    {
        ret = destBuf.writeInt32(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAuthentication_value */
    {
        ret = destBuf.writeInt32(this->iAuthentication_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCharm_value */
    {
        ret = destBuf.writeInt32(this->iCharm_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPraise */
    {
        ret = destBuf.writeInt32(this->iPraise);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAttended */
    {
        ret = destBuf.writeInt32(this->iAttended);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llService */
    {
        ret = destBuf.writeInt64(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVisitor_count */
    {
        ret = destBuf.writeInt32(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_num */
    {
        ret = destBuf.writeInt32(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_pag_num */
    {
        ret = destBuf.writeInt32(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llExp */
    {
        ret = destBuf.writeInt64(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLevel */
    {
        ret = destBuf.writeInt32(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPraise_count */
    {
        ret = destBuf.writeInt32(this->iPraise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBad_count */
    {
        ret = destBuf.writeInt32(this->iBad_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRecharge */
    {
        ret = destBuf.writeInt32(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGuarantee_count */
    {
        ret = destBuf.writeInt32(this->iGuarantee_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromise_count */
    {
        ret = destBuf.writeInt32(this->iPromise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_level */
    {
        ret = destBuf.writeInt32(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_limit */
    {
        ret = destBuf.writeInt32(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOffline_deposit_limit */
    {
        ret = destBuf.writeInt32(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_create_fnum */
    {
        ret = destBuf.writeInt32(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_apply_fnum */
    {
        ret = destBuf.writeInt32(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llInterest */
    {
        ret = destBuf.writeInt64(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
UserInfoSimp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || UserInfoSimp::CURRVERSION < cutVer)
    {
        cutVer = UserInfoSimp::CURRVERSION;
    }

    /* check cutversion */
    if (UserInfoSimp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_integrity */
    {
        ret = destBuf.writeInt32_l(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIntegrity_level */
    {
        ret = destBuf.writeInt32_l(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_youwo */
    {
        ret = destBuf.writeInt32_l(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_game */
    {
        ret = destBuf.writeInt32_l(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_validate */
    {
        ret = destBuf.writeInt32_l(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_level */
    {
        ret = destBuf.writeInt32_l(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_buy_time */
    {
        ret = destBuf.writeInt32_l(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_deadline */
    {
        ret = destBuf.writeInt32_l(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPhoto_count */
    {
        ret = destBuf.writeInt32_l(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCert_flags */
    {
        ret = destBuf.writeInt64_l(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSincerity_value */
    {
        ret = destBuf.writeInt32_l(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBusiness_value */
    {
        ret = destBuf.writeInt32_l(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAuthentication_value */
    {
        ret = destBuf.writeInt32_l(this->iAuthentication_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCharm_value */
    {
        ret = destBuf.writeInt32_l(this->iCharm_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPraise */
    {
        ret = destBuf.writeInt32_l(this->iPraise);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAttended */
    {
        ret = destBuf.writeInt32_l(this->iAttended);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llService */
    {
        ret = destBuf.writeInt64_l(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVisitor_count */
    {
        ret = destBuf.writeInt32_l(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_num */
    {
        ret = destBuf.writeInt32_l(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_pag_num */
    {
        ret = destBuf.writeInt32_l(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llExp */
    {
        ret = destBuf.writeInt64_l(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLevel */
    {
        ret = destBuf.writeInt32_l(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPraise_count */
    {
        ret = destBuf.writeInt32_l(this->iPraise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBad_count */
    {
        ret = destBuf.writeInt32_l(this->iBad_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRecharge */
    {
        ret = destBuf.writeInt32_l(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGuarantee_count */
    {
        ret = destBuf.writeInt32_l(this->iGuarantee_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromise_count */
    {
        ret = destBuf.writeInt32_l(this->iPromise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_level */
    {
        ret = destBuf.writeInt32_l(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_limit */
    {
        ret = destBuf.writeInt32_l(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOffline_deposit_limit */
    {
        ret = destBuf.writeInt32_l(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_create_fnum */
    {
        ret = destBuf.writeInt32_l(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_apply_fnum */
    {
        ret = destBuf.writeInt32_l(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llInterest */
    {
        ret = destBuf.writeInt64_l(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
UserInfoSimp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
UserInfoSimp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
UserInfoSimp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || UserInfoSimp::CURRVERSION < cutVer)
    {
        cutVer = UserInfoSimp::CURRVERSION;
    }

    /* check cutversion */
    if (UserInfoSimp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_integrity */
    {
        ret = srcBuf.readInt32(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIntegrity_level */
    {
        ret = srcBuf.readInt32(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_youwo */
    {
        ret = srcBuf.readInt32(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_game */
    {
        ret = srcBuf.readInt32(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_validate */
    {
        ret = srcBuf.readInt32(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_level */
    {
        ret = srcBuf.readInt32(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_buy_time */
    {
        ret = srcBuf.readInt32(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_deadline */
    {
        ret = srcBuf.readInt32(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPhoto_count */
    {
        ret = srcBuf.readInt32(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCert_flags */
    {
        ret = srcBuf.readInt64(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSincerity_value */
    {
        ret = srcBuf.readInt32(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBusiness_value */
    {
        ret = srcBuf.readInt32(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAuthentication_value */
    {
        ret = srcBuf.readInt32(this->iAuthentication_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCharm_value */
    {
        ret = srcBuf.readInt32(this->iCharm_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPraise */
    {
        ret = srcBuf.readInt32(this->iPraise);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAttended */
    {
        ret = srcBuf.readInt32(this->iAttended);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llService */
    {
        ret = srcBuf.readInt64(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVisitor_count */
    {
        ret = srcBuf.readInt32(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_num */
    {
        ret = srcBuf.readInt32(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_pag_num */
    {
        ret = srcBuf.readInt32(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llExp */
    {
        ret = srcBuf.readInt64(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLevel */
    {
        ret = srcBuf.readInt32(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPraise_count */
    {
        ret = srcBuf.readInt32(this->iPraise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBad_count */
    {
        ret = srcBuf.readInt32(this->iBad_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRecharge */
    {
        ret = srcBuf.readInt32(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGuarantee_count */
    {
        ret = srcBuf.readInt32(this->iGuarantee_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromise_count */
    {
        ret = srcBuf.readInt32(this->iPromise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_level */
    {
        ret = srcBuf.readInt32(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_limit */
    {
        ret = srcBuf.readInt32(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOffline_deposit_limit */
    {
        ret = srcBuf.readInt32(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_create_fnum */
    {
        ret = srcBuf.readInt32(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_apply_fnum */
    {
        ret = srcBuf.readInt32(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llInterest */
    {
        ret = srcBuf.readInt64(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
UserInfoSimp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || UserInfoSimp::CURRVERSION < cutVer)
    {
        cutVer = UserInfoSimp::CURRVERSION;
    }

    /* check cutversion */
    if (UserInfoSimp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_integrity */
    {
        ret = srcBuf.readInt32_l(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIntegrity_level */
    {
        ret = srcBuf.readInt32_l(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_youwo */
    {
        ret = srcBuf.readInt32_l(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_game */
    {
        ret = srcBuf.readInt32_l(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_validate */
    {
        ret = srcBuf.readInt32_l(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_level */
    {
        ret = srcBuf.readInt32_l(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_buy_time */
    {
        ret = srcBuf.readInt32_l(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_deadline */
    {
        ret = srcBuf.readInt32_l(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPhoto_count */
    {
        ret = srcBuf.readInt32_l(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCert_flags */
    {
        ret = srcBuf.readInt64_l(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSincerity_value */
    {
        ret = srcBuf.readInt32_l(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBusiness_value */
    {
        ret = srcBuf.readInt32_l(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAuthentication_value */
    {
        ret = srcBuf.readInt32_l(this->iAuthentication_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCharm_value */
    {
        ret = srcBuf.readInt32_l(this->iCharm_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPraise */
    {
        ret = srcBuf.readInt32_l(this->iPraise);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAttended */
    {
        ret = srcBuf.readInt32_l(this->iAttended);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llService */
    {
        ret = srcBuf.readInt64_l(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVisitor_count */
    {
        ret = srcBuf.readInt32_l(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_num */
    {
        ret = srcBuf.readInt32_l(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_pag_num */
    {
        ret = srcBuf.readInt32_l(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llExp */
    {
        ret = srcBuf.readInt64_l(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLevel */
    {
        ret = srcBuf.readInt32_l(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPraise_count */
    {
        ret = srcBuf.readInt32_l(this->iPraise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBad_count */
    {
        ret = srcBuf.readInt32_l(this->iBad_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRecharge */
    {
        ret = srcBuf.readInt32_l(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGuarantee_count */
    {
        ret = srcBuf.readInt32_l(this->iGuarantee_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromise_count */
    {
        ret = srcBuf.readInt32_l(this->iPromise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_level */
    {
        ret = srcBuf.readInt32_l(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_limit */
    {
        ret = srcBuf.readInt32_l(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOffline_deposit_limit */
    {
        ret = srcBuf.readInt32_l(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_create_fnum */
    {
        ret = srcBuf.readInt32_l(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_apply_fnum */
    {
        ret = srcBuf.readInt32_l(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llInterest */
    {
        ret = srcBuf.readInt64_l(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
UserInfoSimp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
UserInfoSimp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_integrity */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_integrity]", "%d", this->iGold_integrity);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iIntegrity_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iIntegrity_level]", "%d", this->iIntegrity_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_youwo */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_youwo]", "%d", this->iGold_youwo);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_game */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_game]", "%d", this->iGold_game);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_validate */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_validate]", "%d", this->iGold_validate);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVip_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVip_level]", "%d", this->iVip_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVip_buy_time */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVip_buy_time]", "%d", this->iVip_buy_time);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVip_deadline */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVip_deadline]", "%d", this->iVip_deadline);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPhoto_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPhoto_count]", "%d", this->iPhoto_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCert_flags */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCert_flags]", TDR_CPP_INT64_FORMAT, this->llCert_flags);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSincerity_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSincerity_value]", "%d", this->iSincerity_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBusiness_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBusiness_value]", "%d", this->iBusiness_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAuthentication_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAuthentication_value]", "%d", this->iAuthentication_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCharm_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCharm_value]", "%d", this->iCharm_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPraise */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPraise]", "%d", this->iPraise);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAttended */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAttended]", "%d", this->iAttended);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llService */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llService]", TDR_CPP_INT64_FORMAT, this->llService);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVisitor_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVisitor_count]", "%d", this->iVisitor_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGifts_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGifts_num]", "%d", this->iGifts_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGifts_pag_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGifts_pag_num]", "%d", this->iGifts_pag_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llExp */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llExp]", TDR_CPP_INT64_FORMAT, this->llExp);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iLevel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLevel]", "%d", this->iLevel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPraise_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPraise_count]", "%d", this->iPraise_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBad_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBad_count]", "%d", this->iBad_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRecharge */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRecharge]", "%d", this->iRecharge);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGuarantee_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGuarantee_count]", "%d", this->iGuarantee_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPromise_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPromise_count]", "%d", this->iPromise_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDeposit_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDeposit_level]", "%d", this->iDeposit_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDeposit_limit */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDeposit_limit]", "%d", this->iDeposit_limit);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOffline_deposit_limit */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOffline_deposit_limit]", "%d", this->iOffline_deposit_limit);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrder_create_fnum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrder_create_fnum]", "%d", this->iOrder_create_fnum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrder_apply_fnum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrder_apply_fnum]", "%d", this->iOrder_apply_fnum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llInterest */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llInterest]", TDR_CPP_INT64_FORMAT, this->llInterest);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
UserInfoSimp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
UserInfoSimp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectTradeUserInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectTradeUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectTradeUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stUserInfoSimp */
    {
        ret = this->stUserInfoSimp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectTradeUserInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectTradeUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectTradeUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stUserInfoSimp */
    {
        ret = this->stUserInfoSimp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectTradeUserInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectTradeUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectTradeUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stUserInfoSimp */
    {
        ret = this->stUserInfoSimp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectTradeUserInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectTradeUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectTradeUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stUserInfoSimp */
    {
        ret = this->stUserInfoSimp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTradeUserInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stUserInfoSimp */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stUserInfoSimp]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stUserInfoSimp */
    if (0 > indent)
    {
        ret = this->stUserInfoSimp.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stUserInfoSimp.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectTradeUserInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectTradeUserInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeUpdateService::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateService::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateService::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateService::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdateService::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdateService::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdateService::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llService */
    {
        ret = destBuf.writeInt64(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateService::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdateService::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdateService::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdateService::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llService */
    {
        ret = destBuf.writeInt64_l(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateService::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateService::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateService::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdateService::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdateService::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdateService::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llService */
    {
        ret = srcBuf.readInt64(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateService::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpdateService::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpdateService::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpdateService::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llService */
    {
        ret = srcBuf.readInt64_l(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateService::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpdateService::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llService */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llService]", TDR_CPP_INT64_FORMAT, this->llService);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeUpdateService::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeUpdateService::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientUpdateService::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateService::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateService::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateService::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdateService::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdateService::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdateService::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateService::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdateService::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdateService::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdateService::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateService::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateService::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateService::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdateService::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdateService::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdateService::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateService::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpdateService::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpdateService::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpdateService::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateService::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpdateService::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientUpdateService::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientUpdateService::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_BuyCar_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_BuyCar_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_BuyCar_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_BuyCar_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_BuyCar_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_BuyCar_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_BuyCar_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iCarId */
    {
        ret = destBuf.writeInt32(this->iCarId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llToUid */
    {
        ret = destBuf.writeInt64(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chCurrencyType */
    {
        ret = destBuf.writeInt8(this->chCurrencyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_BuyCar_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_BuyCar_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_BuyCar_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_BuyCar_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iCarId */
    {
        ret = destBuf.writeInt32_l(this->iCarId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llToUid */
    {
        ret = destBuf.writeInt64_l(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chCurrencyType */
    {
        ret = destBuf.writeInt8(this->chCurrencyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_BuyCar_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_BuyCar_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_BuyCar_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_BuyCar_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_BuyCar_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_BuyCar_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iCarId */
    {
        ret = srcBuf.readInt32(this->iCarId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llToUid */
    {
        ret = srcBuf.readInt64(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chCurrencyType */
    {
        ret = srcBuf.readInt8(this->chCurrencyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_BuyCar_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_BuyCar_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_BuyCar_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_BuyCar_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iCarId */
    {
        ret = srcBuf.readInt32_l(this->iCarId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llToUid */
    {
        ret = srcBuf.readInt64_l(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chCurrencyType */
    {
        ret = srcBuf.readInt8(this->chCurrencyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_BuyCar_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_BuyCar_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iCarId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCarId]", "%d", this->iCarId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llToUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llToUid]", TDR_CPP_INT64_FORMAT, this->llToUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chCurrencyType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chCurrencyType]", "0x%02x", this->chCurrencyType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_BuyCar_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_BuyCar_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_BuyCar_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_BuyCar_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_BuyCar_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_BuyCar_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_BuyCar_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_BuyCar_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_BuyCar_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_BuyCar_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_BuyCar_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_BuyCar_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_BuyCar_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_BuyCar_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_BuyCar_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_BuyCar_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_BuyCar_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_BuyCar_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_BuyCar_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_BuyCar_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_BuyCar_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_BuyCar_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_BuyCar_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_BuyCar_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_BuyCar_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_BuyCar_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_BuyCar_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_OperateCar_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_OperateCar_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_OperateCar_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_OperateCar_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_OperateCar_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_OperateCar_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_OperateCar_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iCarId */
    {
        ret = destBuf.writeInt32(this->iCarId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chFlag */
    {
        ret = destBuf.writeInt8(this->chFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_OperateCar_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_OperateCar_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_OperateCar_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_OperateCar_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iCarId */
    {
        ret = destBuf.writeInt32_l(this->iCarId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chFlag */
    {
        ret = destBuf.writeInt8(this->chFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_OperateCar_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_OperateCar_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_OperateCar_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_OperateCar_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_OperateCar_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_OperateCar_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iCarId */
    {
        ret = srcBuf.readInt32(this->iCarId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chFlag */
    {
        ret = srcBuf.readInt8(this->chFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_OperateCar_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_OperateCar_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_OperateCar_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_OperateCar_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iCarId */
    {
        ret = srcBuf.readInt32_l(this->iCarId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chFlag */
    {
        ret = srcBuf.readInt8(this->chFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_OperateCar_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_OperateCar_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iCarId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCarId]", "%d", this->iCarId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chFlag */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chFlag]", "0x%02x", this->chFlag);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_OperateCar_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_OperateCar_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_OperateCar_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_OperateCar_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_OperateCar_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_OperateCar_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_OperateCar_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_OperateCar_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_OperateCar_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chFlag */
    {
        ret = destBuf.writeInt8(this->chFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_OperateCar_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_OperateCar_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_OperateCar_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_OperateCar_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chFlag */
    {
        ret = destBuf.writeInt8(this->chFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_OperateCar_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_OperateCar_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_OperateCar_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_OperateCar_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_OperateCar_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_OperateCar_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chFlag */
    {
        ret = srcBuf.readInt8(this->chFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_OperateCar_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_OperateCar_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_OperateCar_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_OperateCar_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chFlag */
    {
        ret = srcBuf.readInt8(this->chFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_OperateCar_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_OperateCar_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chFlag */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chFlag]", "0x%02x", this->chFlag);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_OperateCar_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_OperateCar_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
GiftsInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
GiftsInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GiftsInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GiftsInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GiftsInfo::CURRVERSION < cutVer)
    {
        cutVer = GiftsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GiftsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPresenter_uid */
    {
        ret = destBuf.writeInt64(this->llPresenter_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTime */
    {
        ret = destBuf.writeInt32(this->iTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftsid */
    {
        ret = destBuf.writeInt32(this->iGiftsid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftscount */
    {
        ret = destBuf.writeInt32(this->iGiftscount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GiftsInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GiftsInfo::CURRVERSION < cutVer)
    {
        cutVer = GiftsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GiftsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPresenter_uid */
    {
        ret = destBuf.writeInt64_l(this->llPresenter_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTime */
    {
        ret = destBuf.writeInt32_l(this->iTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftsid */
    {
        ret = destBuf.writeInt32_l(this->iGiftsid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftscount */
    {
        ret = destBuf.writeInt32_l(this->iGiftscount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GiftsInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GiftsInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GiftsInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GiftsInfo::CURRVERSION < cutVer)
    {
        cutVer = GiftsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GiftsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPresenter_uid */
    {
        ret = srcBuf.readInt64(this->llPresenter_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTime */
    {
        ret = srcBuf.readInt32(this->iTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftsid */
    {
        ret = srcBuf.readInt32(this->iGiftsid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftscount */
    {
        ret = srcBuf.readInt32(this->iGiftscount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GiftsInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GiftsInfo::CURRVERSION < cutVer)
    {
        cutVer = GiftsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GiftsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPresenter_uid */
    {
        ret = srcBuf.readInt64_l(this->llPresenter_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTime */
    {
        ret = srcBuf.readInt32_l(this->iTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftsid */
    {
        ret = srcBuf.readInt32_l(this->iGiftsid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftscount */
    {
        ret = srcBuf.readInt32_l(this->iGiftscount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GiftsInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GiftsInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llPresenter_uid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPresenter_uid]", TDR_CPP_INT64_FORMAT, this->llPresenter_uid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTime */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTime]", "%d", this->iTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGiftsid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGiftsid]", "%d", this->iGiftsid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGiftscount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGiftscount]", "%d", this->iGiftscount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
GiftsInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
GiftsInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llGiftsPagid */
    {
        ret = destBuf.writeInt64(this->llGiftsPagid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llGiftsPagid */
    {
        ret = destBuf.writeInt64_l(this->llGiftsPagid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llGiftsPagid */
    {
        ret = srcBuf.readInt64(this->llGiftsPagid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llGiftsPagid */
    {
        ret = srcBuf.readInt64_l(this->llGiftsPagid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGifts::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llGiftsPagid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llGiftsPagid]", TDR_CPP_INT64_FORMAT, this->llGiftsPagid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectGifts::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectGifts::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectGifts::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGifts::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGifts::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGifts::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftsInpagNum */
    {
        ret = destBuf.writeInt32(this->iGiftsInpagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astGiftsInfoList */
    {
        if (0 > this->iGiftsInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_GIFTS_MAX_COUNT < this->iGiftsInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astGiftsInfoList_i = 0; astGiftsInfoList_i < this->iGiftsInpagNum; astGiftsInfoList_i++)
        {
            ret = this->astGiftsInfoList[astGiftsInfoList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGifts::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftsInpagNum */
    {
        ret = destBuf.writeInt32_l(this->iGiftsInpagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astGiftsInfoList */
    {
        if (0 > this->iGiftsInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_GIFTS_MAX_COUNT < this->iGiftsInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astGiftsInfoList_i = 0; astGiftsInfoList_i < this->iGiftsInpagNum; astGiftsInfoList_i++)
        {
            ret = this->astGiftsInfoList[astGiftsInfoList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGifts::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGifts::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGifts::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftsInpagNum */
    {
        ret = srcBuf.readInt32(this->iGiftsInpagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astGiftsInfoList */
    {
        if (0 > this->iGiftsInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_GIFTS_MAX_COUNT < this->iGiftsInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astGiftsInfoList_i = 0; astGiftsInfoList_i < this->iGiftsInpagNum; astGiftsInfoList_i++)
        {
            ret = this->astGiftsInfoList[astGiftsInfoList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGifts::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftsInpagNum */
    {
        ret = srcBuf.readInt32_l(this->iGiftsInpagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astGiftsInfoList */
    {
        if (0 > this->iGiftsInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_GIFTS_MAX_COUNT < this->iGiftsInpagNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astGiftsInfoList_i = 0; astGiftsInfoList_i < this->iGiftsInpagNum; astGiftsInfoList_i++)
        {
            ret = this->astGiftsInfoList[astGiftsInfoList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGifts::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGifts::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGiftsInpagNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGiftsInpagNum]", "%d", this->iGiftsInpagNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astGiftsInfoList */
    if (0 > this->iGiftsInpagNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_GIFTS_MAX_COUNT < this->iGiftsInpagNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astGiftsInfoList_i = 0; astGiftsInfoList_i < this->iGiftsInpagNum; astGiftsInfoList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astGiftsInfoList]", astGiftsInfoList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astGiftsInfoList[astGiftsInfoList_i] */
        if (0 > indent)
        {
            ret = this->astGiftsInfoList[astGiftsInfoList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astGiftsInfoList[astGiftsInfoList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectGifts::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectGifts::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradePresentGifts::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradePresentGifts::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradePresentGifts::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradePresentGifts::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradePresentGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradePresentGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradePresentGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llReceive_uid */
    {
        ret = destBuf.writeInt64(this->llReceive_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftsid */
    {
        ret = destBuf.writeInt32(this->iGiftsid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftscount */
    {
        ret = destBuf.writeInt32(this->iGiftscount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradePresentGifts::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradePresentGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradePresentGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradePresentGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llReceive_uid */
    {
        ret = destBuf.writeInt64_l(this->llReceive_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftsid */
    {
        ret = destBuf.writeInt32_l(this->iGiftsid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftscount */
    {
        ret = destBuf.writeInt32_l(this->iGiftscount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradePresentGifts::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradePresentGifts::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradePresentGifts::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradePresentGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradePresentGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradePresentGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llReceive_uid */
    {
        ret = srcBuf.readInt64(this->llReceive_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftsid */
    {
        ret = srcBuf.readInt32(this->iGiftsid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftscount */
    {
        ret = srcBuf.readInt32(this->iGiftscount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradePresentGifts::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradePresentGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradePresentGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradePresentGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llReceive_uid */
    {
        ret = srcBuf.readInt64_l(this->llReceive_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftsid */
    {
        ret = srcBuf.readInt32_l(this->iGiftsid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftscount */
    {
        ret = srcBuf.readInt32_l(this->iGiftscount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradePresentGifts::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradePresentGifts::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llReceive_uid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llReceive_uid]", TDR_CPP_INT64_FORMAT, this->llReceive_uid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGiftsid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGiftsid]", "%d", this->iGiftsid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGiftscount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGiftscount]", "%d", this->iGiftscount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradePresentGifts::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradePresentGifts::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientPresentGifts::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientPresentGifts::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientPresentGifts::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientPresentGifts::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientPresentGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientPresentGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientPresentGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientPresentGifts::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientPresentGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientPresentGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientPresentGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientPresentGifts::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientPresentGifts::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientPresentGifts::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientPresentGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientPresentGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientPresentGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientPresentGifts::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientPresentGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientPresentGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientPresentGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientPresentGifts::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientPresentGifts::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientPresentGifts::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientPresentGifts::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_GuaranteeFriend_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_GuaranteeFriend_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_GuaranteeFriend_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_GuaranteeFriend_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_GuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_GuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_GuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llFriendUid */
    {
        ret = destBuf.writeInt64(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_GuaranteeFriend_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_GuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_GuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_GuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llFriendUid */
    {
        ret = destBuf.writeInt64_l(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_GuaranteeFriend_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_GuaranteeFriend_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_GuaranteeFriend_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_GuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_GuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_GuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llFriendUid */
    {
        ret = srcBuf.readInt64(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_GuaranteeFriend_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_GuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_GuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_GuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llFriendUid */
    {
        ret = srcBuf.readInt64_l(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_GuaranteeFriend_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_GuaranteeFriend_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llFriendUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llFriendUid]", TDR_CPP_INT64_FORMAT, this->llFriendUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_GuaranteeFriend_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_GuaranteeFriend_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_GuaranteeFriend_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_GuaranteeFriend_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_GuaranteeFriend_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_GuaranteeFriend_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_GuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_GuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_GuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_GuaranteeFriend_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_GuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_GuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_GuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_GuaranteeFriend_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_GuaranteeFriend_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_GuaranteeFriend_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_GuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_GuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_GuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_GuaranteeFriend_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_GuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_GuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_GuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_GuaranteeFriend_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_GuaranteeFriend_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_GuaranteeFriend_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_GuaranteeFriend_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_CancelGuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_CancelGuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_CancelGuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llFriendUid */
    {
        ret = destBuf.writeInt64(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_CancelGuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_CancelGuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_CancelGuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llFriendUid */
    {
        ret = destBuf.writeInt64_l(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_CancelGuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_CancelGuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_CancelGuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llFriendUid */
    {
        ret = srcBuf.readInt64(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_CancelGuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_CancelGuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_CancelGuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llFriendUid */
    {
        ret = srcBuf.readInt64_l(this->llFriendUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_CancelGuaranteeFriend_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llFriendUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llFriendUid]", TDR_CPP_INT64_FORMAT, this->llFriendUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_CancelGuaranteeFriend_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_CancelGuaranteeFriend_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_CancelGuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_CancelGuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_CancelGuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_CancelGuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_CancelGuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_CancelGuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_CancelGuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_CancelGuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_CancelGuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_CancelGuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_CancelGuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_CancelGuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_CancelGuaranteeFriend_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_CancelGuaranteeFriend_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_CancelGuaranteeFriend_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryGuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryGuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryGuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryGuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryGuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryGuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryGuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryGuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryGuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryGuaranteeFriend_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryGuaranteeFriend_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryGuaranteeFriend_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryGuaranteeFriend_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_QueryGuaranteeFriend_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_QueryGuaranteeFriend_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryGuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryGuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryGuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGuaranteeCount */
    {
        ret = destBuf.writeInt32(this->iGuaranteeCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->guaranteeUidList */
    {
        if (0 > this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t guaranteeUidList_i = 0; guaranteeUidList_i < this->iGuaranteeCount; guaranteeUidList_i++)
        {
            ret = destBuf.writeInt64(this->guaranteeUidList[guaranteeUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iPromiseCount */
    {
        ret = destBuf.writeInt32(this->iPromiseCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->promiseUidList */
    {
        if (0 > this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t promiseUidList_i = 0; promiseUidList_i < this->iPromiseCount; promiseUidList_i++)
        {
            ret = destBuf.writeInt64(this->promiseUidList[promiseUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryGuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryGuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryGuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGuaranteeCount */
    {
        ret = destBuf.writeInt32_l(this->iGuaranteeCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->guaranteeUidList */
    {
        if (0 > this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t guaranteeUidList_i = 0; guaranteeUidList_i < this->iGuaranteeCount; guaranteeUidList_i++)
        {
            ret = destBuf.writeInt64_l(this->guaranteeUidList[guaranteeUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iPromiseCount */
    {
        ret = destBuf.writeInt32_l(this->iPromiseCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->promiseUidList */
    {
        if (0 > this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t promiseUidList_i = 0; promiseUidList_i < this->iPromiseCount; promiseUidList_i++)
        {
            ret = destBuf.writeInt64_l(this->promiseUidList[promiseUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryGuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryGuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryGuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGuaranteeCount */
    {
        ret = srcBuf.readInt32(this->iGuaranteeCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->guaranteeUidList */
    {
        if (0 > this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t guaranteeUidList_i = 0; guaranteeUidList_i < this->iGuaranteeCount; guaranteeUidList_i++)
        {
            ret = srcBuf.readInt64(this->guaranteeUidList[guaranteeUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iPromiseCount */
    {
        ret = srcBuf.readInt32(this->iPromiseCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->promiseUidList */
    {
        if (0 > this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t promiseUidList_i = 0; promiseUidList_i < this->iPromiseCount; promiseUidList_i++)
        {
            ret = srcBuf.readInt64(this->promiseUidList[promiseUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryGuaranteeFriend_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryGuaranteeFriend_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryGuaranteeFriend_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGuaranteeCount */
    {
        ret = srcBuf.readInt32_l(this->iGuaranteeCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->guaranteeUidList */
    {
        if (0 > this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t guaranteeUidList_i = 0; guaranteeUidList_i < this->iGuaranteeCount; guaranteeUidList_i++)
        {
            ret = srcBuf.readInt64_l(this->guaranteeUidList[guaranteeUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iPromiseCount */
    {
        ret = srcBuf.readInt32_l(this->iPromiseCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->promiseUidList */
    {
        if (0 > this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t promiseUidList_i = 0; promiseUidList_i < this->iPromiseCount; promiseUidList_i++)
        {
            ret = srcBuf.readInt64_l(this->promiseUidList[promiseUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryGuaranteeFriend_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGuaranteeCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGuaranteeCount]", "%d", this->iGuaranteeCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->guaranteeUidList */
    if (0 > this->iGuaranteeCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_GUARANTEE_FRIEND_COUNT < this->iGuaranteeCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[guaranteeUidList]", this->iGuaranteeCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t guaranteeUidList_i = 0; guaranteeUidList_i < this->iGuaranteeCount; guaranteeUidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->guaranteeUidList[guaranteeUidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPromiseCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPromiseCount]", "%d", this->iPromiseCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->promiseUidList */
    if (0 > this->iPromiseCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_GUARANTEE_FRIEND_COUNT < this->iPromiseCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[promiseUidList]", this->iPromiseCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t promiseUidList_i = 0; promiseUidList_i < this->iPromiseCount; promiseUidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->promiseUidList[promiseUidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_QueryGuaranteeFriend_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_QueryGuaranteeFriend_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_QuerySelfGuarantee_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_QuerySelfGuarantee_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QuerySelfGuarantee_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QuerySelfGuarantee_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QuerySelfGuarantee_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QuerySelfGuarantee_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QuerySelfGuarantee_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QuerySelfGuarantee_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QuerySelfGuarantee_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QuerySelfGuarantee_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QuerySelfGuarantee_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QuerySelfGuarantee_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QuerySelfGuarantee_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QuerySelfGuarantee_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QuerySelfGuarantee_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QuerySelfGuarantee_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QuerySelfGuarantee_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QuerySelfGuarantee_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QuerySelfGuarantee_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QuerySelfGuarantee_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QuerySelfGuarantee_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QuerySelfGuarantee_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QuerySelfGuarantee_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_QuerySelfGuarantee_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_QuerySelfGuarantee_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QuerySelfGuarantee_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QuerySelfGuarantee_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QuerySelfGuarantee_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGuaranteeCount */
    {
        ret = destBuf.writeInt32(this->iGuaranteeCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->guaranteeUidList */
    {
        if (0 > this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t guaranteeUidList_i = 0; guaranteeUidList_i < this->iGuaranteeCount; guaranteeUidList_i++)
        {
            ret = destBuf.writeInt64(this->guaranteeUidList[guaranteeUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QuerySelfGuarantee_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QuerySelfGuarantee_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QuerySelfGuarantee_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGuaranteeCount */
    {
        ret = destBuf.writeInt32_l(this->iGuaranteeCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->guaranteeUidList */
    {
        if (0 > this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t guaranteeUidList_i = 0; guaranteeUidList_i < this->iGuaranteeCount; guaranteeUidList_i++)
        {
            ret = destBuf.writeInt64_l(this->guaranteeUidList[guaranteeUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QuerySelfGuarantee_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QuerySelfGuarantee_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QuerySelfGuarantee_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGuaranteeCount */
    {
        ret = srcBuf.readInt32(this->iGuaranteeCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->guaranteeUidList */
    {
        if (0 > this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t guaranteeUidList_i = 0; guaranteeUidList_i < this->iGuaranteeCount; guaranteeUidList_i++)
        {
            ret = srcBuf.readInt64(this->guaranteeUidList[guaranteeUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QuerySelfGuarantee_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QuerySelfGuarantee_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QuerySelfGuarantee_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGuaranteeCount */
    {
        ret = srcBuf.readInt32_l(this->iGuaranteeCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->guaranteeUidList */
    {
        if (0 > this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iGuaranteeCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t guaranteeUidList_i = 0; guaranteeUidList_i < this->iGuaranteeCount; guaranteeUidList_i++)
        {
            ret = srcBuf.readInt64_l(this->guaranteeUidList[guaranteeUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QuerySelfGuarantee_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGuaranteeCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGuaranteeCount]", "%d", this->iGuaranteeCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->guaranteeUidList */
    if (0 > this->iGuaranteeCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_GUARANTEE_FRIEND_COUNT < this->iGuaranteeCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[guaranteeUidList]", this->iGuaranteeCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t guaranteeUidList_i = 0; guaranteeUidList_i < this->iGuaranteeCount; guaranteeUidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->guaranteeUidList[guaranteeUidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_QuerySelfGuarantee_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_QuerySelfGuarantee_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_QueryPromiseSelf_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_QueryPromiseSelf_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryPromiseSelf_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryPromiseSelf_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryPromiseSelf_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryPromiseSelf_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryPromiseSelf_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryPromiseSelf_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryPromiseSelf_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryPromiseSelf_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryPromiseSelf_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryPromiseSelf_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryPromiseSelf_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryPromiseSelf_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryPromiseSelf_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryPromiseSelf_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryPromiseSelf_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryPromiseSelf_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryPromiseSelf_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryPromiseSelf_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryPromiseSelf_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryPromiseSelf_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryPromiseSelf_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_QueryPromiseSelf_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_QueryPromiseSelf_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_QueryPromiseSelf_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_QueryPromiseSelf_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryPromiseSelf_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryPromiseSelf_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryPromiseSelf_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryPromiseSelf_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryPromiseSelf_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromiseCount */
    {
        ret = destBuf.writeInt32(this->iPromiseCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->promiseUidList */
    {
        if (0 > this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t promiseUidList_i = 0; promiseUidList_i < this->iPromiseCount; promiseUidList_i++)
        {
            ret = destBuf.writeInt64(this->promiseUidList[promiseUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryPromiseSelf_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryPromiseSelf_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryPromiseSelf_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryPromiseSelf_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromiseCount */
    {
        ret = destBuf.writeInt32_l(this->iPromiseCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->promiseUidList */
    {
        if (0 > this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t promiseUidList_i = 0; promiseUidList_i < this->iPromiseCount; promiseUidList_i++)
        {
            ret = destBuf.writeInt64_l(this->promiseUidList[promiseUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryPromiseSelf_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryPromiseSelf_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryPromiseSelf_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryPromiseSelf_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryPromiseSelf_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryPromiseSelf_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromiseCount */
    {
        ret = srcBuf.readInt32(this->iPromiseCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->promiseUidList */
    {
        if (0 > this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t promiseUidList_i = 0; promiseUidList_i < this->iPromiseCount; promiseUidList_i++)
        {
            ret = srcBuf.readInt64(this->promiseUidList[promiseUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryPromiseSelf_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryPromiseSelf_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryPromiseSelf_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryPromiseSelf_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromiseCount */
    {
        ret = srcBuf.readInt32_l(this->iPromiseCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->promiseUidList */
    {
        if (0 > this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_GUARANTEE_FRIEND_COUNT < this->iPromiseCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t promiseUidList_i = 0; promiseUidList_i < this->iPromiseCount; promiseUidList_i++)
        {
            ret = srcBuf.readInt64_l(this->promiseUidList[promiseUidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryPromiseSelf_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryPromiseSelf_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPromiseCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPromiseCount]", "%d", this->iPromiseCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->promiseUidList */
    if (0 > this->iPromiseCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_GUARANTEE_FRIEND_COUNT < this->iPromiseCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[promiseUidList]", this->iPromiseCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t promiseUidList_i = 0; promiseUidList_i < this->iPromiseCount; promiseUidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->promiseUidList[promiseUidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_QueryPromiseSelf_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_QueryPromiseSelf_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TaskInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TaskInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iTasktype */
    {
        ret = destBuf.writeInt32(this->iTasktype);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAccomplish */
    {
        ret = destBuf.writeInt32(this->iAccomplish);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iStatus */
    {
        ret = destBuf.writeInt32(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iTasktype */
    {
        ret = destBuf.writeInt32_l(this->iTasktype);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAccomplish */
    {
        ret = destBuf.writeInt32_l(this->iAccomplish);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iStatus */
    {
        ret = destBuf.writeInt32_l(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iTasktype */
    {
        ret = srcBuf.readInt32(this->iTasktype);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAccomplish */
    {
        ret = srcBuf.readInt32(this->iAccomplish);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iStatus */
    {
        ret = srcBuf.readInt32(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iTasktype */
    {
        ret = srcBuf.readInt32_l(this->iTasktype);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAccomplish */
    {
        ret = srcBuf.readInt32_l(this->iAccomplish);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iStatus */
    {
        ret = srcBuf.readInt32_l(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iTasktype */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTasktype]", "%d", this->iTasktype);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAccomplish */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAccomplish]", "%d", this->iAccomplish);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iStatus]", "%d", this->iStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TaskInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TaskInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TaskStaticInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TaskStaticInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskStaticInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskStaticInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskStaticInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskStaticInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskStaticInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iTasktype */
    {
        ret = destBuf.writeInt32(this->iTasktype);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskNameLen */
    {
        ret = destBuf.writeInt32(this->iTaskNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szTaskName */
    {
        if (0 > this->iTaskNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_TASK_NAME_MAX_LEN < this->iTaskNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szTaskName, this->iTaskNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskCondition */
    {
        ret = destBuf.writeInt32(this->iTaskCondition);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskCompleteLimit */
    {
        ret = destBuf.writeInt32(this->iTaskCompleteLimit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskAwardType */
    {
        ret = destBuf.writeInt32(this->iTaskAwardType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskAwardAmount */
    {
        ret = destBuf.writeInt32(this->iTaskAwardAmount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskStaticInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskStaticInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskStaticInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskStaticInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iTasktype */
    {
        ret = destBuf.writeInt32_l(this->iTasktype);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskNameLen */
    {
        ret = destBuf.writeInt32_l(this->iTaskNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szTaskName */
    {
        if (0 > this->iTaskNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_TASK_NAME_MAX_LEN < this->iTaskNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szTaskName, this->iTaskNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskCondition */
    {
        ret = destBuf.writeInt32_l(this->iTaskCondition);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskCompleteLimit */
    {
        ret = destBuf.writeInt32_l(this->iTaskCompleteLimit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskAwardType */
    {
        ret = destBuf.writeInt32_l(this->iTaskAwardType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskAwardAmount */
    {
        ret = destBuf.writeInt32_l(this->iTaskAwardAmount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskStaticInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskStaticInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskStaticInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskStaticInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskStaticInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskStaticInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iTasktype */
    {
        ret = srcBuf.readInt32(this->iTasktype);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskNameLen */
    {
        ret = srcBuf.readInt32(this->iTaskNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szTaskName */
    {
        if (0 > this->iTaskNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_TASK_NAME_MAX_LEN < this->iTaskNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szTaskName, this->iTaskNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskCondition */
    {
        ret = srcBuf.readInt32(this->iTaskCondition);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskCompleteLimit */
    {
        ret = srcBuf.readInt32(this->iTaskCompleteLimit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskAwardType */
    {
        ret = srcBuf.readInt32(this->iTaskAwardType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskAwardAmount */
    {
        ret = srcBuf.readInt32(this->iTaskAwardAmount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskStaticInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskStaticInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskStaticInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskStaticInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iTasktype */
    {
        ret = srcBuf.readInt32_l(this->iTasktype);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskNameLen */
    {
        ret = srcBuf.readInt32_l(this->iTaskNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szTaskName */
    {
        if (0 > this->iTaskNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_TASK_NAME_MAX_LEN < this->iTaskNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szTaskName, this->iTaskNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskCondition */
    {
        ret = srcBuf.readInt32_l(this->iTaskCondition);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskCompleteLimit */
    {
        ret = srcBuf.readInt32_l(this->iTaskCompleteLimit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskAwardType */
    {
        ret = srcBuf.readInt32_l(this->iTaskAwardType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskAwardAmount */
    {
        ret = srcBuf.readInt32_l(this->iTaskAwardAmount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskStaticInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskStaticInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iTasktype */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTasktype]", "%d", this->iTasktype);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTaskNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTaskNameLen]", "%d", this->iTaskNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szTaskName */
    if (0 > this->iTaskNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_TASK_NAME_MAX_LEN < this->iTaskNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szTaskName]", this->iTaskNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szTaskName_i = 0; szTaskName_i < this->iTaskNameLen; szTaskName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szTaskName[szTaskName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTaskCondition */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTaskCondition]", "%d", this->iTaskCondition);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTaskCompleteLimit */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTaskCompleteLimit]", "%d", this->iTaskCompleteLimit);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTaskAwardType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTaskAwardType]", "%d", this->iTaskAwardType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTaskAwardAmount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTaskAwardAmount]", "%d", this->iTaskAwardAmount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TaskStaticInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TaskStaticInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TaskMultiInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TaskMultiInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskMultiInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskMultiInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskMultiInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskMultiInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskMultiInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->stTaskDynaInfo */
    {
        ret = this->stTaskDynaInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stTaskStaticInfo */
    {
        ret = this->stTaskStaticInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskMultiInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskMultiInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskMultiInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskMultiInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->stTaskDynaInfo */
    {
        ret = this->stTaskDynaInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stTaskStaticInfo */
    {
        ret = this->stTaskStaticInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskMultiInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskMultiInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskMultiInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskMultiInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskMultiInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskMultiInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->stTaskDynaInfo */
    {
        ret = this->stTaskDynaInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stTaskStaticInfo */
    {
        ret = this->stTaskStaticInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskMultiInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TaskMultiInfo::CURRVERSION < cutVer)
    {
        cutVer = TaskMultiInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TaskMultiInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->stTaskDynaInfo */
    {
        ret = this->stTaskDynaInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stTaskStaticInfo */
    {
        ret = this->stTaskStaticInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TaskMultiInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TaskMultiInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->stTaskDynaInfo */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTaskDynaInfo]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stTaskDynaInfo */
    if (0 > indent)
    {
        ret = this->stTaskDynaInfo.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stTaskDynaInfo.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stTaskStaticInfo */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTaskStaticInfo]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stTaskStaticInfo */
    if (0 > indent)
    {
        ret = this->stTaskStaticInfo.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stTaskStaticInfo.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TaskMultiInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TaskMultiInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectTaskInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectTaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectTaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectTaskInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectTaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectTaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectTaskInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectTaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectTaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectTaskInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectTaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectTaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectTaskInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectTaskInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectTaskInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectTaskInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectTaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectTaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskInfoNum */
    {
        ret = destBuf.writeInt32(this->iTaskInfoNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astTaskInfoList */
    {
        if (0 > this->iTaskInfoNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_TASK_MAX_COUNT < this->iTaskInfoNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astTaskInfoList_i = 0; astTaskInfoList_i < this->iTaskInfoNum; astTaskInfoList_i++)
        {
            ret = this->astTaskInfoList[astTaskInfoList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectTaskInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectTaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectTaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTaskInfoNum */
    {
        ret = destBuf.writeInt32_l(this->iTaskInfoNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astTaskInfoList */
    {
        if (0 > this->iTaskInfoNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_TASK_MAX_COUNT < this->iTaskInfoNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astTaskInfoList_i = 0; astTaskInfoList_i < this->iTaskInfoNum; astTaskInfoList_i++)
        {
            ret = this->astTaskInfoList[astTaskInfoList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectTaskInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectTaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectTaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskInfoNum */
    {
        ret = srcBuf.readInt32(this->iTaskInfoNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astTaskInfoList */
    {
        if (0 > this->iTaskInfoNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_TASK_MAX_COUNT < this->iTaskInfoNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astTaskInfoList_i = 0; astTaskInfoList_i < this->iTaskInfoNum; astTaskInfoList_i++)
        {
            ret = this->astTaskInfoList[astTaskInfoList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectTaskInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectTaskInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectTaskInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTaskInfoNum */
    {
        ret = srcBuf.readInt32_l(this->iTaskInfoNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astTaskInfoList */
    {
        if (0 > this->iTaskInfoNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_TASK_MAX_COUNT < this->iTaskInfoNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astTaskInfoList_i = 0; astTaskInfoList_i < this->iTaskInfoNum; astTaskInfoList_i++)
        {
            ret = this->astTaskInfoList[astTaskInfoList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectTaskInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTaskInfoNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTaskInfoNum]", "%d", this->iTaskInfoNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astTaskInfoList */
    if (0 > this->iTaskInfoNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_TASK_MAX_COUNT < this->iTaskInfoNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astTaskInfoList_i = 0; astTaskInfoList_i < this->iTaskInfoNum; astTaskInfoList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astTaskInfoList]", astTaskInfoList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astTaskInfoList[astTaskInfoList_i] */
        if (0 > indent)
        {
            ret = this->astTaskInfoList[astTaskInfoList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astTaskInfoList[astTaskInfoList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectTaskInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectTaskInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSellGifts::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSellGifts::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSellGifts::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSellGifts::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSellGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSellGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSellGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llGiftsPagID */
    {
        ret = destBuf.writeInt64(this->llGiftsPagID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftsPagIndex */
    {
        ret = destBuf.writeInt32(this->iGiftsPagIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSellGifts::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSellGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSellGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSellGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llGiftsPagID */
    {
        ret = destBuf.writeInt64_l(this->llGiftsPagID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGiftsPagIndex */
    {
        ret = destBuf.writeInt32_l(this->iGiftsPagIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSellGifts::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSellGifts::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSellGifts::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSellGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSellGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSellGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llGiftsPagID */
    {
        ret = srcBuf.readInt64(this->llGiftsPagID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftsPagIndex */
    {
        ret = srcBuf.readInt32(this->iGiftsPagIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSellGifts::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSellGifts::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSellGifts::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSellGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llGiftsPagID */
    {
        ret = srcBuf.readInt64_l(this->llGiftsPagID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGiftsPagIndex */
    {
        ret = srcBuf.readInt32_l(this->iGiftsPagIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSellGifts::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSellGifts::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llGiftsPagID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llGiftsPagID]", TDR_CPP_INT64_FORMAT, this->llGiftsPagID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGiftsPagIndex */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGiftsPagIndex]", "%d", this->iGiftsPagIndex);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSellGifts::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSellGifts::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSellGifts::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSellGifts::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSellGifts::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSellGifts::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSellGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSellGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSellGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSellGifts::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSellGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSellGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSellGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSellGifts::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSellGifts::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSellGifts::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSellGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSellGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSellGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSellGifts::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSellGifts::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSellGifts::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSellGifts::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSellGifts::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSellGifts::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientSellGifts::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSellGifts::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGetThirdPartyPayTokenReq::CURRVERSION < cutVer)
    {
        cutVer = ClientGetThirdPartyPayTokenReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGetThirdPartyPayTokenReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->nThirdPartyPayTokenIndex */
    {
        ret = destBuf.writeInt16(this->nThirdPartyPayTokenIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGetThirdPartyPayTokenReq::CURRVERSION < cutVer)
    {
        cutVer = ClientGetThirdPartyPayTokenReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGetThirdPartyPayTokenReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->nThirdPartyPayTokenIndex */
    {
        ret = destBuf.writeInt16_l(this->nThirdPartyPayTokenIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGetThirdPartyPayTokenReq::CURRVERSION < cutVer)
    {
        cutVer = ClientGetThirdPartyPayTokenReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGetThirdPartyPayTokenReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->nThirdPartyPayTokenIndex */
    {
        ret = srcBuf.readInt16(this->nThirdPartyPayTokenIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGetThirdPartyPayTokenReq::CURRVERSION < cutVer)
    {
        cutVer = ClientGetThirdPartyPayTokenReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGetThirdPartyPayTokenReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->nThirdPartyPayTokenIndex */
    {
        ret = srcBuf.readInt16_l(this->nThirdPartyPayTokenIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->nThirdPartyPayTokenIndex */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[nThirdPartyPayTokenIndex]", "%d", this->nThirdPartyPayTokenIndex);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientGetThirdPartyPayTokenReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientGetThirdPartyPayTokenReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGetThirdPartyPayTokenResp::CURRVERSION < cutVer)
    {
        cutVer = ClientGetThirdPartyPayTokenResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGetThirdPartyPayTokenResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTokenValueLen */
    {
        ret = destBuf.writeInt32(this->iTokenValueLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szTokenValue */
    {
        if (0 > this->iTokenValueLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRDPARTY_PAY_TOKEN_MAX_LEN < this->iTokenValueLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szTokenValue, this->iTokenValueLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llTokenValidTime */
    {
        ret = destBuf.writeInt64(this->llTokenValidTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llTokenCreateTime */
    {
        ret = destBuf.writeInt64(this->llTokenCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGetThirdPartyPayTokenResp::CURRVERSION < cutVer)
    {
        cutVer = ClientGetThirdPartyPayTokenResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGetThirdPartyPayTokenResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTokenValueLen */
    {
        ret = destBuf.writeInt32_l(this->iTokenValueLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szTokenValue */
    {
        if (0 > this->iTokenValueLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRDPARTY_PAY_TOKEN_MAX_LEN < this->iTokenValueLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szTokenValue, this->iTokenValueLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llTokenValidTime */
    {
        ret = destBuf.writeInt64_l(this->llTokenValidTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llTokenCreateTime */
    {
        ret = destBuf.writeInt64_l(this->llTokenCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGetThirdPartyPayTokenResp::CURRVERSION < cutVer)
    {
        cutVer = ClientGetThirdPartyPayTokenResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGetThirdPartyPayTokenResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTokenValueLen */
    {
        ret = srcBuf.readInt32(this->iTokenValueLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szTokenValue */
    {
        if (0 > this->iTokenValueLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRDPARTY_PAY_TOKEN_MAX_LEN < this->iTokenValueLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szTokenValue, this->iTokenValueLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llTokenValidTime */
    {
        ret = srcBuf.readInt64(this->llTokenValidTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llTokenCreateTime */
    {
        ret = srcBuf.readInt64(this->llTokenCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGetThirdPartyPayTokenResp::CURRVERSION < cutVer)
    {
        cutVer = ClientGetThirdPartyPayTokenResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGetThirdPartyPayTokenResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTokenValueLen */
    {
        ret = srcBuf.readInt32_l(this->iTokenValueLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szTokenValue */
    {
        if (0 > this->iTokenValueLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_THIRDPARTY_PAY_TOKEN_MAX_LEN < this->iTokenValueLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szTokenValue, this->iTokenValueLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llTokenValidTime */
    {
        ret = srcBuf.readInt64_l(this->llTokenValidTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llTokenCreateTime */
    {
        ret = srcBuf.readInt64_l(this->llTokenCreateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGetThirdPartyPayTokenResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTokenValueLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTokenValueLen]", "%d", this->iTokenValueLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szTokenValue */
    if (0 > this->iTokenValueLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_THIRDPARTY_PAY_TOKEN_MAX_LEN < this->iTokenValueLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szTokenValue]", this->iTokenValueLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szTokenValue_i = 0; szTokenValue_i < this->iTokenValueLen; szTokenValue_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szTokenValue[szTokenValue_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llTokenValidTime */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llTokenValidTime]", TDR_CPP_INT64_FORMAT, this->llTokenValidTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llTokenCreateTime */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llTokenCreateTime]", TDR_CPP_INT64_FORMAT, this->llTokenCreateTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientGetThirdPartyPayTokenResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientGetThirdPartyPayTokenResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientGeneratePayOrderReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGeneratePayOrderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientGeneratePayOrderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGeneratePayOrderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iPrice */
    {
        ret = destBuf.writeInt32(this->iPrice);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iQuantity */
    {
        ret = destBuf.writeInt32(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chItemType */
    {
        ret = destBuf.writeInt8(this->chItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->nItemNameLen */
    {
        ret = destBuf.writeInt16(this->nItemNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szItemName */
    {
        if (0 > this->nItemNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_ITEM_NAME_MAX_LEN < this->nItemNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szItemName, this->nItemNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chChannelId */
    {
        ret = destBuf.writeInt8(this->chChannelId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chPayWay */
    {
        ret = destBuf.writeInt8(this->chPayWay);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chPaymentType */
    {
        ret = destBuf.writeInt8(this->chPaymentType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chAppVersionLen */
    {
        ret = destBuf.writeInt8(this->chAppVersionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szAppVersion */
    {
        if (0 > this->chAppVersionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_APP_VERSION_MAX_LEN < this->chAppVersionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szAppVersion, this->chAppVersionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGeneratePayOrderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientGeneratePayOrderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGeneratePayOrderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iPrice */
    {
        ret = destBuf.writeInt32_l(this->iPrice);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iQuantity */
    {
        ret = destBuf.writeInt32_l(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chItemType */
    {
        ret = destBuf.writeInt8(this->chItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->nItemNameLen */
    {
        ret = destBuf.writeInt16_l(this->nItemNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szItemName */
    {
        if (0 > this->nItemNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_ITEM_NAME_MAX_LEN < this->nItemNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szItemName, this->nItemNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chChannelId */
    {
        ret = destBuf.writeInt8(this->chChannelId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chPayWay */
    {
        ret = destBuf.writeInt8(this->chPayWay);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chPaymentType */
    {
        ret = destBuf.writeInt8(this->chPaymentType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chAppVersionLen */
    {
        ret = destBuf.writeInt8(this->chAppVersionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szAppVersion */
    {
        if (0 > this->chAppVersionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_APP_VERSION_MAX_LEN < this->chAppVersionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szAppVersion, this->chAppVersionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGeneratePayOrderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientGeneratePayOrderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGeneratePayOrderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iPrice */
    {
        ret = srcBuf.readInt32(this->iPrice);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iQuantity */
    {
        ret = srcBuf.readInt32(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chItemType */
    {
        ret = srcBuf.readInt8(this->chItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->nItemNameLen */
    {
        ret = srcBuf.readInt16(this->nItemNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szItemName */
    {
        if (0 > this->nItemNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_ITEM_NAME_MAX_LEN < this->nItemNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szItemName, this->nItemNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chChannelId */
    {
        ret = srcBuf.readInt8(this->chChannelId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chPayWay */
    {
        ret = srcBuf.readInt8(this->chPayWay);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chPaymentType */
    {
        ret = srcBuf.readInt8(this->chPaymentType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chAppVersionLen */
    {
        ret = srcBuf.readInt8(this->chAppVersionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szAppVersion */
    {
        if (0 > this->chAppVersionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_APP_VERSION_MAX_LEN < this->chAppVersionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szAppVersion, this->chAppVersionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGeneratePayOrderReq::CURRVERSION < cutVer)
    {
        cutVer = ClientGeneratePayOrderReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGeneratePayOrderReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iPrice */
    {
        ret = srcBuf.readInt32_l(this->iPrice);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iQuantity */
    {
        ret = srcBuf.readInt32_l(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chItemType */
    {
        ret = srcBuf.readInt8(this->chItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->nItemNameLen */
    {
        ret = srcBuf.readInt16_l(this->nItemNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szItemName */
    {
        if (0 > this->nItemNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_ITEM_NAME_MAX_LEN < this->nItemNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szItemName, this->nItemNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chChannelId */
    {
        ret = srcBuf.readInt8(this->chChannelId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chPayWay */
    {
        ret = srcBuf.readInt8(this->chPayWay);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chPaymentType */
    {
        ret = srcBuf.readInt8(this->chPaymentType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chAppVersionLen */
    {
        ret = srcBuf.readInt8(this->chAppVersionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szAppVersion */
    {
        if (0 > this->chAppVersionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_APP_VERSION_MAX_LEN < this->chAppVersionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szAppVersion, this->chAppVersionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iPrice */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPrice]", "%d", this->iPrice);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iQuantity */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iQuantity]", "%d", this->iQuantity);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chItemType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chItemType]", "0x%02x", this->chItemType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->nItemNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[nItemNameLen]", "%d", this->nItemNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szItemName */
    if (0 > this->nItemNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_ITEM_NAME_MAX_LEN < this->nItemNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szItemName]", this->nItemNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int16_t szItemName_i = 0; szItemName_i < this->nItemNameLen; szItemName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szItemName[szItemName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chChannelId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chChannelId]", "0x%02x", this->chChannelId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chPayWay */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chPayWay]", "0x%02x", this->chPayWay);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chPaymentType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chPaymentType]", "0x%02x", this->chPaymentType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chAppVersionLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chAppVersionLen]", "0x%02x", this->chAppVersionLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szAppVersion */
    if (0 > this->chAppVersionLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_APP_VERSION_MAX_LEN < this->chAppVersionLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szAppVersion]", this->chAppVersionLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int8_t szAppVersion_i = 0; szAppVersion_i < this->chAppVersionLen; szAppVersion_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szAppVersion[szAppVersion_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientGeneratePayOrderReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientGeneratePayOrderReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientGeneratePayOrderResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGeneratePayOrderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientGeneratePayOrderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGeneratePayOrderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPayOrderId */
    {
        ret = destBuf.writeInt64(this->llPayOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSecurityInfoLen */
    if (ClientGeneratePayOrderResp::VERSION_iSecurityInfoLen <= cutVer)
    {
        ret = destBuf.writeInt32(this->iSecurityInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSecurityInfo */
    if (ClientGeneratePayOrderResp::VERSION_szSecurityInfo <= cutVer)
    {
        if (0 > this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (SECURITY_INFO_MAX_LEN < this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSecurityInfo, this->iSecurityInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGeneratePayOrderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientGeneratePayOrderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGeneratePayOrderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPayOrderId */
    {
        ret = destBuf.writeInt64_l(this->llPayOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSecurityInfoLen */
    if (ClientGeneratePayOrderResp::VERSION_iSecurityInfoLen <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iSecurityInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSecurityInfo */
    if (ClientGeneratePayOrderResp::VERSION_szSecurityInfo <= cutVer)
    {
        if (0 > this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (SECURITY_INFO_MAX_LEN < this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSecurityInfo, this->iSecurityInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGeneratePayOrderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientGeneratePayOrderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGeneratePayOrderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPayOrderId */
    {
        ret = srcBuf.readInt64(this->llPayOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSecurityInfoLen */
    if (ClientGeneratePayOrderResp::VERSION_iSecurityInfoLen <= cutVer)
    {
        ret = srcBuf.readInt32(this->iSecurityInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iSecurityInfoLen = 0;
    }

    /* unpack member: this->szSecurityInfo */
    if (ClientGeneratePayOrderResp::VERSION_szSecurityInfo <= cutVer)
    {
        if (0 > this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (SECURITY_INFO_MAX_LEN < this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSecurityInfo, this->iSecurityInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (SECURITY_INFO_MAX_LEN < this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szSecurityInfo, 0, this->iSecurityInfoLen * sizeof(char));
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientGeneratePayOrderResp::CURRVERSION < cutVer)
    {
        cutVer = ClientGeneratePayOrderResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientGeneratePayOrderResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPayOrderId */
    {
        ret = srcBuf.readInt64_l(this->llPayOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSecurityInfoLen */
    if (ClientGeneratePayOrderResp::VERSION_iSecurityInfoLen <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iSecurityInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iSecurityInfoLen = 0;
    }

    /* unpack member: this->szSecurityInfo */
    if (ClientGeneratePayOrderResp::VERSION_szSecurityInfo <= cutVer)
    {
        if (0 > this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (SECURITY_INFO_MAX_LEN < this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSecurityInfo, this->iSecurityInfoLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (SECURITY_INFO_MAX_LEN < this->iSecurityInfoLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szSecurityInfo, 0, this->iSecurityInfoLen * sizeof(char));
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientGeneratePayOrderResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPayOrderId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPayOrderId]", TDR_CPP_INT64_FORMAT, this->llPayOrderId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSecurityInfoLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSecurityInfoLen]", "%d", this->iSecurityInfoLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szSecurityInfo */
    if (0 > this->iSecurityInfoLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (SECURITY_INFO_MAX_LEN < this->iSecurityInfoLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szSecurityInfo]", this->iSecurityInfoLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szSecurityInfo_i = 0; szSecurityInfo_i < this->iSecurityInfoLen; szSecurityInfo_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szSecurityInfo[szSecurityInfo_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientGeneratePayOrderResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientGeneratePayOrderResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeNotifyClientPayResult::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeNotifyClientPayResult::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeNotifyClientPayResult::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeNotifyClientPayResult::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeNotifyClientPayResult::CURRVERSION < cutVer)
    {
        cutVer = TradeNotifyClientPayResult::CURRVERSION;
    }

    /* check cutversion */
    if (TradeNotifyClientPayResult::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPayOrderId */
    {
        ret = destBuf.writeInt64(this->llPayOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeNotifyClientPayResult::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeNotifyClientPayResult::CURRVERSION < cutVer)
    {
        cutVer = TradeNotifyClientPayResult::CURRVERSION;
    }

    /* check cutversion */
    if (TradeNotifyClientPayResult::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPayOrderId */
    {
        ret = destBuf.writeInt64_l(this->llPayOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeNotifyClientPayResult::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeNotifyClientPayResult::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeNotifyClientPayResult::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeNotifyClientPayResult::CURRVERSION < cutVer)
    {
        cutVer = TradeNotifyClientPayResult::CURRVERSION;
    }

    /* check cutversion */
    if (TradeNotifyClientPayResult::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPayOrderId */
    {
        ret = srcBuf.readInt64(this->llPayOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeNotifyClientPayResult::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeNotifyClientPayResult::CURRVERSION < cutVer)
    {
        cutVer = TradeNotifyClientPayResult::CURRVERSION;
    }

    /* check cutversion */
    if (TradeNotifyClientPayResult::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPayOrderId */
    {
        ret = srcBuf.readInt64_l(this->llPayOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeNotifyClientPayResult::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeNotifyClientPayResult::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPayOrderId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPayOrderId]", TDR_CPP_INT64_FORMAT, this->llPayOrderId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeNotifyClientPayResult::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeNotifyClientPayResult::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientExchangeStoneOrCurrencyReq::CURRVERSION < cutVer)
    {
        cutVer = ClientExchangeStoneOrCurrencyReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientExchangeStoneOrCurrencyReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chItemType */
    {
        ret = destBuf.writeInt8(this->chItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iQuantity */
    {
        ret = destBuf.writeInt32(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iYouWoCoinQuantity */
    {
        ret = destBuf.writeInt32(this->iYouWoCoinQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientExchangeStoneOrCurrencyReq::CURRVERSION < cutVer)
    {
        cutVer = ClientExchangeStoneOrCurrencyReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientExchangeStoneOrCurrencyReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chItemType */
    {
        ret = destBuf.writeInt8(this->chItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iQuantity */
    {
        ret = destBuf.writeInt32_l(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iYouWoCoinQuantity */
    {
        ret = destBuf.writeInt32_l(this->iYouWoCoinQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientExchangeStoneOrCurrencyReq::CURRVERSION < cutVer)
    {
        cutVer = ClientExchangeStoneOrCurrencyReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientExchangeStoneOrCurrencyReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chItemType */
    {
        ret = srcBuf.readInt8(this->chItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iQuantity */
    {
        ret = srcBuf.readInt32(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iYouWoCoinQuantity */
    {
        ret = srcBuf.readInt32(this->iYouWoCoinQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientExchangeStoneOrCurrencyReq::CURRVERSION < cutVer)
    {
        cutVer = ClientExchangeStoneOrCurrencyReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientExchangeStoneOrCurrencyReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chItemType */
    {
        ret = srcBuf.readInt8(this->chItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iQuantity */
    {
        ret = srcBuf.readInt32_l(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iYouWoCoinQuantity */
    {
        ret = srcBuf.readInt32_l(this->iYouWoCoinQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chItemType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chItemType]", "0x%02x", this->chItemType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iQuantity */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iQuantity]", "%d", this->iQuantity);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iYouWoCoinQuantity */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iYouWoCoinQuantity]", "%d", this->iYouWoCoinQuantity);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientExchangeStoneOrCurrencyReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientExchangeStoneOrCurrencyReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientExchangeStoneOrCurrencyResp::CURRVERSION < cutVer)
    {
        cutVer = ClientExchangeStoneOrCurrencyResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientExchangeStoneOrCurrencyResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientExchangeStoneOrCurrencyResp::CURRVERSION < cutVer)
    {
        cutVer = ClientExchangeStoneOrCurrencyResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientExchangeStoneOrCurrencyResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientExchangeStoneOrCurrencyResp::CURRVERSION < cutVer)
    {
        cutVer = ClientExchangeStoneOrCurrencyResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientExchangeStoneOrCurrencyResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientExchangeStoneOrCurrencyResp::CURRVERSION < cutVer)
    {
        cutVer = ClientExchangeStoneOrCurrencyResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientExchangeStoneOrCurrencyResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientExchangeStoneOrCurrencyResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientExchangeStoneOrCurrencyResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientExchangeStoneOrCurrencyResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientWithdrawHonestyGoldReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientWithdrawHonestyGoldReq::CURRVERSION < cutVer)
    {
        cutVer = ClientWithdrawHonestyGoldReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientWithdrawHonestyGoldReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iQuantity */
    {
        ret = destBuf.writeInt32(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCurrencyType */
    {
        ret = destBuf.writeInt32(this->iCurrencyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->nBuyerPayAccountLen */
    {
        ret = destBuf.writeInt16(this->nBuyerPayAccountLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szBuyerPayAccount */
    {
        if (0 > this->nBuyerPayAccountLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_BUYER_PAY_ACCOUNT_MAX_LEN < this->nBuyerPayAccountLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szBuyerPayAccount, this->nBuyerPayAccountLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAccountType */
    {
        ret = destBuf.writeInt32(this->iAccountType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientWithdrawHonestyGoldReq::CURRVERSION < cutVer)
    {
        cutVer = ClientWithdrawHonestyGoldReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientWithdrawHonestyGoldReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iQuantity */
    {
        ret = destBuf.writeInt32_l(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCurrencyType */
    {
        ret = destBuf.writeInt32_l(this->iCurrencyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->nBuyerPayAccountLen */
    {
        ret = destBuf.writeInt16_l(this->nBuyerPayAccountLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szBuyerPayAccount */
    {
        if (0 > this->nBuyerPayAccountLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_BUYER_PAY_ACCOUNT_MAX_LEN < this->nBuyerPayAccountLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szBuyerPayAccount, this->nBuyerPayAccountLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAccountType */
    {
        ret = destBuf.writeInt32_l(this->iAccountType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientWithdrawHonestyGoldReq::CURRVERSION < cutVer)
    {
        cutVer = ClientWithdrawHonestyGoldReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientWithdrawHonestyGoldReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iQuantity */
    {
        ret = srcBuf.readInt32(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCurrencyType */
    {
        ret = srcBuf.readInt32(this->iCurrencyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->nBuyerPayAccountLen */
    {
        ret = srcBuf.readInt16(this->nBuyerPayAccountLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szBuyerPayAccount */
    {
        if (0 > this->nBuyerPayAccountLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_BUYER_PAY_ACCOUNT_MAX_LEN < this->nBuyerPayAccountLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szBuyerPayAccount, this->nBuyerPayAccountLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAccountType */
    {
        ret = srcBuf.readInt32(this->iAccountType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientWithdrawHonestyGoldReq::CURRVERSION < cutVer)
    {
        cutVer = ClientWithdrawHonestyGoldReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientWithdrawHonestyGoldReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iQuantity */
    {
        ret = srcBuf.readInt32_l(this->iQuantity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCurrencyType */
    {
        ret = srcBuf.readInt32_l(this->iCurrencyType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->nBuyerPayAccountLen */
    {
        ret = srcBuf.readInt16_l(this->nBuyerPayAccountLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szBuyerPayAccount */
    {
        if (0 > this->nBuyerPayAccountLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (TRADE_BUYER_PAY_ACCOUNT_MAX_LEN < this->nBuyerPayAccountLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szBuyerPayAccount, this->nBuyerPayAccountLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAccountType */
    {
        ret = srcBuf.readInt32_l(this->iAccountType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iQuantity */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iQuantity]", "%d", this->iQuantity);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCurrencyType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCurrencyType]", "%d", this->iCurrencyType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->nBuyerPayAccountLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[nBuyerPayAccountLen]", "%d", this->nBuyerPayAccountLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szBuyerPayAccount */
    if (0 > this->nBuyerPayAccountLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (TRADE_BUYER_PAY_ACCOUNT_MAX_LEN < this->nBuyerPayAccountLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szBuyerPayAccount]", this->nBuyerPayAccountLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int16_t szBuyerPayAccount_i = 0; szBuyerPayAccount_i < this->nBuyerPayAccountLen; szBuyerPayAccount_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szBuyerPayAccount[szBuyerPayAccount_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAccountType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAccountType]", "%d", this->iAccountType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientWithdrawHonestyGoldReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientWithdrawHonestyGoldReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientWithdrawHonestyGoldResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientWithdrawHonestyGoldResp::CURRVERSION < cutVer)
    {
        cutVer = ClientWithdrawHonestyGoldResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientWithdrawHonestyGoldResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientWithdrawHonestyGoldResp::CURRVERSION < cutVer)
    {
        cutVer = ClientWithdrawHonestyGoldResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientWithdrawHonestyGoldResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientWithdrawHonestyGoldResp::CURRVERSION < cutVer)
    {
        cutVer = ClientWithdrawHonestyGoldResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientWithdrawHonestyGoldResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientWithdrawHonestyGoldResp::CURRVERSION < cutVer)
    {
        cutVer = ClientWithdrawHonestyGoldResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientWithdrawHonestyGoldResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientWithdrawHonestyGoldResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientWithdrawHonestyGoldResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientWithdrawHonestyGoldResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iUidCount */
    {
        ret = destBuf.writeInt32(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_USER_INFO_LIST_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = destBuf.writeInt64(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iUidCount */
    {
        ret = destBuf.writeInt32_l(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_USER_INFO_LIST_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = destBuf.writeInt64_l(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iUidCount */
    {
        ret = srcBuf.readInt32(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_USER_INFO_LIST_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = srcBuf.readInt64(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iUidCount */
    {
        ret = srcBuf.readInt32_l(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_USER_INFO_LIST_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = srcBuf.readInt64_l(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectUserInfoList::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iUidCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iUidCount]", "%d", this->iUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->uidList */
    if (0 > this->iUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_SELECT_USER_INFO_LIST_COUNT < this->iUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[uidList]", this->iUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->uidList[uidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectUserInfoList::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectUserInfoList::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iUserInfoCount */
    {
        ret = destBuf.writeInt32(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astUserInfoList */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_USER_INFO_LIST_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfoList_i = 0; astUserInfoList_i < this->iUserInfoCount; astUserInfoList_i++)
        {
            ret = this->astUserInfoList[astUserInfoList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iUserInfoCount */
    {
        ret = destBuf.writeInt32_l(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astUserInfoList */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_USER_INFO_LIST_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfoList_i = 0; astUserInfoList_i < this->iUserInfoCount; astUserInfoList_i++)
        {
            ret = this->astUserInfoList[astUserInfoList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iUserInfoCount */
    {
        ret = srcBuf.readInt32(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astUserInfoList */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_USER_INFO_LIST_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfoList_i = 0; astUserInfoList_i < this->iUserInfoCount; astUserInfoList_i++)
        {
            ret = this->astUserInfoList[astUserInfoList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iUserInfoCount */
    {
        ret = srcBuf.readInt32_l(this->iUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astUserInfoList */
    {
        if (0 > this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_USER_INFO_LIST_COUNT < this->iUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astUserInfoList_i = 0; astUserInfoList_i < this->iUserInfoCount; astUserInfoList_i++)
        {
            ret = this->astUserInfoList[astUserInfoList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectUserInfoList::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iUserInfoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iUserInfoCount]", "%d", this->iUserInfoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astUserInfoList */
    if (0 > this->iUserInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_SELECT_USER_INFO_LIST_COUNT < this->iUserInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astUserInfoList_i = 0; astUserInfoList_i < this->iUserInfoCount; astUserInfoList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astUserInfoList]", astUserInfoList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astUserInfoList[astUserInfoList_i] */
        if (0 > indent)
        {
            ret = this->astUserInfoList[astUserInfoList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astUserInfoList[astUserInfoList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectUserInfoList::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectUserInfoList::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpLevelVip::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpLevelVip::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpLevelVip::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iVipInfoId */
    {
        ret = destBuf.writeInt32(this->iVipInfoId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpLevelVip::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpLevelVip::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpLevelVip::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iVipInfoId */
    {
        ret = destBuf.writeInt32_l(this->iVipInfoId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpLevelVip::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpLevelVip::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpLevelVip::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iVipInfoId */
    {
        ret = srcBuf.readInt32(this->iVipInfoId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeUpLevelVip::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeUpLevelVip::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeUpLevelVip::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iVipInfoId */
    {
        ret = srcBuf.readInt32_l(this->iVipInfoId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeUpLevelVip::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iVipInfoId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVipInfoId]", "%d", this->iVipInfoId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeUpLevelVip::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeUpLevelVip::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpLevelVip::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpLevelVip::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpLevelVip::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpLevelVip::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpLevelVip::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpLevelVip::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpLevelVip::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpLevelVip::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpLevelVip::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientUpLevelVip::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientUpLevelVip::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientUpLevelVip::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientUpLevelVip::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientUpLevelVip::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientUpLevelVip::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeGetChatRoomInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeGetChatRoomInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeGetChatRoomInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeGetChatRoomInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeGetChatRoomInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeGetChatRoomInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeGetChatRoomInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeGetChatRoomInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeGetChatRoomInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeGetChatRoomInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeGetChatRoomInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeGetChatRoomInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetChatRoomInfoList::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeGetChatRoomInfoList::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeGetChatRoomInfoList::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ChatRoomData::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ChatRoomData::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRoomData::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRoomData::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRoomData::CURRVERSION < cutVer)
    {
        cutVer = ChatRoomData::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRoomData::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->i_size */
    {
        ret = destBuf.writeInt32(this->i_size);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->sz_value */
    {
        if (0 > this->i_size)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_CHATROOMDATA_SIZE < this->i_size)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->sz_value, this->i_size);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ChatRoomData::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRoomData::CURRVERSION < cutVer)
    {
        cutVer = ChatRoomData::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRoomData::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->i_size */
    {
        ret = destBuf.writeInt32_l(this->i_size);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->sz_value */
    {
        if (0 > this->i_size)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_CHATROOMDATA_SIZE < this->i_size)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->sz_value, this->i_size);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ChatRoomData::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRoomData::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRoomData::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRoomData::CURRVERSION < cutVer)
    {
        cutVer = ChatRoomData::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRoomData::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->i_size */
    {
        ret = srcBuf.readInt32(this->i_size);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->sz_value */
    {
        if (0 > this->i_size)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_CHATROOMDATA_SIZE < this->i_size)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->sz_value, this->i_size);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ChatRoomData::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRoomData::CURRVERSION < cutVer)
    {
        cutVer = ChatRoomData::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRoomData::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->i_size */
    {
        ret = srcBuf.readInt32_l(this->i_size);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->sz_value */
    {
        if (0 > this->i_size)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_CHATROOMDATA_SIZE < this->i_size)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->sz_value, this->i_size);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ChatRoomData::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRoomData::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->i_size */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[i_size]", "%d", this->i_size);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->sz_value */
    if (0 > this->i_size)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_CHATROOMDATA_SIZE < this->i_size)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[sz_value]", this->i_size);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t sz_value_i = 0; sz_value_i < this->i_size; sz_value_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->sz_value[sz_value_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ChatRoomData::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ChatRoomData::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ChatRoomInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ChatRoomInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRoomInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRoomInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRoomInfo::CURRVERSION < cutVer)
    {
        cutVer = ChatRoomInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRoomInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iIndex */
    {
        ret = destBuf.writeInt32(this->iIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stRoomid */
    {
        ret = this->stRoomid.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stName */
    {
        ret = this->stName.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llIconid */
    {
        ret = destBuf.writeInt64(this->llIconid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ChatRoomInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRoomInfo::CURRVERSION < cutVer)
    {
        cutVer = ChatRoomInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRoomInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iIndex */
    {
        ret = destBuf.writeInt32_l(this->iIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stRoomid */
    {
        ret = this->stRoomid.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stName */
    {
        ret = this->stName.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llIconid */
    {
        ret = destBuf.writeInt64_l(this->llIconid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ChatRoomInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRoomInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRoomInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRoomInfo::CURRVERSION < cutVer)
    {
        cutVer = ChatRoomInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRoomInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iIndex */
    {
        ret = srcBuf.readInt32(this->iIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stRoomid */
    {
        ret = this->stRoomid.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stName */
    {
        ret = this->stName.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llIconid */
    {
        ret = srcBuf.readInt64(this->llIconid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ChatRoomInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRoomInfo::CURRVERSION < cutVer)
    {
        cutVer = ChatRoomInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRoomInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iIndex */
    {
        ret = srcBuf.readInt32_l(this->iIndex);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stRoomid */
    {
        ret = this->stRoomid.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stName */
    {
        ret = this->stName.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llIconid */
    {
        ret = srcBuf.readInt64_l(this->llIconid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ChatRoomInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRoomInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iIndex */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iIndex]", "%d", this->iIndex);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stRoomid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stRoomid]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stRoomid */
    if (0 > indent)
    {
        ret = this->stRoomid.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stRoomid.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stName */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stName]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stName */
    if (0 > indent)
    {
        ret = this->stName.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stName.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llIconid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llIconid]", TDR_CPP_INT64_FORMAT, this->llIconid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ChatRoomInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ChatRoomInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientGetChatRoomInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientGetChatRoomInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientGetChatRoomInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iChatRoomCount */
    {
        ret = destBuf.writeInt32(this->iChatRoomCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astChatRoomInfoList */
    {
        if (0 > this->iChatRoomCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_CHATROOM_COUNT < this->iChatRoomCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astChatRoomInfoList_i = 0; astChatRoomInfoList_i < this->iChatRoomCount; astChatRoomInfoList_i++)
        {
            ret = this->astChatRoomInfoList[astChatRoomInfoList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientGetChatRoomInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientGetChatRoomInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientGetChatRoomInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iChatRoomCount */
    {
        ret = destBuf.writeInt32_l(this->iChatRoomCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astChatRoomInfoList */
    {
        if (0 > this->iChatRoomCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_CHATROOM_COUNT < this->iChatRoomCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astChatRoomInfoList_i = 0; astChatRoomInfoList_i < this->iChatRoomCount; astChatRoomInfoList_i++)
        {
            ret = this->astChatRoomInfoList[astChatRoomInfoList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientGetChatRoomInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientGetChatRoomInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientGetChatRoomInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iChatRoomCount */
    {
        ret = srcBuf.readInt32(this->iChatRoomCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astChatRoomInfoList */
    {
        if (0 > this->iChatRoomCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_CHATROOM_COUNT < this->iChatRoomCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astChatRoomInfoList_i = 0; astChatRoomInfoList_i < this->iChatRoomCount; astChatRoomInfoList_i++)
        {
            ret = this->astChatRoomInfoList[astChatRoomInfoList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientGetChatRoomInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientGetChatRoomInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientGetChatRoomInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iChatRoomCount */
    {
        ret = srcBuf.readInt32_l(this->iChatRoomCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astChatRoomInfoList */
    {
        if (0 > this->iChatRoomCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_CHATROOM_COUNT < this->iChatRoomCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astChatRoomInfoList_i = 0; astChatRoomInfoList_i < this->iChatRoomCount; astChatRoomInfoList_i++)
        {
            ret = this->astChatRoomInfoList[astChatRoomInfoList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetChatRoomInfoList::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iChatRoomCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iChatRoomCount]", "%d", this->iChatRoomCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astChatRoomInfoList */
    if (0 > this->iChatRoomCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_CHATROOM_COUNT < this->iChatRoomCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astChatRoomInfoList_i = 0; astChatRoomInfoList_i < this->iChatRoomCount; astChatRoomInfoList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astChatRoomInfoList]", astChatRoomInfoList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astChatRoomInfoList[astChatRoomInfoList_i] */
        if (0 > indent)
        {
            ret = this->astChatRoomInfoList[astChatRoomInfoList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astChatRoomInfoList[astChatRoomInfoList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TradeResponseAccessClientGetChatRoomInfoList::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientGetChatRoomInfoList::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectGiftsPagidList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectGiftsPagidList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectGiftsPagidList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectGiftsPagidList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectGiftsPagidList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectGiftsPagidList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectGiftsPagidList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectGiftsPagidList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectGiftsPagidList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectGiftsPagidList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectGiftsPagidList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectGiftsPagidList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectGiftsPagidList::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectGiftsPagidList::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectGiftsPagidList::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectGiftsPagidList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectGiftsPagidList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectGiftsPagidList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_num */
    {
        ret = destBuf.writeInt32(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_pag_num */
    {
        ret = destBuf.writeInt32(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->gifts_pagid */
    {
        if (0 > this->iGifts_pag_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (256 < this->iGifts_pag_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t gifts_pagid_i = 0; gifts_pagid_i < this->iGifts_pag_num; gifts_pagid_i++)
        {
            ret = destBuf.writeInt64(this->gifts_pagid[gifts_pagid_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectGiftsPagidList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectGiftsPagidList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectGiftsPagidList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_num */
    {
        ret = destBuf.writeInt32_l(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_pag_num */
    {
        ret = destBuf.writeInt32_l(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->gifts_pagid */
    {
        if (0 > this->iGifts_pag_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (256 < this->iGifts_pag_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t gifts_pagid_i = 0; gifts_pagid_i < this->iGifts_pag_num; gifts_pagid_i++)
        {
            ret = destBuf.writeInt64_l(this->gifts_pagid[gifts_pagid_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectGiftsPagidList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectGiftsPagidList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectGiftsPagidList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_num */
    {
        ret = srcBuf.readInt32(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_pag_num */
    {
        ret = srcBuf.readInt32(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->gifts_pagid */
    {
        if (0 > this->iGifts_pag_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (256 < this->iGifts_pag_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t gifts_pagid_i = 0; gifts_pagid_i < this->iGifts_pag_num; gifts_pagid_i++)
        {
            ret = srcBuf.readInt64(this->gifts_pagid[gifts_pagid_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectGiftsPagidList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectGiftsPagidList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectGiftsPagidList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_num */
    {
        ret = srcBuf.readInt32_l(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_pag_num */
    {
        ret = srcBuf.readInt32_l(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->gifts_pagid */
    {
        if (0 > this->iGifts_pag_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (256 < this->iGifts_pag_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t gifts_pagid_i = 0; gifts_pagid_i < this->iGifts_pag_num; gifts_pagid_i++)
        {
            ret = srcBuf.readInt64_l(this->gifts_pagid[gifts_pagid_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectGiftsPagidList::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGifts_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGifts_num]", "%d", this->iGifts_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGifts_pag_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGifts_pag_num]", "%d", this->iGifts_pag_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->gifts_pagid */
    if (0 > this->iGifts_pag_num)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (256 < this->iGifts_pag_num)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[gifts_pagid]", this->iGifts_pag_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t gifts_pagid_i = 0; gifts_pagid_i < this->iGifts_pag_num; gifts_pagid_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->gifts_pagid[gifts_pagid_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectGiftsPagidList::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectGiftsPagidList::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectIdentityBank::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectIdentityBank::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectIdentityBank::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectIdentityBank::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectIdentityBank::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectIdentityBank::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectIdentityBank::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectIdentityBank::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectIdentityBank::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectIdentityBank::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectIdentityBank::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectIdentityBank::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectIdentityBank::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectIdentityBank::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectIdentityBank::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectIdentityBank::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectIdentityBank::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectIdentityBank::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIdentity_card_count */
    {
        ret = destBuf.writeInt32(this->iIdentity_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szIdentity_card */
    {
        if (0 > this->iIdentity_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (20 < this->iIdentity_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szIdentity_card, this->iIdentity_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBank_card_count */
    {
        ret = destBuf.writeInt32(this->iBank_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szBank_card */
    {
        if (0 > this->iBank_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iBank_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szBank_card, this->iBank_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectIdentityBank::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectIdentityBank::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectIdentityBank::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIdentity_card_count */
    {
        ret = destBuf.writeInt32_l(this->iIdentity_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szIdentity_card */
    {
        if (0 > this->iIdentity_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (20 < this->iIdentity_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szIdentity_card, this->iIdentity_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBank_card_count */
    {
        ret = destBuf.writeInt32_l(this->iBank_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szBank_card */
    {
        if (0 > this->iBank_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iBank_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szBank_card, this->iBank_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectIdentityBank::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectIdentityBank::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectIdentityBank::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIdentity_card_count */
    {
        ret = srcBuf.readInt32(this->iIdentity_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szIdentity_card */
    {
        if (0 > this->iIdentity_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (20 < this->iIdentity_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szIdentity_card, this->iIdentity_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBank_card_count */
    {
        ret = srcBuf.readInt32(this->iBank_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szBank_card */
    {
        if (0 > this->iBank_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iBank_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szBank_card, this->iBank_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectIdentityBank::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectIdentityBank::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectIdentityBank::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIdentity_card_count */
    {
        ret = srcBuf.readInt32_l(this->iIdentity_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szIdentity_card */
    {
        if (0 > this->iIdentity_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (20 < this->iIdentity_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szIdentity_card, this->iIdentity_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBank_card_count */
    {
        ret = srcBuf.readInt32_l(this->iBank_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szBank_card */
    {
        if (0 > this->iBank_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iBank_card_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szBank_card, this->iBank_card_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectIdentityBank::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iIdentity_card_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iIdentity_card_count]", "%d", this->iIdentity_card_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szIdentity_card */
    if (0 > this->iIdentity_card_count)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (20 < this->iIdentity_card_count)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szIdentity_card]", this->iIdentity_card_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szIdentity_card_i = 0; szIdentity_card_i < this->iIdentity_card_count; szIdentity_card_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szIdentity_card[szIdentity_card_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBank_card_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBank_card_count]", "%d", this->iBank_card_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szBank_card */
    if (0 > this->iBank_card_count)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (32 < this->iBank_card_count)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szBank_card]", this->iBank_card_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szBank_card_i = 0; szBank_card_i < this->iBank_card_count; szBank_card_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szBank_card[szBank_card_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectIdentityBank::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectIdentityBank::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_UserComplaint_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_UserComplaint_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_UserComplaint_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_UserComplaint_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_UserComplaint_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_UserComplaint_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_UserComplaint_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llCom_uid */
    {
        ret = destBuf.writeInt64(this->llCom_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCom_phone */
    {
        ret = destBuf.writeInt64(this->llCom_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llTo_uid */
    {
        ret = destBuf.writeInt64(this->llTo_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llTo_phone */
    {
        ret = destBuf.writeInt64(this->llTo_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDescLen */
    {
        ret = destBuf.writeInt32(this->iDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szDesc */
    {
        if (0 > this->iDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_USER_COMPLAINT_DESC_LEN < this->iDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szDesc, this->iDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrder_id */
    {
        ret = destBuf.writeInt64(this->llOrder_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_UserComplaint_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_UserComplaint_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_UserComplaint_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_UserComplaint_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llCom_uid */
    {
        ret = destBuf.writeInt64_l(this->llCom_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCom_phone */
    {
        ret = destBuf.writeInt64_l(this->llCom_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llTo_uid */
    {
        ret = destBuf.writeInt64_l(this->llTo_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llTo_phone */
    {
        ret = destBuf.writeInt64_l(this->llTo_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDescLen */
    {
        ret = destBuf.writeInt32_l(this->iDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szDesc */
    {
        if (0 > this->iDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_USER_COMPLAINT_DESC_LEN < this->iDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szDesc, this->iDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrder_id */
    {
        ret = destBuf.writeInt64_l(this->llOrder_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_UserComplaint_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_UserComplaint_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_UserComplaint_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_UserComplaint_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_UserComplaint_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_UserComplaint_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llCom_uid */
    {
        ret = srcBuf.readInt64(this->llCom_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCom_phone */
    {
        ret = srcBuf.readInt64(this->llCom_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llTo_uid */
    {
        ret = srcBuf.readInt64(this->llTo_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llTo_phone */
    {
        ret = srcBuf.readInt64(this->llTo_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDescLen */
    {
        ret = srcBuf.readInt32(this->iDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szDesc */
    {
        if (0 > this->iDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_USER_COMPLAINT_DESC_LEN < this->iDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szDesc, this->iDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrder_id */
    {
        ret = srcBuf.readInt64(this->llOrder_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_UserComplaint_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_UserComplaint_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_UserComplaint_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_UserComplaint_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llCom_uid */
    {
        ret = srcBuf.readInt64_l(this->llCom_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCom_phone */
    {
        ret = srcBuf.readInt64_l(this->llCom_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llTo_uid */
    {
        ret = srcBuf.readInt64_l(this->llTo_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llTo_phone */
    {
        ret = srcBuf.readInt64_l(this->llTo_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDescLen */
    {
        ret = srcBuf.readInt32_l(this->iDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szDesc */
    {
        if (0 > this->iDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_USER_COMPLAINT_DESC_LEN < this->iDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szDesc, this->iDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrder_id */
    {
        ret = srcBuf.readInt64_l(this->llOrder_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_UserComplaint_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_UserComplaint_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llCom_uid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCom_uid]", TDR_CPP_INT64_FORMAT, this->llCom_uid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCom_phone */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCom_phone]", TDR_CPP_INT64_FORMAT, this->llCom_phone);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llTo_uid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llTo_uid]", TDR_CPP_INT64_FORMAT, this->llTo_uid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llTo_phone */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llTo_phone]", TDR_CPP_INT64_FORMAT, this->llTo_phone);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDescLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDescLen]", "%d", this->iDescLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szDesc */
    if (0 > this->iDescLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_USER_COMPLAINT_DESC_LEN < this->iDescLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szDesc]", this->iDescLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szDesc_i = 0; szDesc_i < this->iDescLen; szDesc_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szDesc[szDesc_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llOrder_id */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrder_id]", TDR_CPP_INT64_FORMAT, this->llOrder_id);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_UserComplaint_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_UserComplaint_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_UserComplaint_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_UserComplaint_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_UserComplaint_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_UserComplaint_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_UserComplaint_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_UserComplaint_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_UserComplaint_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_UserComplaint_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_UserComplaint_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_UserComplaint_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_UserComplaint_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_UserComplaint_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_UserComplaint_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_UserComplaint_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_UserComplaint_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_UserComplaint_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_UserComplaint_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_UserComplaint_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_UserComplaint_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_UserComplaint_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_UserComplaint_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_UserComplaint_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_UserComplaint_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_UserComplaint_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_UserComplaint_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectVisitorsList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectVisitorsList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectVisitorsList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectVisitorsList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectVisitorsList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectVisitorsList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectVisitorsList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectVisitorsList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectVisitorsList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectVisitorsList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectVisitorsList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectVisitorsList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectVisitorsList::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectVisitorsList::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectVisitorsList::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectVisitorsList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectVisitorsList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectVisitorsList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVisitor_count */
    {
        ret = destBuf.writeInt32(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->visitors */
    {
        if (0 > this->iVisitor_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iVisitor_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t visitors_i = 0; visitors_i < this->iVisitor_count; visitors_i++)
        {
            ret = destBuf.writeInt64(this->visitors[visitors_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectVisitorsList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectVisitorsList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectVisitorsList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVisitor_count */
    {
        ret = destBuf.writeInt32_l(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->visitors */
    {
        if (0 > this->iVisitor_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iVisitor_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t visitors_i = 0; visitors_i < this->iVisitor_count; visitors_i++)
        {
            ret = destBuf.writeInt64_l(this->visitors[visitors_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectVisitorsList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectVisitorsList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectVisitorsList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVisitor_count */
    {
        ret = srcBuf.readInt32(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->visitors */
    {
        if (0 > this->iVisitor_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iVisitor_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t visitors_i = 0; visitors_i < this->iVisitor_count; visitors_i++)
        {
            ret = srcBuf.readInt64(this->visitors[visitors_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectVisitorsList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectVisitorsList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectVisitorsList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVisitor_count */
    {
        ret = srcBuf.readInt32_l(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->visitors */
    {
        if (0 > this->iVisitor_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iVisitor_count)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t visitors_i = 0; visitors_i < this->iVisitor_count; visitors_i++)
        {
            ret = srcBuf.readInt64_l(this->visitors[visitors_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectVisitorsList::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVisitor_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVisitor_count]", "%d", this->iVisitor_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->visitors */
    if (0 > this->iVisitor_count)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (32 < this->iVisitor_count)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[visitors]", this->iVisitor_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t visitors_i = 0; visitors_i < this->iVisitor_count; visitors_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->visitors[visitors_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectVisitorsList::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectVisitorsList::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectParticulars::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectParticulars::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectParticulars::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectParticulars::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectParticulars::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectParticulars::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectParticulars::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectParticulars::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectParticulars::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectParticulars::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectParticulars::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectParticulars::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectParticulars::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectParticulars::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectParticulars::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectParticulars::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectParticulars::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectParticulars::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwParticularsLen */
    {
        ret = destBuf.writeUInt32(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (512 < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectParticulars::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectParticulars::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectParticulars::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwParticularsLen */
    {
        ret = destBuf.writeUInt32_l(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (512 < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectParticulars::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectParticulars::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectParticulars::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwParticularsLen */
    {
        ret = srcBuf.readUInt32(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (512 < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectParticulars::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectParticulars::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectParticulars::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwParticularsLen */
    {
        ret = srcBuf.readUInt32_l(this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (512 < this->dwParticularsLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->dwParticularsLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectParticulars::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwParticularsLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwParticularsLen]", "%u", this->dwParticularsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szParticulars */
    if (512 < this->dwParticularsLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szParticulars]", this->dwParticularsLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (uint32_t szParticulars_i = 0; szParticulars_i < this->dwParticularsLen; szParticulars_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szParticulars[szParticulars_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectParticulars::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectParticulars::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeOrderDone::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDone::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDone::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDone::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDone::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDone::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRequestType */
    {
        ret = destBuf.writeInt32(this->iRequestType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDone::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDone::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDone::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRequestType */
    {
        ret = destBuf.writeInt32_l(this->iRequestType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDone::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDone::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDone::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDone::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDone::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRequestType */
    {
        ret = srcBuf.readInt32(this->iRequestType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDone::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDone::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDone::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRequestType */
    {
        ret = srcBuf.readInt32_l(this->iRequestType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDone::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDone::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRequestType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRequestType]", "%d", this->iRequestType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeOrderDone::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeOrderDone::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeRsponseAccessClientOrderDone::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderDone::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderDone::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderDone::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRsponseAccessClientOrderDone::CURRVERSION < cutVer)
    {
        cutVer = TradeRsponseAccessClientOrderDone::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRsponseAccessClientOrderDone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderDone::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRsponseAccessClientOrderDone::CURRVERSION < cutVer)
    {
        cutVer = TradeRsponseAccessClientOrderDone::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRsponseAccessClientOrderDone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderDone::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderDone::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderDone::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRsponseAccessClientOrderDone::CURRVERSION < cutVer)
    {
        cutVer = TradeRsponseAccessClientOrderDone::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRsponseAccessClientOrderDone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderDone::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRsponseAccessClientOrderDone::CURRVERSION < cutVer)
    {
        cutVer = TradeRsponseAccessClientOrderDone::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRsponseAccessClientOrderDone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderDone::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderDone::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeRsponseAccessClientOrderDone::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeRsponseAccessClientOrderDone::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderClosedown::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderClosedown::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderClosedown::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderClosedown::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderClosedown::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderClosedown::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderClosedown::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderClosedown::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderClosedown::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderClosedown::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderClosedown::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderClosedown::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderClosedown::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeOrderClosedown::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeOrderClosedown::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRsponseAccessClientOrderClosedown::CURRVERSION < cutVer)
    {
        cutVer = TradeRsponseAccessClientOrderClosedown::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRsponseAccessClientOrderClosedown::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRsponseAccessClientOrderClosedown::CURRVERSION < cutVer)
    {
        cutVer = TradeRsponseAccessClientOrderClosedown::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRsponseAccessClientOrderClosedown::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRsponseAccessClientOrderClosedown::CURRVERSION < cutVer)
    {
        cutVer = TradeRsponseAccessClientOrderClosedown::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRsponseAccessClientOrderClosedown::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRsponseAccessClientOrderClosedown::CURRVERSION < cutVer)
    {
        cutVer = TradeRsponseAccessClientOrderClosedown::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRsponseAccessClientOrderClosedown::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessClientOrderClosedown::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeRsponseAccessClientOrderClosedown::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeRsponseAccessClientOrderClosedown::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ApplyerUserInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ApplyerUserInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ApplyerUserInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ApplyerUserInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ApplyerUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ApplyerUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ApplyerUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bGender */
    {
        ret = destBuf.writeUInt8(this->bGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIntegrity_level */
    {
        ret = destBuf.writeInt32(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDimension */
    {
        ret = destBuf.writeInt64(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIsFriend */
    {
        ret = destBuf.writeInt32(this->iIsFriend);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSincerityValue */
    {
        ret = destBuf.writeInt32(this->iSincerityValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderApplyFiniCount */
    {
        ret = destBuf.writeInt32(this->iOrderApplyFiniCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ApplyerUserInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ApplyerUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ApplyerUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ApplyerUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bGender */
    {
        ret = destBuf.writeUInt8(this->bGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIntegrity_level */
    {
        ret = destBuf.writeInt32_l(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDimension */
    {
        ret = destBuf.writeInt64_l(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIsFriend */
    {
        ret = destBuf.writeInt32_l(this->iIsFriend);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSincerityValue */
    {
        ret = destBuf.writeInt32_l(this->iSincerityValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrderApplyFiniCount */
    {
        ret = destBuf.writeInt32_l(this->iOrderApplyFiniCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ApplyerUserInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ApplyerUserInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ApplyerUserInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ApplyerUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ApplyerUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ApplyerUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bGender */
    {
        ret = srcBuf.readUInt8(this->bGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIntegrity_level */
    {
        ret = srcBuf.readInt32(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDimension */
    {
        ret = srcBuf.readInt64(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIsFriend */
    {
        ret = srcBuf.readInt32(this->iIsFriend);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSincerityValue */
    {
        ret = srcBuf.readInt32(this->iSincerityValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderApplyFiniCount */
    {
        ret = srcBuf.readInt32(this->iOrderApplyFiniCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ApplyerUserInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ApplyerUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ApplyerUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ApplyerUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bGender */
    {
        ret = srcBuf.readUInt8(this->bGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIntegrity_level */
    {
        ret = srcBuf.readInt32_l(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDimension */
    {
        ret = srcBuf.readInt64_l(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIsFriend */
    {
        ret = srcBuf.readInt32_l(this->iIsFriend);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSincerityValue */
    {
        ret = srcBuf.readInt32_l(this->iSincerityValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrderApplyFiniCount */
    {
        ret = srcBuf.readInt32_l(this->iOrderApplyFiniCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ApplyerUserInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ApplyerUserInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPortrait */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPortrait]", TDR_CPP_INT64_FORMAT, this->llPortrait);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickName */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickName]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickName_i = 0; szNickName_i < this->iNickNameLen; szNickName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickName[szNickName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llBirthday */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llBirthday]", TDR_CPP_INT64_FORMAT, this->llBirthday);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bGender]", "0x%02x", this->bGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iIntegrity_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iIntegrity_level]", "%d", this->iIntegrity_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLongitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLongitude]", TDR_CPP_INT64_FORMAT, this->llLongitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llDimension */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llDimension]", TDR_CPP_INT64_FORMAT, this->llDimension);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iIsFriend */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iIsFriend]", "%d", this->iIsFriend);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSincerityValue */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSincerityValue]", "%d", this->iSincerityValue);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrderApplyFiniCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrderApplyFiniCount]", "%d", this->iOrderApplyFiniCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ApplyerUserInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ApplyerUserInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectApplyerUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectApplyerUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectApplyerUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iUidCount */
    {
        ret = destBuf.writeInt32(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = destBuf.writeInt64(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectApplyerUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectApplyerUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectApplyerUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iUidCount */
    {
        ret = destBuf.writeInt32_l(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = destBuf.writeInt64_l(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectApplyerUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectApplyerUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectApplyerUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iUidCount */
    {
        ret = srcBuf.readInt32(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = srcBuf.readInt64(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectApplyerUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectApplyerUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectApplyerUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iUidCount */
    {
        ret = srcBuf.readInt32_l(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->uidList */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
        {
            ret = srcBuf.readInt64_l(this->uidList[uidList_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectApplyerUserInfoList::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iUidCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iUidCount]", "%d", this->iUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->uidList */
    if (0 > this->iUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT < this->iUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[uidList]", this->iUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t uidList_i = 0; uidList_i < this->iUidCount; uidList_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->uidList[uidList_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectApplyerUserInfoList::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectApplyerUserInfoList::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectApplyerUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectApplyerUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectApplyerUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyerUserInfoCount */
    {
        ret = destBuf.writeInt32(this->iApplyerUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astApplyerUserInfoList */
    {
        if (0 > this->iApplyerUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT < this->iApplyerUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astApplyerUserInfoList_i = 0; astApplyerUserInfoList_i < this->iApplyerUserInfoCount; astApplyerUserInfoList_i++)
        {
            ret = this->astApplyerUserInfoList[astApplyerUserInfoList_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectApplyerUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectApplyerUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectApplyerUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyerUserInfoCount */
    {
        ret = destBuf.writeInt32_l(this->iApplyerUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astApplyerUserInfoList */
    {
        if (0 > this->iApplyerUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT < this->iApplyerUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astApplyerUserInfoList_i = 0; astApplyerUserInfoList_i < this->iApplyerUserInfoCount; astApplyerUserInfoList_i++)
        {
            ret = this->astApplyerUserInfoList[astApplyerUserInfoList_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectApplyerUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectApplyerUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectApplyerUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyerUserInfoCount */
    {
        ret = srcBuf.readInt32(this->iApplyerUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astApplyerUserInfoList */
    {
        if (0 > this->iApplyerUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT < this->iApplyerUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astApplyerUserInfoList_i = 0; astApplyerUserInfoList_i < this->iApplyerUserInfoCount; astApplyerUserInfoList_i++)
        {
            ret = this->astApplyerUserInfoList[astApplyerUserInfoList_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectApplyerUserInfoList::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectApplyerUserInfoList::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectApplyerUserInfoList::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyerUserInfoCount */
    {
        ret = srcBuf.readInt32_l(this->iApplyerUserInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astApplyerUserInfoList */
    {
        if (0 > this->iApplyerUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT < this->iApplyerUserInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astApplyerUserInfoList_i = 0; astApplyerUserInfoList_i < this->iApplyerUserInfoCount; astApplyerUserInfoList_i++)
        {
            ret = this->astApplyerUserInfoList[astApplyerUserInfoList_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectApplyerUserInfoList::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApplyerUserInfoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApplyerUserInfoCount]", "%d", this->iApplyerUserInfoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astApplyerUserInfoList */
    if (0 > this->iApplyerUserInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT < this->iApplyerUserInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astApplyerUserInfoList_i = 0; astApplyerUserInfoList_i < this->iApplyerUserInfoCount; astApplyerUserInfoList_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astApplyerUserInfoList]", astApplyerUserInfoList_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astApplyerUserInfoList[astApplyerUserInfoList_i] */
        if (0 > indent)
        {
            ret = this->astApplyerUserInfoList[astApplyerUserInfoList_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astApplyerUserInfoList[astApplyerUserInfoList_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectApplyerUserInfoList::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectApplyerUserInfoList::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientNotifyTradeUserGisInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientNotifyTradeUserGisInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNotifyTradeUserGisInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNotifyTradeUserGisInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNotifyTradeUserGisInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientNotifyTradeUserGisInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNotifyTradeUserGisInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->stGISInfo */
    {
        ret = this->stGISInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVersionType */
    if (ClientNotifyTradeUserGisInfo::VERSION_iVersionType <= cutVer)
    {
        ret = destBuf.writeInt32(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientNotifyTradeUserGisInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNotifyTradeUserGisInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientNotifyTradeUserGisInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNotifyTradeUserGisInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->stGISInfo */
    {
        ret = this->stGISInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVersionType */
    if (ClientNotifyTradeUserGisInfo::VERSION_iVersionType <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientNotifyTradeUserGisInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNotifyTradeUserGisInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNotifyTradeUserGisInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNotifyTradeUserGisInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientNotifyTradeUserGisInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNotifyTradeUserGisInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->stGISInfo */
    {
        ret = this->stGISInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVersionType */
    if (ClientNotifyTradeUserGisInfo::VERSION_iVersionType <= cutVer)
    {
        ret = srcBuf.readInt32(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iVersionType = 0;
    }

    return ret;
}

TdrError::ErrorType
ClientNotifyTradeUserGisInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientNotifyTradeUserGisInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientNotifyTradeUserGisInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientNotifyTradeUserGisInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->stGISInfo */
    {
        ret = this->stGISInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVersionType */
    if (ClientNotifyTradeUserGisInfo::VERSION_iVersionType <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iVersionType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iVersionType = 0;
    }

    return ret;
}

TdrError::ErrorType
ClientNotifyTradeUserGisInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientNotifyTradeUserGisInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->stGISInfo */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stGISInfo]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stGISInfo */
    if (0 > indent)
    {
        ret = this->stGISInfo.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stGISInfo.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVersionType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVersionType]", "%d", this->iVersionType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientNotifyTradeUserGisInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientNotifyTradeUserGisInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseClientUserGisInfoResult::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseClientUserGisInfoResult::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseClientUserGisInfoResult::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseClientUserGisInfoResult::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseClientUserGisInfoResult::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseClientUserGisInfoResult::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseClientUserGisInfoResult::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseClientUserGisInfoResult::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseClientUserGisInfoResult::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseClientUserGisInfoResult::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseClientUserGisInfoResult::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseClientUserGisInfoResult::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseClientUserGisInfoResult::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseClientUserGisInfoResult::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseClientUserGisInfoResult::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseClientUserGisInfoResult::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseClientUserGisInfoResult::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseClientUserGisInfoResult::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseClientUserGisInfoResult::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseClientUserGisInfoResult::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseClientUserGisInfoResult::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseClientUserGisInfoResult::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseClientUserGisInfoResult::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseClientUserGisInfoResult::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseClientUserGisInfoResult::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
Apply_info::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
Apply_info::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Apply_info::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Apply_info::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Apply_info::CURRVERSION < cutVer)
    {
        cutVer = Apply_info::CURRVERSION;
    }

    /* check cutversion */
    if (Apply_info::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iStatus */
    {
        ret = destBuf.writeInt32(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApply_time */
    {
        ret = destBuf.writeInt32(this->iApply_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
Apply_info::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Apply_info::CURRVERSION < cutVer)
    {
        cutVer = Apply_info::CURRVERSION;
    }

    /* check cutversion */
    if (Apply_info::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iStatus */
    {
        ret = destBuf.writeInt32_l(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApply_time */
    {
        ret = destBuf.writeInt32_l(this->iApply_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
Apply_info::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Apply_info::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Apply_info::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Apply_info::CURRVERSION < cutVer)
    {
        cutVer = Apply_info::CURRVERSION;
    }

    /* check cutversion */
    if (Apply_info::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iStatus */
    {
        ret = srcBuf.readInt32(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApply_time */
    {
        ret = srcBuf.readInt32(this->iApply_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
Apply_info::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Apply_info::CURRVERSION < cutVer)
    {
        cutVer = Apply_info::CURRVERSION;
    }

    /* check cutversion */
    if (Apply_info::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iStatus */
    {
        ret = srcBuf.readInt32_l(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApply_time */
    {
        ret = srcBuf.readInt32_l(this->iApply_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
Apply_info::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Apply_info::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iStatus]", "%d", this->iStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApply_time */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApply_time]", "%d", this->iApply_time);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
Apply_info::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
Apply_info::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
Audio_info::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
Audio_info::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Audio_info::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Audio_info::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Audio_info::CURRVERSION < cutVer)
    {
        cutVer = Audio_info::CURRVERSION;
    }

    /* check cutversion */
    if (Audio_info::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llAudio_id */
    {
        ret = destBuf.writeInt64(this->llAudio_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSeconds */
    {
        ret = destBuf.writeInt32(this->iSeconds);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
Audio_info::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Audio_info::CURRVERSION < cutVer)
    {
        cutVer = Audio_info::CURRVERSION;
    }

    /* check cutversion */
    if (Audio_info::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llAudio_id */
    {
        ret = destBuf.writeInt64_l(this->llAudio_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSeconds */
    {
        ret = destBuf.writeInt32_l(this->iSeconds);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
Audio_info::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Audio_info::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Audio_info::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Audio_info::CURRVERSION < cutVer)
    {
        cutVer = Audio_info::CURRVERSION;
    }

    /* check cutversion */
    if (Audio_info::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llAudio_id */
    {
        ret = srcBuf.readInt64(this->llAudio_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSeconds */
    {
        ret = srcBuf.readInt32(this->iSeconds);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
Audio_info::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Audio_info::CURRVERSION < cutVer)
    {
        cutVer = Audio_info::CURRVERSION;
    }

    /* check cutversion */
    if (Audio_info::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llAudio_id */
    {
        ret = srcBuf.readInt64_l(this->llAudio_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSeconds */
    {
        ret = srcBuf.readInt32_l(this->iSeconds);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
Audio_info::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Audio_info::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llAudio_id */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llAudio_id]", TDR_CPP_INT64_FORMAT, this->llAudio_id);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSeconds */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSeconds]", "%d", this->iSeconds);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
Audio_info::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
Audio_info::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderDetailsInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderDetailsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderDetailsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderDetailsInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderDetailsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderDetailsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderDetailsInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderDetailsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderDetailsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeSelectOrderDetailsInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeSelectOrderDetailsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeSelectOrderDetailsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeSelectOrderDetailsInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeSelectOrderDetailsInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeSelectOrderDetailsInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderDetailsInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderDetailsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderDetailsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreater_uid */
    {
        ret = destBuf.writeInt64(this->llCreater_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreater_phone */
    {
        ret = destBuf.writeInt64(this->llCreater_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llApplyer_phone */
    {
        ret = destBuf.writeInt64(this->llApplyer_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iStatus */
    {
        ret = destBuf.writeInt32(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iType */
    {
        ret = destBuf.writeInt32(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreate_time */
    {
        ret = destBuf.writeInt32(this->iCreate_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoney_type */
    {
        ret = destBuf.writeInt32(this->iMoney_type);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoney_num */
    {
        ret = destBuf.writeInt32(this->iMoney_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDimension */
    {
        ret = destBuf.writeInt64(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iParticulars_len */
    {
        ret = destBuf.writeInt32(this->iParticulars_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (0 > this->iParticulars_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (2048 < this->iParticulars_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->iParticulars_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPos_info_len */
    {
        ret = destBuf.writeInt32(this->iPos_info_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPos_info */
    {
        if (0 > this->iPos_info_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (128 < this->iPos_info_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPos_info, this->iPos_info_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApply_num */
    {
        ret = destBuf.writeInt32(this->iApply_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astApply_info_list */
    {
        if (0 > this->iApply_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (256 < this->iApply_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astApply_info_list_i = 0; astApply_info_list_i < this->iApply_num; astApply_info_list_i++)
        {
            ret = this->astApply_info_list[astApply_info_list_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iPicture_num */
    {
        ret = destBuf.writeInt32(this->iPicture_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->pictureid_list */
    {
        if (0 > this->iPicture_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iPicture_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureid_list_i = 0; pictureid_list_i < this->iPicture_num; pictureid_list_i++)
        {
            ret = destBuf.writeInt64(this->pictureid_list[pictureid_list_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iAudio_num */
    {
        ret = destBuf.writeInt32(this->iAudio_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astAudio_info_list */
    {
        if (0 > this->iAudio_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (16 < this->iAudio_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudio_info_list_i = 0; astAudio_info_list_i < this->iAudio_num; astAudio_info_list_i++)
        {
            ret = this->astAudio_info_list[astAudio_info_list_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->llDiscuss_head_id */
    {
        ret = destBuf.writeInt64(this->llDiscuss_head_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDiscuss_tail_id */
    {
        ret = destBuf.writeInt64(this->llDiscuss_tail_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iScore */
    {
        ret = destBuf.writeInt32(this->iScore);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSincerity_value */
    {
        ret = destBuf.writeInt32(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iO_apply_fini_num */
    {
        ret = destBuf.writeInt32(this->iO_apply_fini_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llApplyer_uid */
    {
        ret = destBuf.writeInt64(this->llApplyer_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreater_gender */
    {
        ret = destBuf.writeInt32(this->iCreater_gender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyer_gender */
    {
        ret = destBuf.writeInt32(this->iApplyer_gender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreater_birth */
    {
        ret = destBuf.writeInt64(this->llCreater_birth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llApplyer_birth */
    {
        ret = destBuf.writeInt64(this->llApplyer_birth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreater_nickname_len */
    {
        ret = destBuf.writeInt32(this->iCreater_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szCreater_nickname */
    {
        if (0 > this->iCreater_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreater_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szCreater_nickname, this->iCreater_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyer_nickname_len */
    {
        ret = destBuf.writeInt32(this->iApplyer_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szApplyer_nickname */
    {
        if (0 > this->iApplyer_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iApplyer_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szApplyer_nickname, this->iApplyer_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApply_status */
    {
        ret = destBuf.writeInt32(this->iApply_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderDetailsInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderDetailsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderDetailsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreater_uid */
    {
        ret = destBuf.writeInt64_l(this->llCreater_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreater_phone */
    {
        ret = destBuf.writeInt64_l(this->llCreater_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llApplyer_phone */
    {
        ret = destBuf.writeInt64_l(this->llApplyer_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iStatus */
    {
        ret = destBuf.writeInt32_l(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iType */
    {
        ret = destBuf.writeInt32_l(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreate_time */
    {
        ret = destBuf.writeInt32_l(this->iCreate_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoney_type */
    {
        ret = destBuf.writeInt32_l(this->iMoney_type);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMoney_num */
    {
        ret = destBuf.writeInt32_l(this->iMoney_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDimension */
    {
        ret = destBuf.writeInt64_l(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iParticulars_len */
    {
        ret = destBuf.writeInt32_l(this->iParticulars_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szParticulars */
    {
        if (0 > this->iParticulars_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (2048 < this->iParticulars_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szParticulars, this->iParticulars_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPos_info_len */
    {
        ret = destBuf.writeInt32_l(this->iPos_info_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szPos_info */
    {
        if (0 > this->iPos_info_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (128 < this->iPos_info_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szPos_info, this->iPos_info_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApply_num */
    {
        ret = destBuf.writeInt32_l(this->iApply_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astApply_info_list */
    {
        if (0 > this->iApply_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (256 < this->iApply_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astApply_info_list_i = 0; astApply_info_list_i < this->iApply_num; astApply_info_list_i++)
        {
            ret = this->astApply_info_list[astApply_info_list_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iPicture_num */
    {
        ret = destBuf.writeInt32_l(this->iPicture_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->pictureid_list */
    {
        if (0 > this->iPicture_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iPicture_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureid_list_i = 0; pictureid_list_i < this->iPicture_num; pictureid_list_i++)
        {
            ret = destBuf.writeInt64_l(this->pictureid_list[pictureid_list_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iAudio_num */
    {
        ret = destBuf.writeInt32_l(this->iAudio_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astAudio_info_list */
    {
        if (0 > this->iAudio_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (16 < this->iAudio_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudio_info_list_i = 0; astAudio_info_list_i < this->iAudio_num; astAudio_info_list_i++)
        {
            ret = this->astAudio_info_list[astAudio_info_list_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->llDiscuss_head_id */
    {
        ret = destBuf.writeInt64_l(this->llDiscuss_head_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDiscuss_tail_id */
    {
        ret = destBuf.writeInt64_l(this->llDiscuss_tail_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iScore */
    {
        ret = destBuf.writeInt32_l(this->iScore);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSincerity_value */
    {
        ret = destBuf.writeInt32_l(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iO_apply_fini_num */
    {
        ret = destBuf.writeInt32_l(this->iO_apply_fini_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llApplyer_uid */
    {
        ret = destBuf.writeInt64_l(this->llApplyer_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreater_gender */
    {
        ret = destBuf.writeInt32_l(this->iCreater_gender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyer_gender */
    {
        ret = destBuf.writeInt32_l(this->iApplyer_gender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCreater_birth */
    {
        ret = destBuf.writeInt64_l(this->llCreater_birth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llApplyer_birth */
    {
        ret = destBuf.writeInt64_l(this->llApplyer_birth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCreater_nickname_len */
    {
        ret = destBuf.writeInt32_l(this->iCreater_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szCreater_nickname */
    {
        if (0 > this->iCreater_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreater_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szCreater_nickname, this->iCreater_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApplyer_nickname_len */
    {
        ret = destBuf.writeInt32_l(this->iApplyer_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szApplyer_nickname */
    {
        if (0 > this->iApplyer_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iApplyer_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szApplyer_nickname, this->iApplyer_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iApply_status */
    {
        ret = destBuf.writeInt32_l(this->iApply_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderDetailsInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderDetailsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderDetailsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreater_uid */
    {
        ret = srcBuf.readInt64(this->llCreater_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreater_phone */
    {
        ret = srcBuf.readInt64(this->llCreater_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llApplyer_phone */
    {
        ret = srcBuf.readInt64(this->llApplyer_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iStatus */
    {
        ret = srcBuf.readInt32(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iType */
    {
        ret = srcBuf.readInt32(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreate_time */
    {
        ret = srcBuf.readInt32(this->iCreate_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoney_type */
    {
        ret = srcBuf.readInt32(this->iMoney_type);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoney_num */
    {
        ret = srcBuf.readInt32(this->iMoney_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDimension */
    {
        ret = srcBuf.readInt64(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iParticulars_len */
    {
        ret = srcBuf.readInt32(this->iParticulars_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (0 > this->iParticulars_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (2048 < this->iParticulars_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->iParticulars_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPos_info_len */
    {
        ret = srcBuf.readInt32(this->iPos_info_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPos_info */
    {
        if (0 > this->iPos_info_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (128 < this->iPos_info_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPos_info, this->iPos_info_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApply_num */
    {
        ret = srcBuf.readInt32(this->iApply_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astApply_info_list */
    {
        if (0 > this->iApply_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (256 < this->iApply_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astApply_info_list_i = 0; astApply_info_list_i < this->iApply_num; astApply_info_list_i++)
        {
            ret = this->astApply_info_list[astApply_info_list_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iPicture_num */
    {
        ret = srcBuf.readInt32(this->iPicture_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->pictureid_list */
    {
        if (0 > this->iPicture_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iPicture_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureid_list_i = 0; pictureid_list_i < this->iPicture_num; pictureid_list_i++)
        {
            ret = srcBuf.readInt64(this->pictureid_list[pictureid_list_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iAudio_num */
    {
        ret = srcBuf.readInt32(this->iAudio_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astAudio_info_list */
    {
        if (0 > this->iAudio_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (16 < this->iAudio_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudio_info_list_i = 0; astAudio_info_list_i < this->iAudio_num; astAudio_info_list_i++)
        {
            ret = this->astAudio_info_list[astAudio_info_list_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->llDiscuss_head_id */
    {
        ret = srcBuf.readInt64(this->llDiscuss_head_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDiscuss_tail_id */
    {
        ret = srcBuf.readInt64(this->llDiscuss_tail_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iScore */
    {
        ret = srcBuf.readInt32(this->iScore);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSincerity_value */
    {
        ret = srcBuf.readInt32(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iO_apply_fini_num */
    {
        ret = srcBuf.readInt32(this->iO_apply_fini_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llApplyer_uid */
    {
        ret = srcBuf.readInt64(this->llApplyer_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreater_gender */
    {
        ret = srcBuf.readInt32(this->iCreater_gender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyer_gender */
    {
        ret = srcBuf.readInt32(this->iApplyer_gender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreater_birth */
    {
        ret = srcBuf.readInt64(this->llCreater_birth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llApplyer_birth */
    {
        ret = srcBuf.readInt64(this->llApplyer_birth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreater_nickname_len */
    {
        ret = srcBuf.readInt32(this->iCreater_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szCreater_nickname */
    {
        if (0 > this->iCreater_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreater_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szCreater_nickname, this->iCreater_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyer_nickname_len */
    {
        ret = srcBuf.readInt32(this->iApplyer_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szApplyer_nickname */
    {
        if (0 > this->iApplyer_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iApplyer_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szApplyer_nickname, this->iApplyer_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApply_status */
    {
        ret = srcBuf.readInt32(this->iApply_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientSelectOrderDetailsInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientSelectOrderDetailsInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientSelectOrderDetailsInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreater_uid */
    {
        ret = srcBuf.readInt64_l(this->llCreater_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreater_phone */
    {
        ret = srcBuf.readInt64_l(this->llCreater_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llApplyer_phone */
    {
        ret = srcBuf.readInt64_l(this->llApplyer_phone);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iStatus */
    {
        ret = srcBuf.readInt32_l(this->iStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iType */
    {
        ret = srcBuf.readInt32_l(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreate_time */
    {
        ret = srcBuf.readInt32_l(this->iCreate_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoney_type */
    {
        ret = srcBuf.readInt32_l(this->iMoney_type);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMoney_num */
    {
        ret = srcBuf.readInt32_l(this->iMoney_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDimension */
    {
        ret = srcBuf.readInt64_l(this->llDimension);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iParticulars_len */
    {
        ret = srcBuf.readInt32_l(this->iParticulars_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szParticulars */
    {
        if (0 > this->iParticulars_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (2048 < this->iParticulars_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szParticulars, this->iParticulars_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPos_info_len */
    {
        ret = srcBuf.readInt32_l(this->iPos_info_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szPos_info */
    {
        if (0 > this->iPos_info_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (128 < this->iPos_info_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szPos_info, this->iPos_info_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApply_num */
    {
        ret = srcBuf.readInt32_l(this->iApply_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astApply_info_list */
    {
        if (0 > this->iApply_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (256 < this->iApply_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astApply_info_list_i = 0; astApply_info_list_i < this->iApply_num; astApply_info_list_i++)
        {
            ret = this->astApply_info_list[astApply_info_list_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iPicture_num */
    {
        ret = srcBuf.readInt32_l(this->iPicture_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->pictureid_list */
    {
        if (0 > this->iPicture_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (32 < this->iPicture_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t pictureid_list_i = 0; pictureid_list_i < this->iPicture_num; pictureid_list_i++)
        {
            ret = srcBuf.readInt64_l(this->pictureid_list[pictureid_list_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iAudio_num */
    {
        ret = srcBuf.readInt32_l(this->iAudio_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astAudio_info_list */
    {
        if (0 > this->iAudio_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (16 < this->iAudio_num)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astAudio_info_list_i = 0; astAudio_info_list_i < this->iAudio_num; astAudio_info_list_i++)
        {
            ret = this->astAudio_info_list[astAudio_info_list_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->llDiscuss_head_id */
    {
        ret = srcBuf.readInt64_l(this->llDiscuss_head_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDiscuss_tail_id */
    {
        ret = srcBuf.readInt64_l(this->llDiscuss_tail_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iScore */
    {
        ret = srcBuf.readInt32_l(this->iScore);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSincerity_value */
    {
        ret = srcBuf.readInt32_l(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iO_apply_fini_num */
    {
        ret = srcBuf.readInt32_l(this->iO_apply_fini_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llApplyer_uid */
    {
        ret = srcBuf.readInt64_l(this->llApplyer_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreater_gender */
    {
        ret = srcBuf.readInt32_l(this->iCreater_gender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyer_gender */
    {
        ret = srcBuf.readInt32_l(this->iApplyer_gender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCreater_birth */
    {
        ret = srcBuf.readInt64_l(this->llCreater_birth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llApplyer_birth */
    {
        ret = srcBuf.readInt64_l(this->llApplyer_birth);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCreater_nickname_len */
    {
        ret = srcBuf.readInt32_l(this->iCreater_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szCreater_nickname */
    {
        if (0 > this->iCreater_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iCreater_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szCreater_nickname, this->iCreater_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApplyer_nickname_len */
    {
        ret = srcBuf.readInt32_l(this->iApplyer_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szApplyer_nickname */
    {
        if (0 > this->iApplyer_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iApplyer_nickname_len)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szApplyer_nickname, this->iApplyer_nickname_len);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iApply_status */
    {
        ret = srcBuf.readInt32_l(this->iApply_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientSelectOrderDetailsInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCreater_uid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCreater_uid]", TDR_CPP_INT64_FORMAT, this->llCreater_uid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCreater_phone */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCreater_phone]", TDR_CPP_INT64_FORMAT, this->llCreater_phone);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llApplyer_phone */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llApplyer_phone]", TDR_CPP_INT64_FORMAT, this->llApplyer_phone);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iStatus]", "%d", this->iStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iType]", "%d", this->iType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGender]", "%d", this->iGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreate_time */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreate_time]", "%d", this->iCreate_time);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoney_type */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoney_type]", "%d", this->iMoney_type);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMoney_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMoney_num]", "%d", this->iMoney_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLongitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLongitude]", TDR_CPP_INT64_FORMAT, this->llLongitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llDimension */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llDimension]", TDR_CPP_INT64_FORMAT, this->llDimension);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iParticulars_len */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iParticulars_len]", "%d", this->iParticulars_len);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szParticulars */
    if (0 > this->iParticulars_len)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (2048 < this->iParticulars_len)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szParticulars]", this->iParticulars_len);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szParticulars_i = 0; szParticulars_i < this->iParticulars_len; szParticulars_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szParticulars[szParticulars_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPos_info_len */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPos_info_len]", "%d", this->iPos_info_len);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szPos_info */
    if (0 > this->iPos_info_len)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (128 < this->iPos_info_len)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szPos_info]", this->iPos_info_len);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szPos_info_i = 0; szPos_info_i < this->iPos_info_len; szPos_info_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szPos_info[szPos_info_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApply_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApply_num]", "%d", this->iApply_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astApply_info_list */
    if (0 > this->iApply_num)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (256 < this->iApply_num)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astApply_info_list_i = 0; astApply_info_list_i < this->iApply_num; astApply_info_list_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astApply_info_list]", astApply_info_list_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astApply_info_list[astApply_info_list_i] */
        if (0 > indent)
        {
            ret = this->astApply_info_list[astApply_info_list_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astApply_info_list[astApply_info_list_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* visualize member: this->iPicture_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPicture_num]", "%d", this->iPicture_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->pictureid_list */
    if (0 > this->iPicture_num)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (32 < this->iPicture_num)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[pictureid_list]", this->iPicture_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t pictureid_list_i = 0; pictureid_list_i < this->iPicture_num; pictureid_list_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->pictureid_list[pictureid_list_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAudio_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAudio_num]", "%d", this->iAudio_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astAudio_info_list */
    if (0 > this->iAudio_num)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (16 < this->iAudio_num)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astAudio_info_list_i = 0; astAudio_info_list_i < this->iAudio_num; astAudio_info_list_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astAudio_info_list]", astAudio_info_list_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astAudio_info_list[astAudio_info_list_i] */
        if (0 > indent)
        {
            ret = this->astAudio_info_list[astAudio_info_list_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astAudio_info_list[astAudio_info_list_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* visualize member: this->llDiscuss_head_id */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llDiscuss_head_id]", TDR_CPP_INT64_FORMAT, this->llDiscuss_head_id);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llDiscuss_tail_id */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llDiscuss_tail_id]", TDR_CPP_INT64_FORMAT, this->llDiscuss_tail_id);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iScore */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iScore]", "%d", this->iScore);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSincerity_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSincerity_value]", "%d", this->iSincerity_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iO_apply_fini_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iO_apply_fini_num]", "%d", this->iO_apply_fini_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llApplyer_uid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llApplyer_uid]", TDR_CPP_INT64_FORMAT, this->llApplyer_uid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreater_gender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreater_gender]", "%d", this->iCreater_gender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApplyer_gender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApplyer_gender]", "%d", this->iApplyer_gender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCreater_birth */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCreater_birth]", TDR_CPP_INT64_FORMAT, this->llCreater_birth);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llApplyer_birth */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llApplyer_birth]", TDR_CPP_INT64_FORMAT, this->llApplyer_birth);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCreater_nickname_len */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCreater_nickname_len]", "%d", this->iCreater_nickname_len);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szCreater_nickname */
    if (0 > this->iCreater_nickname_len)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iCreater_nickname_len)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szCreater_nickname]", this->iCreater_nickname_len);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szCreater_nickname_i = 0; szCreater_nickname_i < this->iCreater_nickname_len; szCreater_nickname_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szCreater_nickname[szCreater_nickname_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApplyer_nickname_len */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApplyer_nickname_len]", "%d", this->iApplyer_nickname_len);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szApplyer_nickname */
    if (0 > this->iApplyer_nickname_len)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iApplyer_nickname_len)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szApplyer_nickname]", this->iApplyer_nickname_len);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szApplyer_nickname_i = 0; szApplyer_nickname_i < this->iApplyer_nickname_len; szApplyer_nickname_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szApplyer_nickname[szApplyer_nickname_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iApply_status */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iApply_status]", "%d", this->iApply_status);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientSelectOrderDetailsInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientSelectOrderDetailsInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_GlobalUserInfoList_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_GlobalUserInfoList_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_GlobalUserInfoList_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_GlobalUserInfoList_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_GlobalUserInfoList_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_GlobalUserInfoList_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_GlobalUserInfoList_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iUidCount */
    {
        ret = destBuf.writeInt32(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->uids */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_QUERY_GLOBAL_USER_INFO_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uids_i = 0; uids_i < this->iUidCount; uids_i++)
        {
            ret = destBuf.writeInt64(this->uids[uids_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CT_GlobalUserInfoList_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_GlobalUserInfoList_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_GlobalUserInfoList_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_GlobalUserInfoList_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iUidCount */
    {
        ret = destBuf.writeInt32_l(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->uids */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_QUERY_GLOBAL_USER_INFO_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uids_i = 0; uids_i < this->iUidCount; uids_i++)
        {
            ret = destBuf.writeInt64_l(this->uids[uids_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CT_GlobalUserInfoList_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_GlobalUserInfoList_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_GlobalUserInfoList_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_GlobalUserInfoList_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_GlobalUserInfoList_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_GlobalUserInfoList_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iUidCount */
    {
        ret = srcBuf.readInt32(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->uids */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_QUERY_GLOBAL_USER_INFO_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uids_i = 0; uids_i < this->iUidCount; uids_i++)
        {
            ret = srcBuf.readInt64(this->uids[uids_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CT_GlobalUserInfoList_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_GlobalUserInfoList_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_GlobalUserInfoList_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_GlobalUserInfoList_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iUidCount */
    {
        ret = srcBuf.readInt32_l(this->iUidCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->uids */
    {
        if (0 > this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_QUERY_GLOBAL_USER_INFO_COUNT < this->iUidCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t uids_i = 0; uids_i < this->iUidCount; uids_i++)
        {
            ret = srcBuf.readInt64_l(this->uids[uids_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CT_GlobalUserInfoList_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_GlobalUserInfoList_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iUidCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iUidCount]", "%d", this->iUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->uids */
    if (0 > this->iUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_QUERY_GLOBAL_USER_INFO_COUNT < this->iUidCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[uids]", this->iUidCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t uids_i = 0; uids_i < this->iUidCount; uids_i++)
    {
        ret = destBuf.textize(" " TDR_CPP_INT64_FORMAT, this->uids[uids_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_GlobalUserInfoList_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_GlobalUserInfoList_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
GlobalUserInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
GlobalUserInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GlobalUserInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GlobalUserInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GlobalUserInfo::CURRVERSION < cutVer)
    {
        cutVer = GlobalUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GlobalUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPhone_num */
    {
        ret = destBuf.writeInt64(this->llPhone_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_integrity */
    {
        ret = destBuf.writeInt32(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIntegrity_level */
    {
        ret = destBuf.writeInt32(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_youwo */
    {
        ret = destBuf.writeInt32(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_game */
    {
        ret = destBuf.writeInt32(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_validate */
    {
        ret = destBuf.writeInt32(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_level */
    {
        ret = destBuf.writeInt32(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_buy_time */
    {
        ret = destBuf.writeInt32(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_deadline */
    {
        ret = destBuf.writeInt32(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPhoto_count */
    {
        ret = destBuf.writeInt32(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCert_flags */
    {
        ret = destBuf.writeInt64(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSincerity_value */
    {
        ret = destBuf.writeInt32(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBusiness_value */
    {
        ret = destBuf.writeInt32(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAuthentication_value */
    {
        ret = destBuf.writeInt32(this->iAuthentication_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCharm_value */
    {
        ret = destBuf.writeInt32(this->iCharm_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPraise */
    {
        ret = destBuf.writeInt32(this->iPraise);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAttended */
    {
        ret = destBuf.writeInt32(this->iAttended);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llService */
    {
        ret = destBuf.writeInt64(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVisitor_count */
    {
        ret = destBuf.writeInt32(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_num */
    {
        ret = destBuf.writeInt32(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_pag_num */
    {
        ret = destBuf.writeInt32(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llExp */
    {
        ret = destBuf.writeInt64(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLevel */
    {
        ret = destBuf.writeInt32(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPraise_count */
    {
        ret = destBuf.writeInt32(this->iPraise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBad_count */
    {
        ret = destBuf.writeInt32(this->iBad_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRecharge */
    {
        ret = destBuf.writeInt32(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGuarantee_count */
    {
        ret = destBuf.writeInt32(this->iGuarantee_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromise_count */
    {
        ret = destBuf.writeInt32(this->iPromise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_level */
    {
        ret = destBuf.writeInt32(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_limit */
    {
        ret = destBuf.writeInt32(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOffline_deposit_limit */
    {
        ret = destBuf.writeInt32(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_create_fnum */
    {
        ret = destBuf.writeInt32(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_apply_fnum */
    {
        ret = destBuf.writeInt32(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llInterest */
    {
        ret = destBuf.writeInt64(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidention */
    {
        ret = destBuf.writeInt32(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidentionDetailLen */
    {
        ret = destBuf.writeInt32(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iHeight */
    if (GlobalUserInfo::VERSION_iHeight <= cutVer)
    {
        ret = destBuf.writeInt32(this->iHeight);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSchool */
    if (GlobalUserInfo::VERSION_iSchool <= cutVer)
    {
        ret = destBuf.writeInt32(this->iSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLove_status */
    if (GlobalUserInfo::VERSION_iLove_status <= cutVer)
    {
        ret = destBuf.writeInt32(this->iLove_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llHobby */
    if (GlobalUserInfo::VERSION_llHobby <= cutVer)
    {
        ret = destBuf.writeInt64(this->llHobby);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInSchoolYear */
    if (GlobalUserInfo::VERSION_iInSchoolYear <= cutVer)
    {
        ret = destBuf.writeInt32(this->iInSchoolYear);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iColleageNameLen */
    if (GlobalUserInfo::VERSION_iColleageNameLen <= cutVer)
    {
        ret = destBuf.writeInt32(this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szColleageName */
    if (GlobalUserInfo::VERSION_szColleageName <= cutVer)
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szColleageName, this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iProfessionLen */
    if (GlobalUserInfo::VERSION_iProfessionLen <= cutVer)
    {
        ret = destBuf.writeInt32(this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szProfession */
    if (GlobalUserInfo::VERSION_szProfession <= cutVer)
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szProfession, this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupationNameLen */
    if (GlobalUserInfo::VERSION_iOccupationNameLen <= cutVer)
    {
        ret = destBuf.writeInt32(this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szOccupationName */
    if (GlobalUserInfo::VERSION_szOccupationName <= cutVer)
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szOccupationName, this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llGood_reputation */
    if (GlobalUserInfo::VERSION_llGood_reputation <= cutVer)
    {
        ret = destBuf.writeInt64(this->llGood_reputation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llReputation_time */
    if (GlobalUserInfo::VERSION_llReputation_time <= cutVer)
    {
        ret = destBuf.writeInt64(this->llReputation_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GlobalUserInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GlobalUserInfo::CURRVERSION < cutVer)
    {
        cutVer = GlobalUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GlobalUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPhone_num */
    {
        ret = destBuf.writeInt64_l(this->llPhone_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_integrity */
    {
        ret = destBuf.writeInt32_l(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIntegrity_level */
    {
        ret = destBuf.writeInt32_l(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_youwo */
    {
        ret = destBuf.writeInt32_l(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_game */
    {
        ret = destBuf.writeInt32_l(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGold_validate */
    {
        ret = destBuf.writeInt32_l(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_level */
    {
        ret = destBuf.writeInt32_l(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_buy_time */
    {
        ret = destBuf.writeInt32_l(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVip_deadline */
    {
        ret = destBuf.writeInt32_l(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPhoto_count */
    {
        ret = destBuf.writeInt32_l(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCert_flags */
    {
        ret = destBuf.writeInt64_l(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSincerity_value */
    {
        ret = destBuf.writeInt32_l(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBusiness_value */
    {
        ret = destBuf.writeInt32_l(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAuthentication_value */
    {
        ret = destBuf.writeInt32_l(this->iAuthentication_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCharm_value */
    {
        ret = destBuf.writeInt32_l(this->iCharm_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPraise */
    {
        ret = destBuf.writeInt32_l(this->iPraise);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAttended */
    {
        ret = destBuf.writeInt32_l(this->iAttended);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llService */
    {
        ret = destBuf.writeInt64_l(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVisitor_count */
    {
        ret = destBuf.writeInt32_l(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_num */
    {
        ret = destBuf.writeInt32_l(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGifts_pag_num */
    {
        ret = destBuf.writeInt32_l(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llExp */
    {
        ret = destBuf.writeInt64_l(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLevel */
    {
        ret = destBuf.writeInt32_l(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPraise_count */
    {
        ret = destBuf.writeInt32_l(this->iPraise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBad_count */
    {
        ret = destBuf.writeInt32_l(this->iBad_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRecharge */
    {
        ret = destBuf.writeInt32_l(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGuarantee_count */
    {
        ret = destBuf.writeInt32_l(this->iGuarantee_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPromise_count */
    {
        ret = destBuf.writeInt32_l(this->iPromise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_level */
    {
        ret = destBuf.writeInt32_l(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDeposit_limit */
    {
        ret = destBuf.writeInt32_l(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOffline_deposit_limit */
    {
        ret = destBuf.writeInt32_l(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_create_fnum */
    {
        ret = destBuf.writeInt32_l(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOrder_apply_fnum */
    {
        ret = destBuf.writeInt32_l(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llInterest */
    {
        ret = destBuf.writeInt64_l(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidention */
    {
        ret = destBuf.writeInt32_l(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidentionDetailLen */
    {
        ret = destBuf.writeInt32_l(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iHeight */
    if (GlobalUserInfo::VERSION_iHeight <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iHeight);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSchool */
    if (GlobalUserInfo::VERSION_iSchool <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLove_status */
    if (GlobalUserInfo::VERSION_iLove_status <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iLove_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llHobby */
    if (GlobalUserInfo::VERSION_llHobby <= cutVer)
    {
        ret = destBuf.writeInt64_l(this->llHobby);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInSchoolYear */
    if (GlobalUserInfo::VERSION_iInSchoolYear <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iInSchoolYear);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iColleageNameLen */
    if (GlobalUserInfo::VERSION_iColleageNameLen <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szColleageName */
    if (GlobalUserInfo::VERSION_szColleageName <= cutVer)
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szColleageName, this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iProfessionLen */
    if (GlobalUserInfo::VERSION_iProfessionLen <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szProfession */
    if (GlobalUserInfo::VERSION_szProfession <= cutVer)
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szProfession, this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupationNameLen */
    if (GlobalUserInfo::VERSION_iOccupationNameLen <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szOccupationName */
    if (GlobalUserInfo::VERSION_szOccupationName <= cutVer)
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szOccupationName, this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llGood_reputation */
    if (GlobalUserInfo::VERSION_llGood_reputation <= cutVer)
    {
        ret = destBuf.writeInt64_l(this->llGood_reputation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llReputation_time */
    if (GlobalUserInfo::VERSION_llReputation_time <= cutVer)
    {
        ret = destBuf.writeInt64_l(this->llReputation_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GlobalUserInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GlobalUserInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GlobalUserInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GlobalUserInfo::CURRVERSION < cutVer)
    {
        cutVer = GlobalUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GlobalUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPhone_num */
    {
        ret = srcBuf.readInt64(this->llPhone_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_integrity */
    {
        ret = srcBuf.readInt32(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIntegrity_level */
    {
        ret = srcBuf.readInt32(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_youwo */
    {
        ret = srcBuf.readInt32(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_game */
    {
        ret = srcBuf.readInt32(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_validate */
    {
        ret = srcBuf.readInt32(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_level */
    {
        ret = srcBuf.readInt32(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_buy_time */
    {
        ret = srcBuf.readInt32(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_deadline */
    {
        ret = srcBuf.readInt32(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPhoto_count */
    {
        ret = srcBuf.readInt32(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCert_flags */
    {
        ret = srcBuf.readInt64(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSincerity_value */
    {
        ret = srcBuf.readInt32(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBusiness_value */
    {
        ret = srcBuf.readInt32(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAuthentication_value */
    {
        ret = srcBuf.readInt32(this->iAuthentication_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCharm_value */
    {
        ret = srcBuf.readInt32(this->iCharm_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPraise */
    {
        ret = srcBuf.readInt32(this->iPraise);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAttended */
    {
        ret = srcBuf.readInt32(this->iAttended);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llService */
    {
        ret = srcBuf.readInt64(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVisitor_count */
    {
        ret = srcBuf.readInt32(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_num */
    {
        ret = srcBuf.readInt32(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_pag_num */
    {
        ret = srcBuf.readInt32(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llExp */
    {
        ret = srcBuf.readInt64(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLevel */
    {
        ret = srcBuf.readInt32(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPraise_count */
    {
        ret = srcBuf.readInt32(this->iPraise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBad_count */
    {
        ret = srcBuf.readInt32(this->iBad_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRecharge */
    {
        ret = srcBuf.readInt32(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGuarantee_count */
    {
        ret = srcBuf.readInt32(this->iGuarantee_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromise_count */
    {
        ret = srcBuf.readInt32(this->iPromise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_level */
    {
        ret = srcBuf.readInt32(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_limit */
    {
        ret = srcBuf.readInt32(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOffline_deposit_limit */
    {
        ret = srcBuf.readInt32(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_create_fnum */
    {
        ret = srcBuf.readInt32(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_apply_fnum */
    {
        ret = srcBuf.readInt32(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llInterest */
    {
        ret = srcBuf.readInt64(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidention */
    {
        ret = srcBuf.readInt32(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidentionDetailLen */
    {
        ret = srcBuf.readInt32(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iHeight */
    if (GlobalUserInfo::VERSION_iHeight <= cutVer)
    {
        ret = srcBuf.readInt32(this->iHeight);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iHeight = 0;
    }

    /* unpack member: this->iSchool */
    if (GlobalUserInfo::VERSION_iSchool <= cutVer)
    {
        ret = srcBuf.readInt32(this->iSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iSchool = 0;
    }

    /* unpack member: this->iLove_status */
    if (GlobalUserInfo::VERSION_iLove_status <= cutVer)
    {
        ret = srcBuf.readInt32(this->iLove_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iLove_status = 0;
    }

    /* unpack member: this->llHobby */
    if (GlobalUserInfo::VERSION_llHobby <= cutVer)
    {
        ret = srcBuf.readInt64(this->llHobby);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->llHobby = 0;
    }

    /* unpack member: this->iInSchoolYear */
    if (GlobalUserInfo::VERSION_iInSchoolYear <= cutVer)
    {
        ret = srcBuf.readInt32(this->iInSchoolYear);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iInSchoolYear = 0;
    }

    /* unpack member: this->iColleageNameLen */
    if (GlobalUserInfo::VERSION_iColleageNameLen <= cutVer)
    {
        ret = srcBuf.readInt32(this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iColleageNameLen = 0;
    }

    /* unpack member: this->szColleageName */
    if (GlobalUserInfo::VERSION_szColleageName <= cutVer)
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szColleageName, this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szColleageName, 0, this->iColleageNameLen * sizeof(char));
    }

    /* unpack member: this->iProfessionLen */
    if (GlobalUserInfo::VERSION_iProfessionLen <= cutVer)
    {
        ret = srcBuf.readInt32(this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iProfessionLen = 0;
    }

    /* unpack member: this->szProfession */
    if (GlobalUserInfo::VERSION_szProfession <= cutVer)
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szProfession, this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szProfession, 0, this->iProfessionLen * sizeof(char));
    }

    /* unpack member: this->iOccupationNameLen */
    if (GlobalUserInfo::VERSION_iOccupationNameLen <= cutVer)
    {
        ret = srcBuf.readInt32(this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iOccupationNameLen = 0;
    }

    /* unpack member: this->szOccupationName */
    if (GlobalUserInfo::VERSION_szOccupationName <= cutVer)
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szOccupationName, this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szOccupationName, 0, this->iOccupationNameLen * sizeof(char));
    }

    /* unpack member: this->llGood_reputation */
    if (GlobalUserInfo::VERSION_llGood_reputation <= cutVer)
    {
        ret = srcBuf.readInt64(this->llGood_reputation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->llGood_reputation = 0;
    }

    /* unpack member: this->llReputation_time */
    if (GlobalUserInfo::VERSION_llReputation_time <= cutVer)
    {
        ret = srcBuf.readInt64(this->llReputation_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->llReputation_time = 0;
    }

    return ret;
}

TdrError::ErrorType
GlobalUserInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GlobalUserInfo::CURRVERSION < cutVer)
    {
        cutVer = GlobalUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (GlobalUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPhone_num */
    {
        ret = srcBuf.readInt64_l(this->llPhone_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_integrity */
    {
        ret = srcBuf.readInt32_l(this->iGold_integrity);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIntegrity_level */
    {
        ret = srcBuf.readInt32_l(this->iIntegrity_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_youwo */
    {
        ret = srcBuf.readInt32_l(this->iGold_youwo);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_game */
    {
        ret = srcBuf.readInt32_l(this->iGold_game);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGold_validate */
    {
        ret = srcBuf.readInt32_l(this->iGold_validate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_level */
    {
        ret = srcBuf.readInt32_l(this->iVip_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_buy_time */
    {
        ret = srcBuf.readInt32_l(this->iVip_buy_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVip_deadline */
    {
        ret = srcBuf.readInt32_l(this->iVip_deadline);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPhoto_count */
    {
        ret = srcBuf.readInt32_l(this->iPhoto_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCert_flags */
    {
        ret = srcBuf.readInt64_l(this->llCert_flags);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSincerity_value */
    {
        ret = srcBuf.readInt32_l(this->iSincerity_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBusiness_value */
    {
        ret = srcBuf.readInt32_l(this->iBusiness_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAuthentication_value */
    {
        ret = srcBuf.readInt32_l(this->iAuthentication_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCharm_value */
    {
        ret = srcBuf.readInt32_l(this->iCharm_value);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPraise */
    {
        ret = srcBuf.readInt32_l(this->iPraise);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAttended */
    {
        ret = srcBuf.readInt32_l(this->iAttended);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llService */
    {
        ret = srcBuf.readInt64_l(this->llService);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVisitor_count */
    {
        ret = srcBuf.readInt32_l(this->iVisitor_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_num */
    {
        ret = srcBuf.readInt32_l(this->iGifts_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGifts_pag_num */
    {
        ret = srcBuf.readInt32_l(this->iGifts_pag_num);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llExp */
    {
        ret = srcBuf.readInt64_l(this->llExp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iLevel */
    {
        ret = srcBuf.readInt32_l(this->iLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPraise_count */
    {
        ret = srcBuf.readInt32_l(this->iPraise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBad_count */
    {
        ret = srcBuf.readInt32_l(this->iBad_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRecharge */
    {
        ret = srcBuf.readInt32_l(this->iRecharge);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGuarantee_count */
    {
        ret = srcBuf.readInt32_l(this->iGuarantee_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPromise_count */
    {
        ret = srcBuf.readInt32_l(this->iPromise_count);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_level */
    {
        ret = srcBuf.readInt32_l(this->iDeposit_level);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDeposit_limit */
    {
        ret = srcBuf.readInt32_l(this->iDeposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOffline_deposit_limit */
    {
        ret = srcBuf.readInt32_l(this->iOffline_deposit_limit);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_create_fnum */
    {
        ret = srcBuf.readInt32_l(this->iOrder_create_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOrder_apply_fnum */
    {
        ret = srcBuf.readInt32_l(this->iOrder_apply_fnum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llInterest */
    {
        ret = srcBuf.readInt64_l(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidention */
    {
        ret = srcBuf.readInt32_l(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidentionDetailLen */
    {
        ret = srcBuf.readInt32_l(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szResidentionDetail */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iHeight */
    if (GlobalUserInfo::VERSION_iHeight <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iHeight);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iHeight = 0;
    }

    /* unpack member: this->iSchool */
    if (GlobalUserInfo::VERSION_iSchool <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iSchool = 0;
    }

    /* unpack member: this->iLove_status */
    if (GlobalUserInfo::VERSION_iLove_status <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iLove_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iLove_status = 0;
    }

    /* unpack member: this->llHobby */
    if (GlobalUserInfo::VERSION_llHobby <= cutVer)
    {
        ret = srcBuf.readInt64_l(this->llHobby);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->llHobby = 0;
    }

    /* unpack member: this->iInSchoolYear */
    if (GlobalUserInfo::VERSION_iInSchoolYear <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iInSchoolYear);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iInSchoolYear = 0;
    }

    /* unpack member: this->iColleageNameLen */
    if (GlobalUserInfo::VERSION_iColleageNameLen <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iColleageNameLen = 0;
    }

    /* unpack member: this->szColleageName */
    if (GlobalUserInfo::VERSION_szColleageName <= cutVer)
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szColleageName, this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szColleageName, 0, this->iColleageNameLen * sizeof(char));
    }

    /* unpack member: this->iProfessionLen */
    if (GlobalUserInfo::VERSION_iProfessionLen <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iProfessionLen = 0;
    }

    /* unpack member: this->szProfession */
    if (GlobalUserInfo::VERSION_szProfession <= cutVer)
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szProfession, this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szProfession, 0, this->iProfessionLen * sizeof(char));
    }

    /* unpack member: this->iOccupationNameLen */
    if (GlobalUserInfo::VERSION_iOccupationNameLen <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iOccupationNameLen = 0;
    }

    /* unpack member: this->szOccupationName */
    if (GlobalUserInfo::VERSION_szOccupationName <= cutVer)
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szOccupationName, this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szOccupationName, 0, this->iOccupationNameLen * sizeof(char));
    }

    /* unpack member: this->llGood_reputation */
    if (GlobalUserInfo::VERSION_llGood_reputation <= cutVer)
    {
        ret = srcBuf.readInt64_l(this->llGood_reputation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->llGood_reputation = 0;
    }

    /* unpack member: this->llReputation_time */
    if (GlobalUserInfo::VERSION_llReputation_time <= cutVer)
    {
        ret = srcBuf.readInt64_l(this->llReputation_time);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->llReputation_time = 0;
    }

    return ret;
}

TdrError::ErrorType
GlobalUserInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GlobalUserInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPhone_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPhone_num]", TDR_CPP_INT64_FORMAT, this->llPhone_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_integrity */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_integrity]", "%d", this->iGold_integrity);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iIntegrity_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iIntegrity_level]", "%d", this->iIntegrity_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_youwo */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_youwo]", "%d", this->iGold_youwo);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_game */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_game]", "%d", this->iGold_game);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGold_validate */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGold_validate]", "%d", this->iGold_validate);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVip_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVip_level]", "%d", this->iVip_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVip_buy_time */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVip_buy_time]", "%d", this->iVip_buy_time);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVip_deadline */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVip_deadline]", "%d", this->iVip_deadline);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPhoto_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPhoto_count]", "%d", this->iPhoto_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCert_flags */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCert_flags]", TDR_CPP_INT64_FORMAT, this->llCert_flags);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSincerity_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSincerity_value]", "%d", this->iSincerity_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBusiness_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBusiness_value]", "%d", this->iBusiness_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAuthentication_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAuthentication_value]", "%d", this->iAuthentication_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCharm_value */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCharm_value]", "%d", this->iCharm_value);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPraise */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPraise]", "%d", this->iPraise);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAttended */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAttended]", "%d", this->iAttended);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llService */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llService]", TDR_CPP_INT64_FORMAT, this->llService);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVisitor_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVisitor_count]", "%d", this->iVisitor_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGifts_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGifts_num]", "%d", this->iGifts_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGifts_pag_num */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGifts_pag_num]", "%d", this->iGifts_pag_num);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llExp */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llExp]", TDR_CPP_INT64_FORMAT, this->llExp);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iLevel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLevel]", "%d", this->iLevel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPraise_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPraise_count]", "%d", this->iPraise_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBad_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBad_count]", "%d", this->iBad_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRecharge */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRecharge]", "%d", this->iRecharge);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGuarantee_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGuarantee_count]", "%d", this->iGuarantee_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPromise_count */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPromise_count]", "%d", this->iPromise_count);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDeposit_level */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDeposit_level]", "%d", this->iDeposit_level);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDeposit_limit */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDeposit_limit]", "%d", this->iDeposit_limit);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOffline_deposit_limit */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOffline_deposit_limit]", "%d", this->iOffline_deposit_limit);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrder_create_fnum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrder_create_fnum]", "%d", this->iOrder_create_fnum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOrder_apply_fnum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOrder_apply_fnum]", "%d", this->iOrder_apply_fnum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llInterest */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llInterest]", TDR_CPP_INT64_FORMAT, this->llInterest);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chGender]", "0x%02x", this->chGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llBirthday */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llBirthday]", TDR_CPP_INT64_FORMAT, this->llBirthday);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llPortrait */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPortrait]", TDR_CPP_INT64_FORMAT, this->llPortrait);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickName */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickName]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickName_i = 0; szNickName_i < this->iNickNameLen; szNickName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickName[szNickName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOccupation */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOccupation]", "%d", this->iOccupation);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResidention */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidention]", "%d", this->iResidention);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSignatureLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSignatureLen]", "%d", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szSignature */
    if (0 > this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szSignature]", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szSignature_i = 0; szSignature_i < this->iSignatureLen; szSignature_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szSignature[szSignature_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResidentionDetailLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidentionDetailLen]", "%d", this->iResidentionDetailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szResidentionDetail */
    if (0 > this->iResidentionDetailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szResidentionDetail]", this->iResidentionDetailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szResidentionDetail_i = 0; szResidentionDetail_i < this->iResidentionDetailLen; szResidentionDetail_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szResidentionDetail[szResidentionDetail_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iHeight */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iHeight]", "%d", this->iHeight);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSchool */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSchool]", "%d", this->iSchool);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iLove_status */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLove_status]", "%d", this->iLove_status);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llHobby */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llHobby]", TDR_CPP_INT64_FORMAT, this->llHobby);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInSchoolYear */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInSchoolYear]", "%d", this->iInSchoolYear);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iColleageNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iColleageNameLen]", "%d", this->iColleageNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szColleageName */
    if (0 > this->iColleageNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szColleageName]", this->iColleageNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szColleageName_i = 0; szColleageName_i < this->iColleageNameLen; szColleageName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szColleageName[szColleageName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iProfessionLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iProfessionLen]", "%d", this->iProfessionLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szProfession */
    if (0 > this->iProfessionLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szProfession]", this->iProfessionLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szProfession_i = 0; szProfession_i < this->iProfessionLen; szProfession_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szProfession[szProfession_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOccupationNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOccupationNameLen]", "%d", this->iOccupationNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szOccupationName */
    if (0 > this->iOccupationNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szOccupationName]", this->iOccupationNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szOccupationName_i = 0; szOccupationName_i < this->iOccupationNameLen; szOccupationName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szOccupationName[szOccupationName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llGood_reputation */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llGood_reputation]", TDR_CPP_INT64_FORMAT, this->llGood_reputation);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llReputation_time */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llReputation_time]", TDR_CPP_INT64_FORMAT, this->llReputation_time);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
GlobalUserInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
GlobalUserInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_GlobalUserInfoList_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_GlobalUserInfoList_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_GlobalUserInfoList_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_GlobalUserInfoList_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_GlobalUserInfoList_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_GlobalUserInfoList_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_GlobalUserInfoList_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInfoCount */
    {
        ret = destBuf.writeInt32(this->iInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astGlobalUserInfos */
    {
        if (0 > this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_QUERY_GLOBAL_USER_INFO_COUNT < this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astGlobalUserInfos_i = 0; astGlobalUserInfos_i < this->iInfoCount; astGlobalUserInfos_i++)
        {
            ret = this->astGlobalUserInfos[astGlobalUserInfos_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_GlobalUserInfoList_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_GlobalUserInfoList_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_GlobalUserInfoList_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_GlobalUserInfoList_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInfoCount */
    {
        ret = destBuf.writeInt32_l(this->iInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astGlobalUserInfos */
    {
        if (0 > this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_QUERY_GLOBAL_USER_INFO_COUNT < this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astGlobalUserInfos_i = 0; astGlobalUserInfos_i < this->iInfoCount; astGlobalUserInfos_i++)
        {
            ret = this->astGlobalUserInfos[astGlobalUserInfos_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_GlobalUserInfoList_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_GlobalUserInfoList_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_GlobalUserInfoList_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_GlobalUserInfoList_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_GlobalUserInfoList_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_GlobalUserInfoList_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInfoCount */
    {
        ret = srcBuf.readInt32(this->iInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astGlobalUserInfos */
    {
        if (0 > this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_QUERY_GLOBAL_USER_INFO_COUNT < this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astGlobalUserInfos_i = 0; astGlobalUserInfos_i < this->iInfoCount; astGlobalUserInfos_i++)
        {
            ret = this->astGlobalUserInfos[astGlobalUserInfos_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_GlobalUserInfoList_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_GlobalUserInfoList_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_GlobalUserInfoList_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_GlobalUserInfoList_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInfoCount */
    {
        ret = srcBuf.readInt32_l(this->iInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astGlobalUserInfos */
    {
        if (0 > this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_QUERY_GLOBAL_USER_INFO_COUNT < this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astGlobalUserInfos_i = 0; astGlobalUserInfos_i < this->iInfoCount; astGlobalUserInfos_i++)
        {
            ret = this->astGlobalUserInfos[astGlobalUserInfos_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_GlobalUserInfoList_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_GlobalUserInfoList_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInfoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInfoCount]", "%d", this->iInfoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astGlobalUserInfos */
    if (0 > this->iInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_QUERY_GLOBAL_USER_INFO_COUNT < this->iInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astGlobalUserInfos_i = 0; astGlobalUserInfos_i < this->iInfoCount; astGlobalUserInfos_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astGlobalUserInfos]", astGlobalUserInfos_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astGlobalUserInfos[astGlobalUserInfos_i] */
        if (0 > indent)
        {
            ret = this->astGlobalUserInfos[astGlobalUserInfos_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astGlobalUserInfos[astGlobalUserInfos_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TC_GlobalUserInfoList_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_GlobalUserInfoList_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCompileUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCompileUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCompileUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidention */
    {
        ret = destBuf.writeInt32(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llInterest */
    {
        ret = destBuf.writeInt64(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iHeight */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iHeight <= cutVer)
    {
        ret = destBuf.writeInt32(this->iHeight);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSchool */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iSchool <= cutVer)
    {
        ret = destBuf.writeInt32(this->iSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLove_status */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iLove_status <= cutVer)
    {
        ret = destBuf.writeInt32(this->iLove_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llHobby */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_llHobby <= cutVer)
    {
        ret = destBuf.writeInt64(this->llHobby);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iSignatureLen <= cutVer)
    {
        ret = destBuf.writeInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szSignature <= cutVer)
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidentionDetailLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iResidentionDetailLen <= cutVer)
    {
        ret = destBuf.writeInt32(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidentionDetail */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szResidentionDetail <= cutVer)
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInSchool */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iInSchool <= cutVer)
    {
        ret = destBuf.writeInt32(this->iInSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iColleageNameLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iColleageNameLen <= cutVer)
    {
        ret = destBuf.writeInt32(this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szColleageName */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szColleageName <= cutVer)
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szColleageName, this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iProfessionLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iProfessionLen <= cutVer)
    {
        ret = destBuf.writeInt32(this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szProfession */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szProfession <= cutVer)
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szProfession, this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupationNameLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iOccupationNameLen <= cutVer)
    {
        ret = destBuf.writeInt32(this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szOccupationName */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szOccupationName <= cutVer)
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szOccupationName, this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iFirstComplie */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iFirstComplie <= cutVer)
    {
        ret = destBuf.writeInt32(this->iFirstComplie);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCompileUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCompileUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCompileUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llPortrait */
    {
        ret = destBuf.writeInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chGender */
    {
        ret = destBuf.writeInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidention */
    {
        ret = destBuf.writeInt32_l(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupation */
    {
        ret = destBuf.writeInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llInterest */
    {
        ret = destBuf.writeInt64_l(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iHeight */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iHeight <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iHeight);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSchool */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iSchool <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iLove_status */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iLove_status <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iLove_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llHobby */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_llHobby <= cutVer)
    {
        ret = destBuf.writeInt64_l(this->llHobby);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iSignatureLen <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szSignature <= cutVer)
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResidentionDetailLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iResidentionDetailLen <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szResidentionDetail */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szResidentionDetail <= cutVer)
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInSchool */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iInSchool <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iInSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iColleageNameLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iColleageNameLen <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szColleageName */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szColleageName <= cutVer)
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szColleageName, this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iProfessionLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iProfessionLen <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szProfession */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szProfession <= cutVer)
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szProfession, this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iOccupationNameLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iOccupationNameLen <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szOccupationName */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szOccupationName <= cutVer)
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szOccupationName, this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iFirstComplie */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iFirstComplie <= cutVer)
    {
        ret = destBuf.writeInt32_l(this->iFirstComplie);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCompileUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCompileUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCompileUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidention */
    {
        ret = srcBuf.readInt32(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llInterest */
    {
        ret = srcBuf.readInt64(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iHeight */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iHeight <= cutVer)
    {
        ret = srcBuf.readInt32(this->iHeight);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iHeight = 0;
    }

    /* unpack member: this->iSchool */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iSchool <= cutVer)
    {
        ret = srcBuf.readInt32(this->iSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iSchool = 0;
    }

    /* unpack member: this->iLove_status */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iLove_status <= cutVer)
    {
        ret = srcBuf.readInt32(this->iLove_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iLove_status = 0;
    }

    /* unpack member: this->llHobby */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_llHobby <= cutVer)
    {
        ret = srcBuf.readInt64(this->llHobby);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->llHobby = 0;
    }

    /* unpack member: this->iSignatureLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iSignatureLen <= cutVer)
    {
        ret = srcBuf.readInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iSignatureLen = 0;
    }

    /* unpack member: this->szSignature */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szSignature <= cutVer)
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szSignature, 0, this->iSignatureLen * sizeof(char));
    }

    /* unpack member: this->iResidentionDetailLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iResidentionDetailLen <= cutVer)
    {
        ret = srcBuf.readInt32(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iResidentionDetailLen = 0;
    }

    /* unpack member: this->szResidentionDetail */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szResidentionDetail <= cutVer)
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szResidentionDetail, 0, this->iResidentionDetailLen * sizeof(char));
    }

    /* unpack member: this->iInSchool */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iInSchool <= cutVer)
    {
        ret = srcBuf.readInt32(this->iInSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iInSchool = 0;
    }

    /* unpack member: this->iColleageNameLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iColleageNameLen <= cutVer)
    {
        ret = srcBuf.readInt32(this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iColleageNameLen = 0;
    }

    /* unpack member: this->szColleageName */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szColleageName <= cutVer)
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szColleageName, this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szColleageName, 0, this->iColleageNameLen * sizeof(char));
    }

    /* unpack member: this->iProfessionLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iProfessionLen <= cutVer)
    {
        ret = srcBuf.readInt32(this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iProfessionLen = 0;
    }

    /* unpack member: this->szProfession */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szProfession <= cutVer)
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szProfession, this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szProfession, 0, this->iProfessionLen * sizeof(char));
    }

    /* unpack member: this->iOccupationNameLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iOccupationNameLen <= cutVer)
    {
        ret = srcBuf.readInt32(this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iOccupationNameLen = 0;
    }

    /* unpack member: this->szOccupationName */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szOccupationName <= cutVer)
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szOccupationName, this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szOccupationName, 0, this->iOccupationNameLen * sizeof(char));
    }

    /* unpack member: this->iFirstComplie */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iFirstComplie <= cutVer)
    {
        ret = srcBuf.readInt32(this->iFirstComplie);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iFirstComplie = 0;
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeCompileUserInfo::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeCompileUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeCompileUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llPortrait */
    {
        ret = srcBuf.readInt64_l(this->llPortrait);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chGender */
    {
        ret = srcBuf.readInt8(this->chGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResidention */
    {
        ret = srcBuf.readInt32_l(this->iResidention);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iOccupation */
    {
        ret = srcBuf.readInt32_l(this->iOccupation);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llInterest */
    {
        ret = srcBuf.readInt64_l(this->llInterest);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iHeight */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iHeight <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iHeight);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iHeight = 0;
    }

    /* unpack member: this->iSchool */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iSchool <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iSchool = 0;
    }

    /* unpack member: this->iLove_status */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iLove_status <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iLove_status);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iLove_status = 0;
    }

    /* unpack member: this->llHobby */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_llHobby <= cutVer)
    {
        ret = srcBuf.readInt64_l(this->llHobby);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->llHobby = 0;
    }

    /* unpack member: this->iSignatureLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iSignatureLen <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iSignatureLen = 0;
    }

    /* unpack member: this->szSignature */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szSignature <= cutVer)
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szSignature, 0, this->iSignatureLen * sizeof(char));
    }

    /* unpack member: this->iResidentionDetailLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iResidentionDetailLen <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iResidentionDetailLen = 0;
    }

    /* unpack member: this->szResidentionDetail */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szResidentionDetail <= cutVer)
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szResidentionDetail, this->iResidentionDetailLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szResidentionDetail, 0, this->iResidentionDetailLen * sizeof(char));
    }

    /* unpack member: this->iInSchool */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iInSchool <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iInSchool);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iInSchool = 0;
    }

    /* unpack member: this->iColleageNameLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iColleageNameLen <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iColleageNameLen = 0;
    }

    /* unpack member: this->szColleageName */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szColleageName <= cutVer)
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szColleageName, this->iColleageNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szColleageName, 0, this->iColleageNameLen * sizeof(char));
    }

    /* unpack member: this->iProfessionLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iProfessionLen <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iProfessionLen = 0;
    }

    /* unpack member: this->szProfession */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szProfession <= cutVer)
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szProfession, this->iProfessionLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szProfession, 0, this->iProfessionLen * sizeof(char));
    }

    /* unpack member: this->iOccupationNameLen */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iOccupationNameLen <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iOccupationNameLen = 0;
    }

    /* unpack member: this->szOccupationName */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_szOccupationName <= cutVer)
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szOccupationName, this->iOccupationNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        if (0 > this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        memset(&this->szOccupationName, 0, this->iOccupationNameLen * sizeof(char));
    }

    /* unpack member: this->iFirstComplie */
    if (ClientRequestAccessTradeCompileUserInfo::VERSION_iFirstComplie <= cutVer)
    {
        ret = srcBuf.readInt32_l(this->iFirstComplie);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else /* set default value */
    {
        this->iFirstComplie = 0;
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeCompileUserInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llPortrait */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llPortrait]", TDR_CPP_INT64_FORMAT, this->llPortrait);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickName */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickName]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickName_i = 0; szNickName_i < this->iNickNameLen; szNickName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickName[szNickName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chGender]", "0x%02x", this->chGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResidention */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidention]", "%d", this->iResidention);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llBirthday */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llBirthday]", TDR_CPP_INT64_FORMAT, this->llBirthday);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOccupation */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOccupation]", "%d", this->iOccupation);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llInterest */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llInterest]", TDR_CPP_INT64_FORMAT, this->llInterest);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iHeight */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iHeight]", "%d", this->iHeight);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSchool */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSchool]", "%d", this->iSchool);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iLove_status */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iLove_status]", "%d", this->iLove_status);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llHobby */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llHobby]", TDR_CPP_INT64_FORMAT, this->llHobby);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSignatureLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSignatureLen]", "%d", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szSignature */
    if (0 > this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szSignature]", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szSignature_i = 0; szSignature_i < this->iSignatureLen; szSignature_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szSignature[szSignature_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResidentionDetailLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResidentionDetailLen]", "%d", this->iResidentionDetailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szResidentionDetail */
    if (0 > this->iResidentionDetailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_RESIDENTION_DETAIL_MAX_LEN < this->iResidentionDetailLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szResidentionDetail]", this->iResidentionDetailLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szResidentionDetail_i = 0; szResidentionDetail_i < this->iResidentionDetailLen; szResidentionDetail_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szResidentionDetail[szResidentionDetail_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInSchool */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInSchool]", "%d", this->iInSchool);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iColleageNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iColleageNameLen]", "%d", this->iColleageNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szColleageName */
    if (0 > this->iColleageNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_COLLEGE_NAME_LEN < this->iColleageNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szColleageName]", this->iColleageNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szColleageName_i = 0; szColleageName_i < this->iColleageNameLen; szColleageName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szColleageName[szColleageName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iProfessionLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iProfessionLen]", "%d", this->iProfessionLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szProfession */
    if (0 > this->iProfessionLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_PROFESSION_NAME_LEN < this->iProfessionLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szProfession]", this->iProfessionLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szProfession_i = 0; szProfession_i < this->iProfessionLen; szProfession_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szProfession[szProfession_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iOccupationNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iOccupationNameLen]", "%d", this->iOccupationNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szOccupationName */
    if (0 > this->iOccupationNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_OCCUPATION_NAME_LEN < this->iOccupationNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szOccupationName]", this->iOccupationNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szOccupationName_i = 0; szOccupationName_i < this->iOccupationNameLen; szOccupationName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szOccupationName[szOccupationName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iFirstComplie */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iFirstComplie]", "%d", this->iFirstComplie);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeCompileUserInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeCompileUserInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCompileUserInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCompileUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCompileUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCompileUserInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCompileUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCompileUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCompileUserInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCompileUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCompileUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientCompileUserInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientCompileUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientCompileUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientCompileUserInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientCompileUserInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientCompileUserInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_DiscussOrder_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_DiscussOrder_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_DiscussOrder_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_DiscussOrder_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_DiscussOrder_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_DiscussOrder_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_DiscussOrder_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llToUid */
    {
        ret = destBuf.writeInt64(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussContentLen */
    {
        ret = destBuf.writeInt32(this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szDiscussContent */
    {
        if (0 > this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_CONTENT_LEN < this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szDiscussContent, this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_DiscussOrder_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_DiscussOrder_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_DiscussOrder_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_DiscussOrder_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llToUid */
    {
        ret = destBuf.writeInt64_l(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussContentLen */
    {
        ret = destBuf.writeInt32_l(this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szDiscussContent */
    {
        if (0 > this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_CONTENT_LEN < this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szDiscussContent, this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_DiscussOrder_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_DiscussOrder_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_DiscussOrder_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_DiscussOrder_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_DiscussOrder_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_DiscussOrder_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llToUid */
    {
        ret = srcBuf.readInt64(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussContentLen */
    {
        ret = srcBuf.readInt32(this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szDiscussContent */
    {
        if (0 > this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_CONTENT_LEN < this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szDiscussContent, this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_DiscussOrder_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_DiscussOrder_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_DiscussOrder_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_DiscussOrder_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llToUid */
    {
        ret = srcBuf.readInt64_l(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussContentLen */
    {
        ret = srcBuf.readInt32_l(this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szDiscussContent */
    {
        if (0 > this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_CONTENT_LEN < this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szDiscussContent, this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_DiscussOrder_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_DiscussOrder_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llToUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llToUid]", TDR_CPP_INT64_FORMAT, this->llToUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llOrderId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderId]", TDR_CPP_INT64_FORMAT, this->llOrderId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDiscussContentLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDiscussContentLen]", "%d", this->iDiscussContentLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szDiscussContent */
    if (0 > this->iDiscussContentLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_DISCUSS_DETAIL_CONTENT_LEN < this->iDiscussContentLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szDiscussContent]", this->iDiscussContentLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szDiscussContent_i = 0; szDiscussContent_i < this->iDiscussContentLen; szDiscussContent_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szDiscussContent[szDiscussContent_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_DiscussOrder_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_DiscussOrder_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_DiscussOrder_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_DiscussOrder_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_DiscussOrder_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_DiscussOrder_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_DiscussOrder_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_DiscussOrder_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_DiscussOrder_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_DiscussOrder_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_DiscussOrder_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_DiscussOrder_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_DiscussOrder_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_DiscussOrder_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_DiscussOrder_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_DiscussOrder_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_DiscussOrder_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_DiscussOrder_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_DiscussOrder_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_DiscussOrder_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_DiscussOrder_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_DiscussOrder_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_DiscussOrder_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_DiscussOrder_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_DiscussOrder_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_DiscussOrder_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_DiscussOrder_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
DiscussDetailInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
DiscussDetailInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
DiscussDetailInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
DiscussDetailInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || DiscussDetailInfo::CURRVERSION < cutVer)
    {
        cutVer = DiscussDetailInfo::CURRVERSION;
    }

    /* check cutversion */
    if (DiscussDetailInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llDiscussId */
    {
        ret = destBuf.writeInt64(this->llDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llFromUid */
    {
        ret = destBuf.writeInt64(this->llFromUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llToUid */
    {
        ret = destBuf.writeInt64(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussContentLen */
    {
        ret = destBuf.writeInt32(this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szDiscussContent */
    {
        if (0 > this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_CONTENT_LEN < this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szDiscussContent, this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDiscussTime */
    {
        ret = destBuf.writeInt64(this->llDiscussTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussStatus */
    {
        ret = destBuf.writeInt32(this->iDiscussStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIntegrityLevel */
    {
        ret = destBuf.writeInt32(this->iIntegrityLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
DiscussDetailInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || DiscussDetailInfo::CURRVERSION < cutVer)
    {
        cutVer = DiscussDetailInfo::CURRVERSION;
    }

    /* check cutversion */
    if (DiscussDetailInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llDiscussId */
    {
        ret = destBuf.writeInt64_l(this->llDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llFromUid */
    {
        ret = destBuf.writeInt64_l(this->llFromUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llToUid */
    {
        ret = destBuf.writeInt64_l(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussContentLen */
    {
        ret = destBuf.writeInt32_l(this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szDiscussContent */
    {
        if (0 > this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_CONTENT_LEN < this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szDiscussContent, this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDiscussTime */
    {
        ret = destBuf.writeInt64_l(this->llDiscussTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDiscussStatus */
    {
        ret = destBuf.writeInt32_l(this->iDiscussStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iIntegrityLevel */
    {
        ret = destBuf.writeInt32_l(this->iIntegrityLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
DiscussDetailInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
DiscussDetailInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
DiscussDetailInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || DiscussDetailInfo::CURRVERSION < cutVer)
    {
        cutVer = DiscussDetailInfo::CURRVERSION;
    }

    /* check cutversion */
    if (DiscussDetailInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llDiscussId */
    {
        ret = srcBuf.readInt64(this->llDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llFromUid */
    {
        ret = srcBuf.readInt64(this->llFromUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llToUid */
    {
        ret = srcBuf.readInt64(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussContentLen */
    {
        ret = srcBuf.readInt32(this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szDiscussContent */
    {
        if (0 > this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_CONTENT_LEN < this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szDiscussContent, this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDiscussTime */
    {
        ret = srcBuf.readInt64(this->llDiscussTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussStatus */
    {
        ret = srcBuf.readInt32(this->iDiscussStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIntegrityLevel */
    {
        ret = srcBuf.readInt32(this->iIntegrityLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
DiscussDetailInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || DiscussDetailInfo::CURRVERSION < cutVer)
    {
        cutVer = DiscussDetailInfo::CURRVERSION;
    }

    /* check cutversion */
    if (DiscussDetailInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llDiscussId */
    {
        ret = srcBuf.readInt64_l(this->llDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llFromUid */
    {
        ret = srcBuf.readInt64_l(this->llFromUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llToUid */
    {
        ret = srcBuf.readInt64_l(this->llToUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussContentLen */
    {
        ret = srcBuf.readInt32_l(this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szDiscussContent */
    {
        if (0 > this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_CONTENT_LEN < this->iDiscussContentLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szDiscussContent, this->iDiscussContentLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDiscussTime */
    {
        ret = srcBuf.readInt64_l(this->llDiscussTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDiscussStatus */
    {
        ret = srcBuf.readInt32_l(this->iDiscussStatus);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickName */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickName, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iIntegrityLevel */
    {
        ret = srcBuf.readInt32_l(this->iIntegrityLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
DiscussDetailInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
DiscussDetailInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llDiscussId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llDiscussId]", TDR_CPP_INT64_FORMAT, this->llDiscussId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llOrderId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderId]", TDR_CPP_INT64_FORMAT, this->llOrderId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llFromUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llFromUid]", TDR_CPP_INT64_FORMAT, this->llFromUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llToUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llToUid]", TDR_CPP_INT64_FORMAT, this->llToUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDiscussContentLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDiscussContentLen]", "%d", this->iDiscussContentLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szDiscussContent */
    if (0 > this->iDiscussContentLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_DISCUSS_DETAIL_CONTENT_LEN < this->iDiscussContentLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szDiscussContent]", this->iDiscussContentLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szDiscussContent_i = 0; szDiscussContent_i < this->iDiscussContentLen; szDiscussContent_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szDiscussContent[szDiscussContent_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llDiscussTime */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llDiscussTime]", TDR_CPP_INT64_FORMAT, this->llDiscussTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDiscussStatus */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDiscussStatus]", "%d", this->iDiscussStatus);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickName */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickName]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickName_i = 0; szNickName_i < this->iNickNameLen; szNickName_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickName[szNickName_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGender]", "%d", this->iGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iIntegrityLevel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iIntegrityLevel]", "%d", this->iIntegrityLevel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
DiscussDetailInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
DiscussDetailInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_QueryDiscussDetail_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_QueryDiscussDetail_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryDiscussDetail_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryDiscussDetail_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryDiscussDetail_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryDiscussDetail_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryDiscussDetail_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCurDiscussId */
    {
        ret = destBuf.writeInt64(this->llCurDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iExpectedCount */
    {
        ret = destBuf.writeInt32(this->iExpectedCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryDiscussDetail_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryDiscussDetail_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryDiscussDetail_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryDiscussDetail_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llCurDiscussId */
    {
        ret = destBuf.writeInt64_l(this->llCurDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iExpectedCount */
    {
        ret = destBuf.writeInt32_l(this->iExpectedCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryDiscussDetail_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryDiscussDetail_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryDiscussDetail_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryDiscussDetail_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryDiscussDetail_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryDiscussDetail_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCurDiscussId */
    {
        ret = srcBuf.readInt64(this->llCurDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iExpectedCount */
    {
        ret = srcBuf.readInt32(this->iExpectedCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryDiscussDetail_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_QueryDiscussDetail_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_QueryDiscussDetail_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_QueryDiscussDetail_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llCurDiscussId */
    {
        ret = srcBuf.readInt64_l(this->llCurDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iExpectedCount */
    {
        ret = srcBuf.readInt32_l(this->iExpectedCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_QueryDiscussDetail_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_QueryDiscussDetail_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderId]", TDR_CPP_INT64_FORMAT, this->llOrderId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llCurDiscussId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llCurDiscussId]", TDR_CPP_INT64_FORMAT, this->llCurDiscussId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iExpectedCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iExpectedCount]", "%d", this->iExpectedCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_QueryDiscussDetail_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_QueryDiscussDetail_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_QueryDiscussDetail_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_QueryDiscussDetail_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryDiscussDetail_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryDiscussDetail_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryDiscussDetail_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryDiscussDetail_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryDiscussDetail_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTotalCount */
    {
        ret = destBuf.writeInt32(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInfoCount */
    {
        ret = destBuf.writeInt32(this->iInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astDiscussDetailInfos */
    {
        if (0 > this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_RECORD_COUNT_ONCE < this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astDiscussDetailInfos_i = 0; astDiscussDetailInfos_i < this->iInfoCount; astDiscussDetailInfos_i++)
        {
            ret = this->astDiscussDetailInfos[astDiscussDetailInfos_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryDiscussDetail_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryDiscussDetail_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryDiscussDetail_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryDiscussDetail_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTotalCount */
    {
        ret = destBuf.writeInt32_l(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInfoCount */
    {
        ret = destBuf.writeInt32_l(this->iInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astDiscussDetailInfos */
    {
        if (0 > this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_RECORD_COUNT_ONCE < this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astDiscussDetailInfos_i = 0; astDiscussDetailInfos_i < this->iInfoCount; astDiscussDetailInfos_i++)
        {
            ret = this->astDiscussDetailInfos[astDiscussDetailInfos_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryDiscussDetail_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryDiscussDetail_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryDiscussDetail_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryDiscussDetail_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryDiscussDetail_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryDiscussDetail_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTotalCount */
    {
        ret = srcBuf.readInt32(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInfoCount */
    {
        ret = srcBuf.readInt32(this->iInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astDiscussDetailInfos */
    {
        if (0 > this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_RECORD_COUNT_ONCE < this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astDiscussDetailInfos_i = 0; astDiscussDetailInfos_i < this->iInfoCount; astDiscussDetailInfos_i++)
        {
            ret = this->astDiscussDetailInfos[astDiscussDetailInfos_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryDiscussDetail_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_QueryDiscussDetail_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_QueryDiscussDetail_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_QueryDiscussDetail_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTotalCount */
    {
        ret = srcBuf.readInt32_l(this->iTotalCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInfoCount */
    {
        ret = srcBuf.readInt32_l(this->iInfoCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astDiscussDetailInfos */
    {
        if (0 > this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_DISCUSS_DETAIL_RECORD_COUNT_ONCE < this->iInfoCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astDiscussDetailInfos_i = 0; astDiscussDetailInfos_i < this->iInfoCount; astDiscussDetailInfos_i++)
        {
            ret = this->astDiscussDetailInfos[astDiscussDetailInfos_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
TC_QueryDiscussDetail_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_QueryDiscussDetail_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTotalCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTotalCount]", "%d", this->iTotalCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInfoCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInfoCount]", "%d", this->iInfoCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astDiscussDetailInfos */
    if (0 > this->iInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_DISCUSS_DETAIL_RECORD_COUNT_ONCE < this->iInfoCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astDiscussDetailInfos_i = 0; astDiscussDetailInfos_i < this->iInfoCount; astDiscussDetailInfos_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astDiscussDetailInfos]", astDiscussDetailInfos_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astDiscussDetailInfos[astDiscussDetailInfos_i] */
        if (0 > indent)
        {
            ret = this->astDiscussDetailInfos[astDiscussDetailInfos_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astDiscussDetailInfos[astDiscussDetailInfos_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
TC_QueryDiscussDetail_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_QueryDiscussDetail_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_DeleteDiscuss_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_DeleteDiscuss_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_DeleteDiscuss_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_DeleteDiscuss_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_DeleteDiscuss_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_DeleteDiscuss_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_DeleteDiscuss_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDiscussId */
    {
        ret = destBuf.writeInt64(this->llDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_DeleteDiscuss_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_DeleteDiscuss_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_DeleteDiscuss_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_DeleteDiscuss_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderId */
    {
        ret = destBuf.writeInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDiscussId */
    {
        ret = destBuf.writeInt64_l(this->llDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_DeleteDiscuss_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_DeleteDiscuss_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_DeleteDiscuss_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_DeleteDiscuss_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_DeleteDiscuss_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_DeleteDiscuss_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDiscussId */
    {
        ret = srcBuf.readInt64(this->llDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_DeleteDiscuss_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_DeleteDiscuss_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_DeleteDiscuss_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_DeleteDiscuss_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderId */
    {
        ret = srcBuf.readInt64_l(this->llOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDiscussId */
    {
        ret = srcBuf.readInt64_l(this->llDiscussId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_DeleteDiscuss_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_DeleteDiscuss_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderId]", TDR_CPP_INT64_FORMAT, this->llOrderId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llDiscussId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llDiscussId]", TDR_CPP_INT64_FORMAT, this->llDiscussId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_DeleteDiscuss_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_DeleteDiscuss_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_DeleteDiscuss_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_DeleteDiscuss_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_DeleteDiscuss_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_DeleteDiscuss_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_DeleteDiscuss_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_DeleteDiscuss_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_DeleteDiscuss_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_DeleteDiscuss_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_DeleteDiscuss_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_DeleteDiscuss_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_DeleteDiscuss_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_DeleteDiscuss_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_DeleteDiscuss_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_DeleteDiscuss_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_DeleteDiscuss_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_DeleteDiscuss_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_DeleteDiscuss_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_DeleteDiscuss_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_DeleteDiscuss_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_DeleteDiscuss_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_DeleteDiscuss_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_DeleteDiscuss_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_DeleteDiscuss_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_DeleteDiscuss_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_DeleteDiscuss_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeGetTaskAward::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeGetTaskAward::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeGetTaskAward::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iTaskId */
    {
        ret = destBuf.writeInt32(this->iTaskId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeGetTaskAward::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeGetTaskAward::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeGetTaskAward::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iTaskId */
    {
        ret = destBuf.writeInt32_l(this->iTaskId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeGetTaskAward::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeGetTaskAward::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeGetTaskAward::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iTaskId */
    {
        ret = srcBuf.readInt32(this->iTaskId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeGetTaskAward::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeGetTaskAward::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeGetTaskAward::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iTaskId */
    {
        ret = srcBuf.readInt32_l(this->iTaskId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeGetTaskAward::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iTaskId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTaskId]", "%d", this->iTaskId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeGetTaskAward::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeGetTaskAward::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientGetTaskAward::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientGetTaskAward::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientGetTaskAward::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientGetTaskAward::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientGetTaskAward::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientGetTaskAward::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientGetTaskAward::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientGetTaskAward::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientGetTaskAward::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientGetTaskAward::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientGetTaskAward::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientGetTaskAward::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientGetTaskAward::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientGetTaskAward::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientGetTaskAward::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
OfflineMesgData::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
OfflineMesgData::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OfflineMesgData::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OfflineMesgData::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OfflineMesgData::CURRVERSION < cutVer)
    {
        cutVer = OfflineMesgData::CURRVERSION;
    }

    /* check cutversion */
    if (OfflineMesgData::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llSenderid */
    {
        ret = destBuf.writeInt64(this->llSenderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMesgLen */
    {
        ret = destBuf.writeInt32(this->iMesgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szMesgData */
    {
        if (0 > this->iMesgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (SYSTEM_SEND_MESG_MAX_LEN < this->iMesgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szMesgData, this->iMesgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chType */
    {
        ret = destBuf.writeInt8(this->chType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTimeStamp */
    {
        ret = destBuf.writeInt32(this->iTimeStamp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OfflineMesgData::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OfflineMesgData::CURRVERSION < cutVer)
    {
        cutVer = OfflineMesgData::CURRVERSION;
    }

    /* check cutversion */
    if (OfflineMesgData::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llSenderid */
    {
        ret = destBuf.writeInt64_l(this->llSenderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMesgLen */
    {
        ret = destBuf.writeInt32_l(this->iMesgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szMesgData */
    {
        if (0 > this->iMesgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (SYSTEM_SEND_MESG_MAX_LEN < this->iMesgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szMesgData, this->iMesgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chType */
    {
        ret = destBuf.writeInt8(this->chType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTimeStamp */
    {
        ret = destBuf.writeInt32_l(this->iTimeStamp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OfflineMesgData::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OfflineMesgData::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OfflineMesgData::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OfflineMesgData::CURRVERSION < cutVer)
    {
        cutVer = OfflineMesgData::CURRVERSION;
    }

    /* check cutversion */
    if (OfflineMesgData::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llSenderid */
    {
        ret = srcBuf.readInt64(this->llSenderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMesgLen */
    {
        ret = srcBuf.readInt32(this->iMesgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szMesgData */
    {
        if (0 > this->iMesgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (SYSTEM_SEND_MESG_MAX_LEN < this->iMesgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szMesgData, this->iMesgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chType */
    {
        ret = srcBuf.readInt8(this->chType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTimeStamp */
    {
        ret = srcBuf.readInt32(this->iTimeStamp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OfflineMesgData::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OfflineMesgData::CURRVERSION < cutVer)
    {
        cutVer = OfflineMesgData::CURRVERSION;
    }

    /* check cutversion */
    if (OfflineMesgData::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llSenderid */
    {
        ret = srcBuf.readInt64_l(this->llSenderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMesgLen */
    {
        ret = srcBuf.readInt32_l(this->iMesgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szMesgData */
    {
        if (0 > this->iMesgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (SYSTEM_SEND_MESG_MAX_LEN < this->iMesgLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szMesgData, this->iMesgLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chType */
    {
        ret = srcBuf.readInt8(this->chType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTimeStamp */
    {
        ret = srcBuf.readInt32_l(this->iTimeStamp);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OfflineMesgData::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OfflineMesgData::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llSenderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llSenderid]", TDR_CPP_INT64_FORMAT, this->llSenderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMesgLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMesgLen]", "%d", this->iMesgLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szMesgData */
    if (0 > this->iMesgLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (SYSTEM_SEND_MESG_MAX_LEN < this->iMesgLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szMesgData]", this->iMesgLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szMesgData_i = 0; szMesgData_i < this->iMesgLen; szMesgData_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szMesgData[szMesgData_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chType]", "0x%02x", this->chType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTimeStamp */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTimeStamp]", "%d", this->iTimeStamp);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
OfflineMesgData::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
OfflineMesgData::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CmdSystemSendMesg::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CmdSystemSendMesg::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CmdSystemSendMesg::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CmdSystemSendMesg::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CmdSystemSendMesg::CURRVERSION < cutVer)
    {
        cutVer = CmdSystemSendMesg::CURRVERSION;
    }

    /* check cutversion */
    if (CmdSystemSendMesg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iMesgCount */
    {
        ret = destBuf.writeInt32(this->iMesgCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astOfflineMesgData */
    {
        if (0 > this->iMesgCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OFFLINE_MESG_MAX_COUNT < this->iMesgCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOfflineMesgData_i = 0; astOfflineMesgData_i < this->iMesgCount; astOfflineMesgData_i++)
        {
            ret = this->astOfflineMesgData[astOfflineMesgData_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CmdSystemSendMesg::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CmdSystemSendMesg::CURRVERSION < cutVer)
    {
        cutVer = CmdSystemSendMesg::CURRVERSION;
    }

    /* check cutversion */
    if (CmdSystemSendMesg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iMesgCount */
    {
        ret = destBuf.writeInt32_l(this->iMesgCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astOfflineMesgData */
    {
        if (0 > this->iMesgCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OFFLINE_MESG_MAX_COUNT < this->iMesgCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOfflineMesgData_i = 0; astOfflineMesgData_i < this->iMesgCount; astOfflineMesgData_i++)
        {
            ret = this->astOfflineMesgData[astOfflineMesgData_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CmdSystemSendMesg::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CmdSystemSendMesg::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CmdSystemSendMesg::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CmdSystemSendMesg::CURRVERSION < cutVer)
    {
        cutVer = CmdSystemSendMesg::CURRVERSION;
    }

    /* check cutversion */
    if (CmdSystemSendMesg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iMesgCount */
    {
        ret = srcBuf.readInt32(this->iMesgCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astOfflineMesgData */
    {
        if (0 > this->iMesgCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OFFLINE_MESG_MAX_COUNT < this->iMesgCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOfflineMesgData_i = 0; astOfflineMesgData_i < this->iMesgCount; astOfflineMesgData_i++)
        {
            ret = this->astOfflineMesgData[astOfflineMesgData_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CmdSystemSendMesg::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CmdSystemSendMesg::CURRVERSION < cutVer)
    {
        cutVer = CmdSystemSendMesg::CURRVERSION;
    }

    /* check cutversion */
    if (CmdSystemSendMesg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iMesgCount */
    {
        ret = srcBuf.readInt32_l(this->iMesgCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astOfflineMesgData */
    {
        if (0 > this->iMesgCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (OFFLINE_MESG_MAX_COUNT < this->iMesgCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astOfflineMesgData_i = 0; astOfflineMesgData_i < this->iMesgCount; astOfflineMesgData_i++)
        {
            ret = this->astOfflineMesgData[astOfflineMesgData_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CmdSystemSendMesg::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CmdSystemSendMesg::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iMesgCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMesgCount]", "%d", this->iMesgCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astOfflineMesgData */
    if (0 > this->iMesgCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (OFFLINE_MESG_MAX_COUNT < this->iMesgCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astOfflineMesgData_i = 0; astOfflineMesgData_i < this->iMesgCount; astOfflineMesgData_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astOfflineMesgData]", astOfflineMesgData_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astOfflineMesgData[astOfflineMesgData_i] */
        if (0 > indent)
        {
            ret = this->astOfflineMesgData[astOfflineMesgData_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astOfflineMesgData[astOfflineMesgData_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
CmdSystemSendMesg::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CmdSystemSendMesg::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDoneApplyer::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDoneApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDoneApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDoneApplyer::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDoneApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDoneApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDoneApplyer::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDoneApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDoneApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDoneApplyer::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDoneApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDoneApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneApplyer::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeOrderDoneApplyer::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeOrderDoneApplyer::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientOrderDoneApplyer::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientOrderDoneApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientOrderDoneApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientOrderDoneApplyer::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientOrderDoneApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientOrderDoneApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientOrderDoneApplyer::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientOrderDoneApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientOrderDoneApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientOrderDoneApplyer::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientOrderDoneApplyer::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientOrderDoneApplyer::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneApplyer::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientOrderDoneApplyer::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientOrderDoneApplyer::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDoneCreater::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDoneCreater::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDoneCreater::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDoneCreater::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDoneCreater::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDoneCreater::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llOrderid */
    {
        ret = destBuf.writeInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDoneCreater::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDoneCreater::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDoneCreater::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeOrderDoneCreater::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeOrderDoneCreater::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeOrderDoneCreater::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llOrderid */
    {
        ret = srcBuf.readInt64_l(this->llOrderid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeOrderDoneCreater::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llOrderid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llOrderid]", TDR_CPP_INT64_FORMAT, this->llOrderid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeOrderDoneCreater::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeOrderDoneCreater::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientOrderDoneCreater::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientOrderDoneCreater::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientOrderDoneCreater::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientOrderDoneCreater::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientOrderDoneCreater::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientOrderDoneCreater::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientOrderDoneCreater::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientOrderDoneCreater::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientOrderDoneCreater::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientOrderDoneCreater::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientOrderDoneCreater::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientOrderDoneCreater::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientOrderDoneCreater::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientOrderDoneCreater::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientOrderDoneCreater::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CT_ReportInfo_Req::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CT_ReportInfo_Req::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_ReportInfo_Req::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_ReportInfo_Req::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_ReportInfo_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_ReportInfo_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_ReportInfo_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llReporterUid */
    {
        ret = destBuf.writeInt64(this->llReporterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llObjectUid */
    {
        ret = destBuf.writeInt64(this->llObjectUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llObjectOrderId */
    {
        ret = destBuf.writeInt64(this->llObjectOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iReportDescLen */
    {
        ret = destBuf.writeInt32(this->iReportDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szReportDesc */
    {
        if (0 > this->iReportDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (REPORT_DESC_MAX_LEN < this->iReportDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szReportDesc, this->iReportDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_ReportInfo_Req::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_ReportInfo_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_ReportInfo_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_ReportInfo_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llReporterUid */
    {
        ret = destBuf.writeInt64_l(this->llReporterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llObjectUid */
    {
        ret = destBuf.writeInt64_l(this->llObjectUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llObjectOrderId */
    {
        ret = destBuf.writeInt64_l(this->llObjectOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iReportDescLen */
    {
        ret = destBuf.writeInt32_l(this->iReportDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szReportDesc */
    {
        if (0 > this->iReportDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (REPORT_DESC_MAX_LEN < this->iReportDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szReportDesc, this->iReportDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_ReportInfo_Req::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_ReportInfo_Req::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_ReportInfo_Req::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_ReportInfo_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_ReportInfo_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_ReportInfo_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llReporterUid */
    {
        ret = srcBuf.readInt64(this->llReporterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llObjectUid */
    {
        ret = srcBuf.readInt64(this->llObjectUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llObjectOrderId */
    {
        ret = srcBuf.readInt64(this->llObjectOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iReportDescLen */
    {
        ret = srcBuf.readInt32(this->iReportDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szReportDesc */
    {
        if (0 > this->iReportDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (REPORT_DESC_MAX_LEN < this->iReportDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szReportDesc, this->iReportDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_ReportInfo_Req::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CT_ReportInfo_Req::CURRVERSION < cutVer)
    {
        cutVer = CT_ReportInfo_Req::CURRVERSION;
    }

    /* check cutversion */
    if (CT_ReportInfo_Req::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llReporterUid */
    {
        ret = srcBuf.readInt64_l(this->llReporterUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llObjectUid */
    {
        ret = srcBuf.readInt64_l(this->llObjectUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llObjectOrderId */
    {
        ret = srcBuf.readInt64_l(this->llObjectOrderId);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iReportDescLen */
    {
        ret = srcBuf.readInt32_l(this->iReportDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szReportDesc */
    {
        if (0 > this->iReportDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (REPORT_DESC_MAX_LEN < this->iReportDescLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szReportDesc, this->iReportDescLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CT_ReportInfo_Req::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CT_ReportInfo_Req::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llReporterUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llReporterUid]", TDR_CPP_INT64_FORMAT, this->llReporterUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llObjectUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llObjectUid]", TDR_CPP_INT64_FORMAT, this->llObjectUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llObjectOrderId */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llObjectOrderId]", TDR_CPP_INT64_FORMAT, this->llObjectOrderId);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iReportDescLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iReportDescLen]", "%d", this->iReportDescLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szReportDesc */
    if (0 > this->iReportDescLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (REPORT_DESC_MAX_LEN < this->iReportDescLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szReportDesc]", this->iReportDescLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szReportDesc_i = 0; szReportDesc_i < this->iReportDescLen; szReportDesc_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szReportDesc[szReportDesc_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CT_ReportInfo_Req::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CT_ReportInfo_Req::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TC_ReportInfo_Resp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TC_ReportInfo_Resp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_ReportInfo_Resp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_ReportInfo_Resp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_ReportInfo_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_ReportInfo_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_ReportInfo_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_ReportInfo_Resp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_ReportInfo_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_ReportInfo_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_ReportInfo_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_ReportInfo_Resp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_ReportInfo_Resp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_ReportInfo_Resp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_ReportInfo_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_ReportInfo_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_ReportInfo_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_ReportInfo_Resp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TC_ReportInfo_Resp::CURRVERSION < cutVer)
    {
        cutVer = TC_ReportInfo_Resp::CURRVERSION;
    }

    /* check cutversion */
    if (TC_ReportInfo_Resp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TC_ReportInfo_Resp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TC_ReportInfo_Resp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TC_ReportInfo_Resp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TC_ReportInfo_Resp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
PlayersNearbyInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
PlayersNearbyInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayersNearbyInfo::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayersNearbyInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || PlayersNearbyInfo::CURRVERSION < cutVer)
    {
        cutVer = PlayersNearbyInfo::CURRVERSION;
    }

    /* check cutversion */
    if (PlayersNearbyInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDistance */
    {
        ret = destBuf.writeInt64(this->llDistance);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickname */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickname, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLatitude */
    {
        ret = destBuf.writeInt64(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLastUpdateTime */
    {
        ret = destBuf.writeInt64(this->llLastUpdateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
PlayersNearbyInfo::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || PlayersNearbyInfo::CURRVERSION < cutVer)
    {
        cutVer = PlayersNearbyInfo::CURRVERSION;
    }

    /* check cutversion */
    if (PlayersNearbyInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llDistance */
    {
        ret = destBuf.writeInt64_l(this->llDistance);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNickNameLen */
    {
        ret = destBuf.writeInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szNickname */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szNickname, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLatitude */
    {
        ret = destBuf.writeInt64_l(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLastUpdateTime */
    {
        ret = destBuf.writeInt64_l(this->llLastUpdateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llBirthday */
    {
        ret = destBuf.writeInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSignatureLen */
    {
        ret = destBuf.writeInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
PlayersNearbyInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayersNearbyInfo::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayersNearbyInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || PlayersNearbyInfo::CURRVERSION < cutVer)
    {
        cutVer = PlayersNearbyInfo::CURRVERSION;
    }

    /* check cutversion */
    if (PlayersNearbyInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDistance */
    {
        ret = srcBuf.readInt64(this->llDistance);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickname */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickname, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLatitude */
    {
        ret = srcBuf.readInt64(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLastUpdateTime */
    {
        ret = srcBuf.readInt64(this->llLastUpdateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
PlayersNearbyInfo::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || PlayersNearbyInfo::CURRVERSION < cutVer)
    {
        cutVer = PlayersNearbyInfo::CURRVERSION;
    }

    /* check cutversion */
    if (PlayersNearbyInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64_l(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llDistance */
    {
        ret = srcBuf.readInt64_l(this->llDistance);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNickNameLen */
    {
        ret = srcBuf.readInt32_l(this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szNickname */
    {
        if (0 > this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szNickname, this->iNickNameLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLatitude */
    {
        ret = srcBuf.readInt64_l(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLastUpdateTime */
    {
        ret = srcBuf.readInt64_l(this->llLastUpdateTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llBirthday */
    {
        ret = srcBuf.readInt64_l(this->llBirthday);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSignatureLen */
    {
        ret = srcBuf.readInt32_l(this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szSignature */
    {
        if (0 > this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szSignature, this->iSignatureLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
PlayersNearbyInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayersNearbyInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGender]", "%d", this->iGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llDistance */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llDistance]", TDR_CPP_INT64_FORMAT, this->llDistance);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNickNameLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNickNameLen]", "%d", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szNickname */
    if (0 > this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_NICK_NAME_LEN < this->iNickNameLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szNickname]", this->iNickNameLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szNickname_i = 0; szNickname_i < this->iNickNameLen; szNickname_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szNickname[szNickname_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLongitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLongitude]", TDR_CPP_INT64_FORMAT, this->llLongitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLatitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLatitude]", TDR_CPP_INT64_FORMAT, this->llLatitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLastUpdateTime */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLastUpdateTime]", TDR_CPP_INT64_FORMAT, this->llLastUpdateTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llBirthday */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llBirthday]", TDR_CPP_INT64_FORMAT, this->llBirthday);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSignatureLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSignatureLen]", "%d", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szSignature */
    if (0 > this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_USER_SIGNATURE_MAX_LEN < this->iSignatureLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szSignature]", this->iSignatureLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szSignature_i = 0; szSignature_i < this->iSignatureLen; szSignature_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szSignature[szSignature_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
PlayersNearbyInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
PlayersNearbyInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientPlayersNearbyReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyReq::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPlayersNearbyReq::CURRVERSION < cutVer)
    {
        cutVer = ClientPlayersNearbyReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPlayersNearbyReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLatitude */
    {
        ret = destBuf.writeInt64(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyReq::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPlayersNearbyReq::CURRVERSION < cutVer)
    {
        cutVer = ClientPlayersNearbyReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPlayersNearbyReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llLongitude */
    {
        ret = destBuf.writeInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llLatitude */
    {
        ret = destBuf.writeInt64_l(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iGender */
    {
        ret = destBuf.writeInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyReq::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPlayersNearbyReq::CURRVERSION < cutVer)
    {
        cutVer = ClientPlayersNearbyReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPlayersNearbyReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLatitude */
    {
        ret = srcBuf.readInt64(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyReq::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPlayersNearbyReq::CURRVERSION < cutVer)
    {
        cutVer = ClientPlayersNearbyReq::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPlayersNearbyReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llLongitude */
    {
        ret = srcBuf.readInt64_l(this->llLongitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llLatitude */
    {
        ret = srcBuf.readInt64_l(this->llLatitude);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iGender */
    {
        ret = srcBuf.readInt32_l(this->iGender);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llLongitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLongitude]", TDR_CPP_INT64_FORMAT, this->llLongitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llLatitude */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llLatitude]", TDR_CPP_INT64_FORMAT, this->llLatitude);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iGender */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iGender]", "%d", this->iGender);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientPlayersNearbyReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientPlayersNearbyReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientPlayersNearbyResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyResp::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPlayersNearbyResp::CURRVERSION < cutVer)
    {
        cutVer = ClientPlayersNearbyResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPlayersNearbyResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPlayersNearbyCount */
    {
        ret = destBuf.writeInt32(this->iPlayersNearbyCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astPlayersNearbyInfo */
    {
        if (0 > this->iPlayersNearbyCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (PLAYERS_NEARBY_MAX_COUNT < this->iPlayersNearbyCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astPlayersNearbyInfo_i = 0; astPlayersNearbyInfo_i < this->iPlayersNearbyCount; astPlayersNearbyInfo_i++)
        {
            ret = this->astPlayersNearbyInfo[astPlayersNearbyInfo_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyResp::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPlayersNearbyResp::CURRVERSION < cutVer)
    {
        cutVer = ClientPlayersNearbyResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPlayersNearbyResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPlayersNearbyCount */
    {
        ret = destBuf.writeInt32_l(this->iPlayersNearbyCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astPlayersNearbyInfo */
    {
        if (0 > this->iPlayersNearbyCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (PLAYERS_NEARBY_MAX_COUNT < this->iPlayersNearbyCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astPlayersNearbyInfo_i = 0; astPlayersNearbyInfo_i < this->iPlayersNearbyCount; astPlayersNearbyInfo_i++)
        {
            ret = this->astPlayersNearbyInfo[astPlayersNearbyInfo_i].pack_l(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyResp::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPlayersNearbyResp::CURRVERSION < cutVer)
    {
        cutVer = ClientPlayersNearbyResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPlayersNearbyResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPlayersNearbyCount */
    {
        ret = srcBuf.readInt32(this->iPlayersNearbyCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astPlayersNearbyInfo */
    {
        if (0 > this->iPlayersNearbyCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (PLAYERS_NEARBY_MAX_COUNT < this->iPlayersNearbyCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astPlayersNearbyInfo_i = 0; astPlayersNearbyInfo_i < this->iPlayersNearbyCount; astPlayersNearbyInfo_i++)
        {
            ret = this->astPlayersNearbyInfo[astPlayersNearbyInfo_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyResp::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPlayersNearbyResp::CURRVERSION < cutVer)
    {
        cutVer = ClientPlayersNearbyResp::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPlayersNearbyResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPlayersNearbyCount */
    {
        ret = srcBuf.readInt32_l(this->iPlayersNearbyCount);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astPlayersNearbyInfo */
    {
        if (0 > this->iPlayersNearbyCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (PLAYERS_NEARBY_MAX_COUNT < this->iPlayersNearbyCount)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astPlayersNearbyInfo_i = 0; astPlayersNearbyInfo_i < this->iPlayersNearbyCount; astPlayersNearbyInfo_i++)
        {
            ret = this->astPlayersNearbyInfo[astPlayersNearbyInfo_i].unpack_l(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPlayersNearbyResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPlayersNearbyCount */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPlayersNearbyCount]", "%d", this->iPlayersNearbyCount);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astPlayersNearbyInfo */
    if (0 > this->iPlayersNearbyCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (PLAYERS_NEARBY_MAX_COUNT < this->iPlayersNearbyCount)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astPlayersNearbyInfo_i = 0; astPlayersNearbyInfo_i < this->iPlayersNearbyCount; astPlayersNearbyInfo_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astPlayersNearbyInfo]", astPlayersNearbyInfo_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astPlayersNearbyInfo[astPlayersNearbyInfo_i] */
        if (0 > indent)
        {
            ret = this->astPlayersNearbyInfo[astPlayersNearbyInfo_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astPlayersNearbyInfo[astPlayersNearbyInfo_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
ClientPlayersNearbyResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientPlayersNearbyResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeMakeReputation::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeMakeReputation::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeMakeReputation::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llReceive_uid */
    {
        ret = destBuf.writeInt64(this->llReceive_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeMakeReputation::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeMakeReputation::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeMakeReputation::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llReceive_uid */
    {
        ret = destBuf.writeInt64_l(this->llReceive_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeMakeReputation::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeMakeReputation::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeMakeReputation::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llReceive_uid */
    {
        ret = srcBuf.readInt64(this->llReceive_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientRequestAccessTradeMakeReputation::CURRVERSION < cutVer)
    {
        cutVer = ClientRequestAccessTradeMakeReputation::CURRVERSION;
    }

    /* check cutversion */
    if (ClientRequestAccessTradeMakeReputation::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llReceive_uid */
    {
        ret = srcBuf.readInt64_l(this->llReceive_uid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientRequestAccessTradeMakeReputation::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llReceive_uid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llReceive_uid]", TDR_CPP_INT64_FORMAT, this->llReceive_uid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientRequestAccessTradeMakeReputation::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientRequestAccessTradeMakeReputation::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeResponseAccessClientMakeReputation::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientMakeReputation::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientMakeReputation::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientMakeReputation::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientMakeReputation::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientMakeReputation::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientMakeReputation::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientMakeReputation::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientMakeReputation::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientMakeReputation::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientMakeReputation::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientMakeReputation::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientMakeReputation::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientMakeReputation::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientMakeReputation::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientMakeReputation::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientMakeReputation::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientMakeReputation::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeResponseAccessClientMakeReputation::CURRVERSION < cutVer)
    {
        cutVer = TradeResponseAccessClientMakeReputation::CURRVERSION;
    }

    /* check cutversion */
    if (TradeResponseAccessClientMakeReputation::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32_l(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientMakeReputation::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeResponseAccessClientMakeReputation::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeResponseAccessClientMakeReputation::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeResponseAccessClientMakeReputation::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientPkgHead::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientPkgHead::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkgHead::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkgHead::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPkgHead::CURRVERSION < cutVer)
    {
        cutVer = ClientPkgHead::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkgHead::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->wDataSize */
    {
        ret = destBuf.writeUInt16(this->wDataSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bCheckCode */
    {
        ret = destBuf.writeUInt8(this->bCheckCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bMessageVer */
    {
        ret = destBuf.writeUInt8(this->bMessageVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwCmdID */
    {
        ret = destBuf.writeUInt32(this->dwCmdID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPkgHead::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPkgHead::CURRVERSION < cutVer)
    {
        cutVer = ClientPkgHead::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkgHead::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->wDataSize */
    {
        ret = destBuf.writeUInt16_l(this->wDataSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bCheckCode */
    {
        ret = destBuf.writeUInt8(this->bCheckCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bMessageVer */
    {
        ret = destBuf.writeUInt8(this->bMessageVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwCmdID */
    {
        ret = destBuf.writeUInt32_l(this->dwCmdID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPkgHead::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkgHead::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkgHead::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPkgHead::CURRVERSION < cutVer)
    {
        cutVer = ClientPkgHead::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkgHead::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->wDataSize */
    {
        ret = srcBuf.readUInt16(this->wDataSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bCheckCode */
    {
        ret = srcBuf.readUInt8(this->bCheckCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bMessageVer */
    {
        ret = srcBuf.readUInt8(this->bMessageVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwCmdID */
    {
        ret = srcBuf.readUInt32(this->dwCmdID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPkgHead::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPkgHead::CURRVERSION < cutVer)
    {
        cutVer = ClientPkgHead::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkgHead::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->wDataSize */
    {
        ret = srcBuf.readUInt16_l(this->wDataSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bCheckCode */
    {
        ret = srcBuf.readUInt8(this->bCheckCode);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bMessageVer */
    {
        ret = srcBuf.readUInt8(this->bMessageVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwCmdID */
    {
        ret = srcBuf.readUInt32_l(this->dwCmdID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPkgHead::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkgHead::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->wDataSize */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[wDataSize]", "%d", this->wDataSize);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bCheckCode */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bCheckCode]", "0x%02x", this->bCheckCode);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bMessageVer */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bMessageVer]", "0x%02x", this->bMessageVer);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwCmdID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwCmdID]", "%u", this->dwCmdID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientPkgHead::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientPkgHead::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ClientPkgBody::construct(int64_t selector)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (CMD_KICKOFF_USER_NOTIFY == selector)
    {
        ret = this->stCmdKickoffUserNotify.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_REQ == selector)
    {
        ret = this->stClientVcCodeReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_RESP == selector)
    {
        ret = this->stClientVcCodeResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_REQ == selector)
    {
        ret = this->stClientRegisterReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_RESP == selector)
    {
        ret = this->stClientRegisterResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_REQ == selector)
    {
        ret = this->stClientNameLogonReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_RESP == selector)
    {
        ret = this->stClientNameLogonResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_REQ == selector)
    {
        ret = this->stClientBaseInfoReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_RESP == selector)
    {
        ret = this->stClientBaseInfoResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_REQ == selector)
    {
        ret = this->stClientUpdateBaseInfoReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_RESP == selector)
    {
        ret = this->stClientUpdateBaseInfoResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_REQ == selector)
    {
        ret = this->stClientBaseInfoListReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_RESP == selector)
    {
        ret = this->stClientBaseInfoListResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_REQ == selector)
    {
        ret = this->stClientUpdateBirthdayReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_RESP == selector)
    {
        ret = this->stClientUpdateBirthdayResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_REQ == selector)
    {
        ret = this->stClientUpdateNickNameReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_RESP == selector)
    {
        ret = this->stClientUpdateNickNameResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_REQ == selector)
    {
        ret = this->stClientUpdateOccupationReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_RESP == selector)
    {
        ret = this->stClientUpdateOccupationResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_REQ == selector)
    {
        ret = this->stClientUpdateResidentionReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_RESP == selector)
    {
        ret = this->stClientUpdateResidentionResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_REQ == selector)
    {
        ret = this->stClientUpdateSignatureReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_RESP == selector)
    {
        ret = this->stClientUpdateSignatureResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_REQ == selector)
    {
        ret = this->stClientUpdatePortraitReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_RESP == selector)
    {
        ret = this->stClientUpdatePortraitResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_REQ == selector)
    {
        ret = this->stClientUpdateGenderReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_RESP == selector)
    {
        ret = this->stClientUpdateGenderResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_REQ == selector)
    {
        ret = this->stClientUserAccountInfoReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_RESP == selector)
    {
        ret = this->stClientUserAccountInfoResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CG_UPDATE_RESIDENTION_DETAIL_REQ == selector)
    {
        ret = this->stCG_UpdateResidentionDetail_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_GC_UPDATE_RESIDENTION_DETAIL_RESP == selector)
    {
        ret = this->stGC_UpdateResidentionDetail_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_REQ == selector)
    {
        ret = this->stClientPhoneQueryUserIdReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_RESP == selector)
    {
        ret = this->stClientPhoneQueryUserIdResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_REQ == selector)
    {
        ret = this->stClientRetrieveCodeReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_RESP == selector)
    {
        ret = this->stClientRetrieveCodeResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_REQ == selector)
    {
        ret = this->stClientValidateRetrieveCodeReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_RESP == selector)
    {
        ret = this->stClientValidateRetrieveCodeResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_REQ == selector)
    {
        ret = this->stClientModifyPasswordReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_RESP == selector)
    {
        ret = this->stClientModifyPasswordResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_REQ == selector)
    {
        ret = this->stClientTokenLoginReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_RESP == selector)
    {
        ret = this->stClientTokenLoginResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_REQ == selector)
    {
        ret = this->stClientAccountInfoListReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_RESP == selector)
    {
        ret = this->stClientAccountInfoListResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_REQ == selector)
    {
        ret = this->stClientAddressPhoneQueryReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_RESP == selector)
    {
        ret = this->stClientAddressPhoneQueryResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_NAME_LOGIN == selector)
    {
        ret = this->stClientRequestAccessNameLogin.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TOKEN_LOGIN == selector)
    {
        ret = this->stClientRequestAccessTokenLogin.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_RESPONSE_CLIENT_NAME_LOGIN == selector)
    {
        ret = this->stAccessResponseClientNameLogin.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_ORDER == selector)
    {
        ret = this->stClientRequestAccessTradeCreateOrder.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_ORDER == selector)
    {
        ret = this->stTradeResponseAccessClientCreateOrder.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderBasicInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderBasicInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderSpecificInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderSpecificInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_APPLY_ORDER == selector)
    {
        ret = this->stClientRequestAccessTradeApplyOrder.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_APPLY_ORDER == selector)
    {
        ret = this->stTradeResponseAccessClientApplyOrder.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYER == selector)
    {
        ret = this->stClientRequestAccessTradeSelectApplyer.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYER == selector)
    {
        ret = this->stTradeResponseAccessClientSelectApplyer.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_REQ == selector)
    {
        ret = this->stClientConfirmOrCancelOrderReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_RESP == selector)
    {
        ret = this->stClientConfirmOrCancelOrderResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_REQ == selector)
    {
        ret = this->stClientCreatedOrderBriefReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_RESP == selector)
    {
        ret = this->stClientCreatedOrderBriefResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_DISCUSS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectDiscuss.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_DISCUSS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectDiscuss.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_DISCUSS == selector)
    {
        ret = this->stClientRequestAccessTradeCreateDiscuss.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_DISCUSS == selector)
    {
        ret = this->stTradeResponseAccessClientCreateDiscuss.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PHOTO_WALL == selector)
    {
        ret = this->stClientRequestAccessTradeSelectPhotoWall.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PHOTO_WALL == selector)
    {
        ret = this->stTradeResponseAccessClientSelectPhotoWall.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_PHOTO_WALL == selector)
    {
        ret = this->stClientRequestAccessTradeUpdatePhotoWall.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_PHOTO_WALL == selector)
    {
        ret = this->stTradeResponseAccessClientUpdatePhotoWall.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_REGISTER_TRADEINFO == selector)
    {
        ret = this->stClientRequestAccessTradeRegisterTradeinfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_REGISTER_TRADEINFO == selector)
    {
        ret = this->stTradeResponseAccessClientRegisterTradeinfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_ARGUE == selector)
    {
        ret = this->stClientRequestAccessTradeUpdateArgue.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_ARGUE == selector)
    {
        ret = this->stTradeResponseAccessClientUpdateArgue.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TRADEUSERINFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectTradeUserInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TRADEUSERINFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectTradeUserInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_SERVICE == selector)
    {
        ret = this->stClientRequestAccessTradeUpdateService.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_SERVICE == selector)
    {
        ret = this->stTradeResponseAccessClientUpdateService.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectGifts.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectGifts.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_PRESENT_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradePresentGifts.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_PRESENT_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientPresentGifts.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_BUY_CAR_REQ == selector)
    {
        ret = this->stCT_BuyCar_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_BUY_CAR_RESP == selector)
    {
        ret = this->stTC_BuyCar_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_OPERATE_CAR_REQ == selector)
    {
        ret = this->stCT_OperateCar_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_OPERATE_CAR_RESP == selector)
    {
        ret = this->stTC_OperateCar_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CT_APPLY_ORDER_BRIEF_REQ == selector)
    {
        ret = this->stClientAppliedOrderBriefReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TC_APPLY_ORDER_BRIEF_RESP == selector)
    {
        ret = this->stClientAppliedOrderBriefResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_GuaranteeFriend_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_GuaranteeFriend_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_CANCEL_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_CancelGuaranteeFriend_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_CANCEL_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_CancelGuaranteeFriend_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_QueryGuaranteeFriend_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_QueryGuaranteeFriend_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TASKINFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectTaskInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TASKINFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectTaskInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELL_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradeSellGifts.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELL_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientSellGifts.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_USERINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectUserInfoList.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_USERINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectUserInfoList.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPLEVEL_VIP == selector)
    {
        ret = this->stClientRequestAccessTradeUpLevelVip.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPLEVEL_VIP == selector)
    {
        ret = this->stTradeResponseAccessClientUpLevelVip.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_CHATROOMINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeGetChatRoomInfoList.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_GET_CHATROOMINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientGetChatRoomInfoList.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectGiftsPagidList.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectGiftsPagidList.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_IDENTITYBANK == selector)
    {
        ret = this->stClientRequestAccessTradeSelectIdentityBank.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_IDENTITYBANK == selector)
    {
        ret = this->stTradeResponseAccessClientSelectIdentityBank.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_VISITORSLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectVisitorsList.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_VISITORSLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectVisitorsList.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_SELF_GUARANTEE_REQ == selector)
    {
        ret = this->stCT_QuerySelfGuarantee_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_SELF_GUARANTEE_RESP == selector)
    {
        ret = this->stTC_QuerySelfGuarantee_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_PROMISE_SELF_REQ == selector)
    {
        ret = this->stCT_QueryPromiseSelf_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_PROMISE_SELF_RESP == selector)
    {
        ret = this->stTC_QueryPromiseSelf_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PARTICULARS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectParticulars.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PARTICULARS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectParticulars.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_ORDER_STATE_INFO_LIST_REQ == selector)
    {
        ret = this->stCT_OrderStateInfoList_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_ORDER_STATE_INFO_LIST_RESP == selector)
    {
        ret = this->stTC_OrderStateInfoList_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_USER_COMPLAINT_REQ == selector)
    {
        ret = this->stCT_UserComplaint_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_USER_COMPLAINT_RESP == selector)
    {
        ret = this->stTC_UserComplaint_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDone.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_DONE == selector)
    {
        ret = this->stTradeRsponseAccessClientOrderDone.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_CLOSEDOWN == selector)
    {
        ret = this->stClientRequestAccessTradeOrderClosedown.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_CLOSEDOWN == selector)
    {
        ret = this->stTradeRsponseAccessClientOrderClosedown.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_AT_ONLINE_USER_COUNT == selector)
    {
        ret = this->stAT_OnlineUserCount_Ntf.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectApplyerUserInfoList.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectApplyerUserInfoList.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_NOTIFY_TRADE_USER_GIS_INFO == selector)
    {
        ret = this->stClientNotifyTradeUserGisInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_CLIENT_USER_GIS_INFO == selector)
    {
        ret = this->stTradeResponseClientUserGisInfoResult.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_HOME_ORDER_INFO_REQ == selector)
    {
        ret = this->stCT_HomeOrderInfo_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_HOME_ORDER_INFO_RESP == selector)
    {
        ret = this->stTC_HomeOrderInfo_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderDetailsInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderDetailsInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_COMPILE_USER_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeCompileUserInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_COMPILE_USER_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientCompileUserInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GLOBAL_USER_INFO_REQ == selector)
    {
        ret = this->stCT_GlobalUserInfoList_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GLOBAL_USER_INFO_RESP == selector)
    {
        ret = this->stTC_GlobalUserInfoList_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_TASK_AWARD == selector)
    {
        ret = this->stClientRequestAccessTradeGetTaskAward.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_GET_TASK_AWARD == selector)
    {
        ret = this->stTradeResponseAccessClientGetTaskAward.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SYSTEM_SEND_MESG == selector)
    {
        ret = this->stCmdSystemSendMesg.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_DISCUSS_DETAIL_REQ == selector)
    {
        ret = this->stCT_QueryDiscussDetail_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_DISCUSS_DETAIL_RESP == selector)
    {
        ret = this->stTC_QueryDiscussDetail_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DELETE_DISCUSS_DETAIL_REQ == selector)
    {
        ret = this->stCT_DeleteDiscuss_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DELETE_DISCUSS_DETAIL_RESP == selector)
    {
        ret = this->stTC_DeleteDiscuss_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DISCUSS_ORDER_REQ == selector)
    {
        ret = this->stCT_DiscussOrder_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DISCUSS_ORDER_RESP == selector)
    {
        ret = this->stTC_DiscussOrder_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_APPLYER == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDoneApplyer.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_APPLYER == selector)
    {
        ret = this->stTradeResponseAccessClientOrderDoneApplyer.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_CREATER == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDoneCreater.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_CREATER == selector)
    {
        ret = this->stTradeResponseAccessClientOrderDoneCreater.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_REPORT_INFO_REQ == selector)
    {
        ret = this->stCT_ReportInfo_Req.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_REPORT_INFO_RESP == selector)
    {
        ret = this->stTC_ReportInfo_Resp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_REQ == selector)
    {
        ret = this->stClientPlayersNearbyReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_RESP == selector)
    {
        ret = this->stClientPlayersNearbyResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_MAKE_REPUTATION == selector)
    {
        ret = this->stClientRequestAccessTradeMakeReputation.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_MAKE_REPUTATION == selector)
    {
        ret = this->stTradeResponseAccessClientMakeReputation.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_REQ == selector)
    {
        ret = this->stClientChatLogonReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_RESP == selector)
    {
        ret = this->stClientChatLogonResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_REQ == selector)
    {
        ret = this->stClientChatSendMsgReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_RESP == selector)
    {
        ret = this->stClientChatSendMsgResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHATSVR_FORWARD_MSG == selector)
    {
        ret = this->stClientChatsvrForwardMsg.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_REQ == selector)
    {
        ret = this->stClientAddFriendReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_RESP == selector)
    {
        ret = this->stClientAddFriendResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_REQ == selector)
    {
        ret = this->stClientDeleteFriendReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_RESP == selector)
    {
        ret = this->stClientDeleteFriendResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_REQ == selector)
    {
        ret = this->stClientJoinGroupReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_RESP == selector)
    {
        ret = this->stClientJoinGroupResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_REQ == selector)
    {
        ret = this->stClientSecedeGroupReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_RESP == selector)
    {
        ret = this->stClientSecedeGroupResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_REQ == selector)
    {
        ret = this->stClientGetThirdPartyPayTokenReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_RESP == selector)
    {
        ret = this->stClientGetThirdPartyPayTokenResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_REQ == selector)
    {
        ret = this->stClientGeneratePayOrderReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_RESP == selector)
    {
        ret = this->stClientGeneratePayOrderResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_NOTIFY_CLIENT_PAY_RESULT == selector)
    {
        ret = this->stTradeNotifyClientPayResult.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_REQ == selector)
    {
        ret = this->stClientExchangeStoneOrCurrencyReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_RESP == selector)
    {
        ret = this->stClientExchangeStoneOrCurrencyResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_REQ == selector)
    {
        ret = this->stClientWithdrawHonestyGoldReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_RESP == selector)
    {
        ret = this->stClientWithdrawHonestyGoldResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPkgBody::pack(int64_t selector, char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(selector, destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}
TdrError::ErrorType
ClientPkgBody::pack_l(int64_t selector, char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(selector, destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkgBody::pack(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer) const
{
    /* adjust cutversion */
    if (0 == cutVer || ClientPkgBody::CURRVERSION < cutVer)
    {
        cutVer = ClientPkgBody::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkgBody::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (CMD_KICKOFF_USER_NOTIFY == selector)
    {
        ret = this->stCmdKickoffUserNotify.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_REQ == selector)
    {
        ret = this->stClientVcCodeReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_RESP == selector)
    {
        ret = this->stClientVcCodeResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_REQ == selector)
    {
        ret = this->stClientRegisterReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_RESP == selector)
    {
        ret = this->stClientRegisterResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_REQ == selector)
    {
        ret = this->stClientNameLogonReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_RESP == selector)
    {
        ret = this->stClientNameLogonResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_REQ == selector)
    {
        ret = this->stClientBaseInfoReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_RESP == selector)
    {
        ret = this->stClientBaseInfoResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_REQ == selector)
    {
        ret = this->stClientUpdateBaseInfoReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_RESP == selector)
    {
        ret = this->stClientUpdateBaseInfoResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_REQ == selector)
    {
        ret = this->stClientBaseInfoListReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_RESP == selector)
    {
        ret = this->stClientBaseInfoListResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_REQ == selector)
    {
        ret = this->stClientUpdateBirthdayReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_RESP == selector)
    {
        ret = this->stClientUpdateBirthdayResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_REQ == selector)
    {
        ret = this->stClientUpdateNickNameReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_RESP == selector)
    {
        ret = this->stClientUpdateNickNameResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_REQ == selector)
    {
        ret = this->stClientUpdateOccupationReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_RESP == selector)
    {
        ret = this->stClientUpdateOccupationResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_REQ == selector)
    {
        ret = this->stClientUpdateResidentionReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_RESP == selector)
    {
        ret = this->stClientUpdateResidentionResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_REQ == selector)
    {
        ret = this->stClientUpdateSignatureReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_RESP == selector)
    {
        ret = this->stClientUpdateSignatureResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_REQ == selector)
    {
        ret = this->stClientUpdatePortraitReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_RESP == selector)
    {
        ret = this->stClientUpdatePortraitResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_REQ == selector)
    {
        ret = this->stClientUpdateGenderReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_RESP == selector)
    {
        ret = this->stClientUpdateGenderResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_REQ == selector)
    {
        ret = this->stClientUserAccountInfoReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_RESP == selector)
    {
        ret = this->stClientUserAccountInfoResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CG_UPDATE_RESIDENTION_DETAIL_REQ == selector)
    {
        ret = this->stCG_UpdateResidentionDetail_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_GC_UPDATE_RESIDENTION_DETAIL_RESP == selector)
    {
        ret = this->stGC_UpdateResidentionDetail_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_REQ == selector)
    {
        ret = this->stClientPhoneQueryUserIdReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_RESP == selector)
    {
        ret = this->stClientPhoneQueryUserIdResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_REQ == selector)
    {
        ret = this->stClientRetrieveCodeReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_RESP == selector)
    {
        ret = this->stClientRetrieveCodeResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_REQ == selector)
    {
        ret = this->stClientValidateRetrieveCodeReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_RESP == selector)
    {
        ret = this->stClientValidateRetrieveCodeResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_REQ == selector)
    {
        ret = this->stClientModifyPasswordReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_RESP == selector)
    {
        ret = this->stClientModifyPasswordResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_REQ == selector)
    {
        ret = this->stClientTokenLoginReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_RESP == selector)
    {
        ret = this->stClientTokenLoginResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_REQ == selector)
    {
        ret = this->stClientAccountInfoListReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_RESP == selector)
    {
        ret = this->stClientAccountInfoListResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_REQ == selector)
    {
        ret = this->stClientAddressPhoneQueryReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_RESP == selector)
    {
        ret = this->stClientAddressPhoneQueryResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_NAME_LOGIN == selector)
    {
        ret = this->stClientRequestAccessNameLogin.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TOKEN_LOGIN == selector)
    {
        ret = this->stClientRequestAccessTokenLogin.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_RESPONSE_CLIENT_NAME_LOGIN == selector)
    {
        ret = this->stAccessResponseClientNameLogin.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_ORDER == selector)
    {
        ret = this->stClientRequestAccessTradeCreateOrder.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_ORDER == selector)
    {
        ret = this->stTradeResponseAccessClientCreateOrder.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderBasicInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderBasicInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderSpecificInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderSpecificInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_APPLY_ORDER == selector)
    {
        ret = this->stClientRequestAccessTradeApplyOrder.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_APPLY_ORDER == selector)
    {
        ret = this->stTradeResponseAccessClientApplyOrder.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYER == selector)
    {
        ret = this->stClientRequestAccessTradeSelectApplyer.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYER == selector)
    {
        ret = this->stTradeResponseAccessClientSelectApplyer.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_REQ == selector)
    {
        ret = this->stClientConfirmOrCancelOrderReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_RESP == selector)
    {
        ret = this->stClientConfirmOrCancelOrderResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_REQ == selector)
    {
        ret = this->stClientCreatedOrderBriefReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_RESP == selector)
    {
        ret = this->stClientCreatedOrderBriefResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_DISCUSS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectDiscuss.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_DISCUSS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectDiscuss.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_DISCUSS == selector)
    {
        ret = this->stClientRequestAccessTradeCreateDiscuss.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_DISCUSS == selector)
    {
        ret = this->stTradeResponseAccessClientCreateDiscuss.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PHOTO_WALL == selector)
    {
        ret = this->stClientRequestAccessTradeSelectPhotoWall.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PHOTO_WALL == selector)
    {
        ret = this->stTradeResponseAccessClientSelectPhotoWall.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_PHOTO_WALL == selector)
    {
        ret = this->stClientRequestAccessTradeUpdatePhotoWall.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_PHOTO_WALL == selector)
    {
        ret = this->stTradeResponseAccessClientUpdatePhotoWall.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_REGISTER_TRADEINFO == selector)
    {
        ret = this->stClientRequestAccessTradeRegisterTradeinfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_REGISTER_TRADEINFO == selector)
    {
        ret = this->stTradeResponseAccessClientRegisterTradeinfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_ARGUE == selector)
    {
        ret = this->stClientRequestAccessTradeUpdateArgue.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_ARGUE == selector)
    {
        ret = this->stTradeResponseAccessClientUpdateArgue.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TRADEUSERINFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectTradeUserInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TRADEUSERINFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectTradeUserInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_SERVICE == selector)
    {
        ret = this->stClientRequestAccessTradeUpdateService.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_SERVICE == selector)
    {
        ret = this->stTradeResponseAccessClientUpdateService.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectGifts.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectGifts.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_PRESENT_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradePresentGifts.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_PRESENT_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientPresentGifts.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_BUY_CAR_REQ == selector)
    {
        ret = this->stCT_BuyCar_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_BUY_CAR_RESP == selector)
    {
        ret = this->stTC_BuyCar_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_OPERATE_CAR_REQ == selector)
    {
        ret = this->stCT_OperateCar_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_OPERATE_CAR_RESP == selector)
    {
        ret = this->stTC_OperateCar_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CT_APPLY_ORDER_BRIEF_REQ == selector)
    {
        ret = this->stClientAppliedOrderBriefReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TC_APPLY_ORDER_BRIEF_RESP == selector)
    {
        ret = this->stClientAppliedOrderBriefResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_GuaranteeFriend_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_GuaranteeFriend_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_CANCEL_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_CancelGuaranteeFriend_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_CANCEL_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_CancelGuaranteeFriend_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_QueryGuaranteeFriend_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_QueryGuaranteeFriend_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TASKINFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectTaskInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TASKINFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectTaskInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELL_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradeSellGifts.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELL_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientSellGifts.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_USERINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectUserInfoList.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_USERINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectUserInfoList.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPLEVEL_VIP == selector)
    {
        ret = this->stClientRequestAccessTradeUpLevelVip.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPLEVEL_VIP == selector)
    {
        ret = this->stTradeResponseAccessClientUpLevelVip.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_CHATROOMINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeGetChatRoomInfoList.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_GET_CHATROOMINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientGetChatRoomInfoList.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectGiftsPagidList.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectGiftsPagidList.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_IDENTITYBANK == selector)
    {
        ret = this->stClientRequestAccessTradeSelectIdentityBank.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_IDENTITYBANK == selector)
    {
        ret = this->stTradeResponseAccessClientSelectIdentityBank.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_VISITORSLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectVisitorsList.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_VISITORSLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectVisitorsList.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_SELF_GUARANTEE_REQ == selector)
    {
        ret = this->stCT_QuerySelfGuarantee_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_SELF_GUARANTEE_RESP == selector)
    {
        ret = this->stTC_QuerySelfGuarantee_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_PROMISE_SELF_REQ == selector)
    {
        ret = this->stCT_QueryPromiseSelf_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_PROMISE_SELF_RESP == selector)
    {
        ret = this->stTC_QueryPromiseSelf_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PARTICULARS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectParticulars.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PARTICULARS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectParticulars.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_ORDER_STATE_INFO_LIST_REQ == selector)
    {
        ret = this->stCT_OrderStateInfoList_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_ORDER_STATE_INFO_LIST_RESP == selector)
    {
        ret = this->stTC_OrderStateInfoList_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_USER_COMPLAINT_REQ == selector)
    {
        ret = this->stCT_UserComplaint_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_USER_COMPLAINT_RESP == selector)
    {
        ret = this->stTC_UserComplaint_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDone.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_DONE == selector)
    {
        ret = this->stTradeRsponseAccessClientOrderDone.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_CLOSEDOWN == selector)
    {
        ret = this->stClientRequestAccessTradeOrderClosedown.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_CLOSEDOWN == selector)
    {
        ret = this->stTradeRsponseAccessClientOrderClosedown.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_AT_ONLINE_USER_COUNT == selector)
    {
        ret = this->stAT_OnlineUserCount_Ntf.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectApplyerUserInfoList.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectApplyerUserInfoList.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_NOTIFY_TRADE_USER_GIS_INFO == selector)
    {
        ret = this->stClientNotifyTradeUserGisInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_CLIENT_USER_GIS_INFO == selector)
    {
        ret = this->stTradeResponseClientUserGisInfoResult.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_HOME_ORDER_INFO_REQ == selector)
    {
        ret = this->stCT_HomeOrderInfo_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_HOME_ORDER_INFO_RESP == selector)
    {
        ret = this->stTC_HomeOrderInfo_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderDetailsInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderDetailsInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_COMPILE_USER_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeCompileUserInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_COMPILE_USER_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientCompileUserInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GLOBAL_USER_INFO_REQ == selector)
    {
        ret = this->stCT_GlobalUserInfoList_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GLOBAL_USER_INFO_RESP == selector)
    {
        ret = this->stTC_GlobalUserInfoList_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_TASK_AWARD == selector)
    {
        ret = this->stClientRequestAccessTradeGetTaskAward.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_GET_TASK_AWARD == selector)
    {
        ret = this->stTradeResponseAccessClientGetTaskAward.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SYSTEM_SEND_MESG == selector)
    {
        ret = this->stCmdSystemSendMesg.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_DISCUSS_DETAIL_REQ == selector)
    {
        ret = this->stCT_QueryDiscussDetail_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_DISCUSS_DETAIL_RESP == selector)
    {
        ret = this->stTC_QueryDiscussDetail_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DELETE_DISCUSS_DETAIL_REQ == selector)
    {
        ret = this->stCT_DeleteDiscuss_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DELETE_DISCUSS_DETAIL_RESP == selector)
    {
        ret = this->stTC_DeleteDiscuss_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DISCUSS_ORDER_REQ == selector)
    {
        ret = this->stCT_DiscussOrder_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DISCUSS_ORDER_RESP == selector)
    {
        ret = this->stTC_DiscussOrder_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_APPLYER == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDoneApplyer.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_APPLYER == selector)
    {
        ret = this->stTradeResponseAccessClientOrderDoneApplyer.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_CREATER == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDoneCreater.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_CREATER == selector)
    {
        ret = this->stTradeResponseAccessClientOrderDoneCreater.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_REPORT_INFO_REQ == selector)
    {
        ret = this->stCT_ReportInfo_Req.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_REPORT_INFO_RESP == selector)
    {
        ret = this->stTC_ReportInfo_Resp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_REQ == selector)
    {
        ret = this->stClientPlayersNearbyReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_RESP == selector)
    {
        ret = this->stClientPlayersNearbyResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_MAKE_REPUTATION == selector)
    {
        ret = this->stClientRequestAccessTradeMakeReputation.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_MAKE_REPUTATION == selector)
    {
        ret = this->stTradeResponseAccessClientMakeReputation.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_REQ == selector)
    {
        ret = this->stClientChatLogonReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_RESP == selector)
    {
        ret = this->stClientChatLogonResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_REQ == selector)
    {
        ret = this->stClientChatSendMsgReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_RESP == selector)
    {
        ret = this->stClientChatSendMsgResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHATSVR_FORWARD_MSG == selector)
    {
        ret = this->stClientChatsvrForwardMsg.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_REQ == selector)
    {
        ret = this->stClientAddFriendReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_RESP == selector)
    {
        ret = this->stClientAddFriendResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_REQ == selector)
    {
        ret = this->stClientDeleteFriendReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_RESP == selector)
    {
        ret = this->stClientDeleteFriendResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_REQ == selector)
    {
        ret = this->stClientJoinGroupReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_RESP == selector)
    {
        ret = this->stClientJoinGroupResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_REQ == selector)
    {
        ret = this->stClientSecedeGroupReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_RESP == selector)
    {
        ret = this->stClientSecedeGroupResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_REQ == selector)
    {
        ret = this->stClientGetThirdPartyPayTokenReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_RESP == selector)
    {
        ret = this->stClientGetThirdPartyPayTokenResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_REQ == selector)
    {
        ret = this->stClientGeneratePayOrderReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_RESP == selector)
    {
        ret = this->stClientGeneratePayOrderResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_NOTIFY_CLIENT_PAY_RESULT == selector)
    {
        ret = this->stTradeNotifyClientPayResult.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_REQ == selector)
    {
        ret = this->stClientExchangeStoneOrCurrencyReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_RESP == selector)
    {
        ret = this->stClientExchangeStoneOrCurrencyResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_REQ == selector)
    {
        ret = this->stClientWithdrawHonestyGoldReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_RESP == selector)
    {
        ret = this->stClientWithdrawHonestyGoldResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}
TdrError::ErrorType
ClientPkgBody::pack_l(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer) const
{
    /* adjust cutversion */
    if (0 == cutVer || ClientPkgBody::CURRVERSION < cutVer)
    {
        cutVer = ClientPkgBody::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkgBody::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (CMD_KICKOFF_USER_NOTIFY == selector)
    {
        ret = this->stCmdKickoffUserNotify.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_REQ == selector)
    {
        ret = this->stClientVcCodeReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_RESP == selector)
    {
        ret = this->stClientVcCodeResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_REQ == selector)
    {
        ret = this->stClientRegisterReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_RESP == selector)
    {
        ret = this->stClientRegisterResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_REQ == selector)
    {
        ret = this->stClientNameLogonReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_RESP == selector)
    {
        ret = this->stClientNameLogonResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_REQ == selector)
    {
        ret = this->stClientBaseInfoReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_RESP == selector)
    {
        ret = this->stClientBaseInfoResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_REQ == selector)
    {
        ret = this->stClientUpdateBaseInfoReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_RESP == selector)
    {
        ret = this->stClientUpdateBaseInfoResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_REQ == selector)
    {
        ret = this->stClientBaseInfoListReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_RESP == selector)
    {
        ret = this->stClientBaseInfoListResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_REQ == selector)
    {
        ret = this->stClientUpdateBirthdayReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_RESP == selector)
    {
        ret = this->stClientUpdateBirthdayResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_REQ == selector)
    {
        ret = this->stClientUpdateNickNameReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_RESP == selector)
    {
        ret = this->stClientUpdateNickNameResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_REQ == selector)
    {
        ret = this->stClientUpdateOccupationReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_RESP == selector)
    {
        ret = this->stClientUpdateOccupationResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_REQ == selector)
    {
        ret = this->stClientUpdateResidentionReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_RESP == selector)
    {
        ret = this->stClientUpdateResidentionResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_REQ == selector)
    {
        ret = this->stClientUpdateSignatureReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_RESP == selector)
    {
        ret = this->stClientUpdateSignatureResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_REQ == selector)
    {
        ret = this->stClientUpdatePortraitReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_RESP == selector)
    {
        ret = this->stClientUpdatePortraitResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_REQ == selector)
    {
        ret = this->stClientUpdateGenderReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_RESP == selector)
    {
        ret = this->stClientUpdateGenderResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_REQ == selector)
    {
        ret = this->stClientUserAccountInfoReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_RESP == selector)
    {
        ret = this->stClientUserAccountInfoResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CG_UPDATE_RESIDENTION_DETAIL_REQ == selector)
    {
        ret = this->stCG_UpdateResidentionDetail_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_GC_UPDATE_RESIDENTION_DETAIL_RESP == selector)
    {
        ret = this->stGC_UpdateResidentionDetail_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_REQ == selector)
    {
        ret = this->stClientPhoneQueryUserIdReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_RESP == selector)
    {
        ret = this->stClientPhoneQueryUserIdResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_REQ == selector)
    {
        ret = this->stClientRetrieveCodeReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_RESP == selector)
    {
        ret = this->stClientRetrieveCodeResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_REQ == selector)
    {
        ret = this->stClientValidateRetrieveCodeReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_RESP == selector)
    {
        ret = this->stClientValidateRetrieveCodeResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_REQ == selector)
    {
        ret = this->stClientModifyPasswordReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_RESP == selector)
    {
        ret = this->stClientModifyPasswordResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_REQ == selector)
    {
        ret = this->stClientTokenLoginReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_RESP == selector)
    {
        ret = this->stClientTokenLoginResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_REQ == selector)
    {
        ret = this->stClientAccountInfoListReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_RESP == selector)
    {
        ret = this->stClientAccountInfoListResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_REQ == selector)
    {
        ret = this->stClientAddressPhoneQueryReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_RESP == selector)
    {
        ret = this->stClientAddressPhoneQueryResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_NAME_LOGIN == selector)
    {
        ret = this->stClientRequestAccessNameLogin.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TOKEN_LOGIN == selector)
    {
        ret = this->stClientRequestAccessTokenLogin.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_RESPONSE_CLIENT_NAME_LOGIN == selector)
    {
        ret = this->stAccessResponseClientNameLogin.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_ORDER == selector)
    {
        ret = this->stClientRequestAccessTradeCreateOrder.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_ORDER == selector)
    {
        ret = this->stTradeResponseAccessClientCreateOrder.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderBasicInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderBasicInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderSpecificInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderSpecificInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_APPLY_ORDER == selector)
    {
        ret = this->stClientRequestAccessTradeApplyOrder.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_APPLY_ORDER == selector)
    {
        ret = this->stTradeResponseAccessClientApplyOrder.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYER == selector)
    {
        ret = this->stClientRequestAccessTradeSelectApplyer.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYER == selector)
    {
        ret = this->stTradeResponseAccessClientSelectApplyer.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_REQ == selector)
    {
        ret = this->stClientConfirmOrCancelOrderReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_RESP == selector)
    {
        ret = this->stClientConfirmOrCancelOrderResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_REQ == selector)
    {
        ret = this->stClientCreatedOrderBriefReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_RESP == selector)
    {
        ret = this->stClientCreatedOrderBriefResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_DISCUSS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectDiscuss.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_DISCUSS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectDiscuss.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_DISCUSS == selector)
    {
        ret = this->stClientRequestAccessTradeCreateDiscuss.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_DISCUSS == selector)
    {
        ret = this->stTradeResponseAccessClientCreateDiscuss.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PHOTO_WALL == selector)
    {
        ret = this->stClientRequestAccessTradeSelectPhotoWall.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PHOTO_WALL == selector)
    {
        ret = this->stTradeResponseAccessClientSelectPhotoWall.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_PHOTO_WALL == selector)
    {
        ret = this->stClientRequestAccessTradeUpdatePhotoWall.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_PHOTO_WALL == selector)
    {
        ret = this->stTradeResponseAccessClientUpdatePhotoWall.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_REGISTER_TRADEINFO == selector)
    {
        ret = this->stClientRequestAccessTradeRegisterTradeinfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_REGISTER_TRADEINFO == selector)
    {
        ret = this->stTradeResponseAccessClientRegisterTradeinfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_ARGUE == selector)
    {
        ret = this->stClientRequestAccessTradeUpdateArgue.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_ARGUE == selector)
    {
        ret = this->stTradeResponseAccessClientUpdateArgue.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TRADEUSERINFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectTradeUserInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TRADEUSERINFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectTradeUserInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_SERVICE == selector)
    {
        ret = this->stClientRequestAccessTradeUpdateService.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_SERVICE == selector)
    {
        ret = this->stTradeResponseAccessClientUpdateService.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectGifts.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectGifts.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_PRESENT_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradePresentGifts.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_PRESENT_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientPresentGifts.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_BUY_CAR_REQ == selector)
    {
        ret = this->stCT_BuyCar_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_BUY_CAR_RESP == selector)
    {
        ret = this->stTC_BuyCar_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_OPERATE_CAR_REQ == selector)
    {
        ret = this->stCT_OperateCar_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_OPERATE_CAR_RESP == selector)
    {
        ret = this->stTC_OperateCar_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CT_APPLY_ORDER_BRIEF_REQ == selector)
    {
        ret = this->stClientAppliedOrderBriefReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TC_APPLY_ORDER_BRIEF_RESP == selector)
    {
        ret = this->stClientAppliedOrderBriefResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_GuaranteeFriend_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_GuaranteeFriend_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_CANCEL_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_CancelGuaranteeFriend_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_CANCEL_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_CancelGuaranteeFriend_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_QueryGuaranteeFriend_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_QueryGuaranteeFriend_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TASKINFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectTaskInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TASKINFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectTaskInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELL_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradeSellGifts.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELL_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientSellGifts.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_USERINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectUserInfoList.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_USERINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectUserInfoList.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPLEVEL_VIP == selector)
    {
        ret = this->stClientRequestAccessTradeUpLevelVip.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPLEVEL_VIP == selector)
    {
        ret = this->stTradeResponseAccessClientUpLevelVip.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_CHATROOMINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeGetChatRoomInfoList.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_GET_CHATROOMINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientGetChatRoomInfoList.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectGiftsPagidList.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectGiftsPagidList.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_IDENTITYBANK == selector)
    {
        ret = this->stClientRequestAccessTradeSelectIdentityBank.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_IDENTITYBANK == selector)
    {
        ret = this->stTradeResponseAccessClientSelectIdentityBank.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_VISITORSLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectVisitorsList.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_VISITORSLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectVisitorsList.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_SELF_GUARANTEE_REQ == selector)
    {
        ret = this->stCT_QuerySelfGuarantee_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_SELF_GUARANTEE_RESP == selector)
    {
        ret = this->stTC_QuerySelfGuarantee_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_PROMISE_SELF_REQ == selector)
    {
        ret = this->stCT_QueryPromiseSelf_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_PROMISE_SELF_RESP == selector)
    {
        ret = this->stTC_QueryPromiseSelf_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PARTICULARS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectParticulars.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PARTICULARS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectParticulars.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_ORDER_STATE_INFO_LIST_REQ == selector)
    {
        ret = this->stCT_OrderStateInfoList_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_ORDER_STATE_INFO_LIST_RESP == selector)
    {
        ret = this->stTC_OrderStateInfoList_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_USER_COMPLAINT_REQ == selector)
    {
        ret = this->stCT_UserComplaint_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_USER_COMPLAINT_RESP == selector)
    {
        ret = this->stTC_UserComplaint_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDone.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_DONE == selector)
    {
        ret = this->stTradeRsponseAccessClientOrderDone.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_CLOSEDOWN == selector)
    {
        ret = this->stClientRequestAccessTradeOrderClosedown.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_CLOSEDOWN == selector)
    {
        ret = this->stTradeRsponseAccessClientOrderClosedown.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_AT_ONLINE_USER_COUNT == selector)
    {
        ret = this->stAT_OnlineUserCount_Ntf.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectApplyerUserInfoList.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectApplyerUserInfoList.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_NOTIFY_TRADE_USER_GIS_INFO == selector)
    {
        ret = this->stClientNotifyTradeUserGisInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_CLIENT_USER_GIS_INFO == selector)
    {
        ret = this->stTradeResponseClientUserGisInfoResult.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_HOME_ORDER_INFO_REQ == selector)
    {
        ret = this->stCT_HomeOrderInfo_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_HOME_ORDER_INFO_RESP == selector)
    {
        ret = this->stTC_HomeOrderInfo_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderDetailsInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderDetailsInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_COMPILE_USER_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeCompileUserInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_COMPILE_USER_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientCompileUserInfo.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GLOBAL_USER_INFO_REQ == selector)
    {
        ret = this->stCT_GlobalUserInfoList_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GLOBAL_USER_INFO_RESP == selector)
    {
        ret = this->stTC_GlobalUserInfoList_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_TASK_AWARD == selector)
    {
        ret = this->stClientRequestAccessTradeGetTaskAward.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_GET_TASK_AWARD == selector)
    {
        ret = this->stTradeResponseAccessClientGetTaskAward.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SYSTEM_SEND_MESG == selector)
    {
        ret = this->stCmdSystemSendMesg.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_DISCUSS_DETAIL_REQ == selector)
    {
        ret = this->stCT_QueryDiscussDetail_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_DISCUSS_DETAIL_RESP == selector)
    {
        ret = this->stTC_QueryDiscussDetail_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DELETE_DISCUSS_DETAIL_REQ == selector)
    {
        ret = this->stCT_DeleteDiscuss_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DELETE_DISCUSS_DETAIL_RESP == selector)
    {
        ret = this->stTC_DeleteDiscuss_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DISCUSS_ORDER_REQ == selector)
    {
        ret = this->stCT_DiscussOrder_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DISCUSS_ORDER_RESP == selector)
    {
        ret = this->stTC_DiscussOrder_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_APPLYER == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDoneApplyer.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_APPLYER == selector)
    {
        ret = this->stTradeResponseAccessClientOrderDoneApplyer.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_CREATER == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDoneCreater.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_CREATER == selector)
    {
        ret = this->stTradeResponseAccessClientOrderDoneCreater.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_REPORT_INFO_REQ == selector)
    {
        ret = this->stCT_ReportInfo_Req.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_REPORT_INFO_RESP == selector)
    {
        ret = this->stTC_ReportInfo_Resp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_REQ == selector)
    {
        ret = this->stClientPlayersNearbyReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_RESP == selector)
    {
        ret = this->stClientPlayersNearbyResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_MAKE_REPUTATION == selector)
    {
        ret = this->stClientRequestAccessTradeMakeReputation.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_MAKE_REPUTATION == selector)
    {
        ret = this->stTradeResponseAccessClientMakeReputation.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_REQ == selector)
    {
        ret = this->stClientChatLogonReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_RESP == selector)
    {
        ret = this->stClientChatLogonResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_REQ == selector)
    {
        ret = this->stClientChatSendMsgReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_RESP == selector)
    {
        ret = this->stClientChatSendMsgResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHATSVR_FORWARD_MSG == selector)
    {
        ret = this->stClientChatsvrForwardMsg.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_REQ == selector)
    {
        ret = this->stClientAddFriendReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_RESP == selector)
    {
        ret = this->stClientAddFriendResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_REQ == selector)
    {
        ret = this->stClientDeleteFriendReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_RESP == selector)
    {
        ret = this->stClientDeleteFriendResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_REQ == selector)
    {
        ret = this->stClientJoinGroupReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_RESP == selector)
    {
        ret = this->stClientJoinGroupResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_REQ == selector)
    {
        ret = this->stClientSecedeGroupReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_RESP == selector)
    {
        ret = this->stClientSecedeGroupResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_REQ == selector)
    {
        ret = this->stClientGetThirdPartyPayTokenReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_RESP == selector)
    {
        ret = this->stClientGetThirdPartyPayTokenResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_REQ == selector)
    {
        ret = this->stClientGeneratePayOrderReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_RESP == selector)
    {
        ret = this->stClientGeneratePayOrderResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_NOTIFY_CLIENT_PAY_RESULT == selector)
    {
        ret = this->stTradeNotifyClientPayResult.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_REQ == selector)
    {
        ret = this->stClientExchangeStoneOrCurrencyReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_RESP == selector)
    {
        ret = this->stClientExchangeStoneOrCurrencyResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_REQ == selector)
    {
        ret = this->stClientWithdrawHonestyGoldReq.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_RESP == selector)
    {
        ret = this->stClientWithdrawHonestyGoldResp.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPkgBody::unpack(int64_t selector, const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(selector, srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}
TdrError::ErrorType
ClientPkgBody::unpack_l(int64_t selector, const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(selector, srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkgBody::unpack(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer)
{
    /* adjust cutversion */
    if (0 == cutVer || ClientPkgBody::CURRVERSION < cutVer)
    {
        cutVer = ClientPkgBody::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkgBody::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (CMD_KICKOFF_USER_NOTIFY == selector)
    {
        ret = this->stCmdKickoffUserNotify.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_REQ == selector)
    {
        ret = this->stClientVcCodeReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_RESP == selector)
    {
        ret = this->stClientVcCodeResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_REQ == selector)
    {
        ret = this->stClientRegisterReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_RESP == selector)
    {
        ret = this->stClientRegisterResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_REQ == selector)
    {
        ret = this->stClientNameLogonReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_RESP == selector)
    {
        ret = this->stClientNameLogonResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_REQ == selector)
    {
        ret = this->stClientBaseInfoReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_RESP == selector)
    {
        ret = this->stClientBaseInfoResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_REQ == selector)
    {
        ret = this->stClientUpdateBaseInfoReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_RESP == selector)
    {
        ret = this->stClientUpdateBaseInfoResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_REQ == selector)
    {
        ret = this->stClientBaseInfoListReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_RESP == selector)
    {
        ret = this->stClientBaseInfoListResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_REQ == selector)
    {
        ret = this->stClientUpdateBirthdayReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_RESP == selector)
    {
        ret = this->stClientUpdateBirthdayResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_REQ == selector)
    {
        ret = this->stClientUpdateNickNameReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_RESP == selector)
    {
        ret = this->stClientUpdateNickNameResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_REQ == selector)
    {
        ret = this->stClientUpdateOccupationReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_RESP == selector)
    {
        ret = this->stClientUpdateOccupationResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_REQ == selector)
    {
        ret = this->stClientUpdateResidentionReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_RESP == selector)
    {
        ret = this->stClientUpdateResidentionResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_REQ == selector)
    {
        ret = this->stClientUpdateSignatureReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_RESP == selector)
    {
        ret = this->stClientUpdateSignatureResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_REQ == selector)
    {
        ret = this->stClientUpdatePortraitReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_RESP == selector)
    {
        ret = this->stClientUpdatePortraitResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_REQ == selector)
    {
        ret = this->stClientUpdateGenderReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_RESP == selector)
    {
        ret = this->stClientUpdateGenderResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_REQ == selector)
    {
        ret = this->stClientUserAccountInfoReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_RESP == selector)
    {
        ret = this->stClientUserAccountInfoResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CG_UPDATE_RESIDENTION_DETAIL_REQ == selector)
    {
        ret = this->stCG_UpdateResidentionDetail_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_GC_UPDATE_RESIDENTION_DETAIL_RESP == selector)
    {
        ret = this->stGC_UpdateResidentionDetail_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_REQ == selector)
    {
        ret = this->stClientPhoneQueryUserIdReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_RESP == selector)
    {
        ret = this->stClientPhoneQueryUserIdResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_REQ == selector)
    {
        ret = this->stClientRetrieveCodeReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_RESP == selector)
    {
        ret = this->stClientRetrieveCodeResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_REQ == selector)
    {
        ret = this->stClientValidateRetrieveCodeReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_RESP == selector)
    {
        ret = this->stClientValidateRetrieveCodeResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_REQ == selector)
    {
        ret = this->stClientModifyPasswordReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_RESP == selector)
    {
        ret = this->stClientModifyPasswordResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_REQ == selector)
    {
        ret = this->stClientTokenLoginReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_RESP == selector)
    {
        ret = this->stClientTokenLoginResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_REQ == selector)
    {
        ret = this->stClientAccountInfoListReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_RESP == selector)
    {
        ret = this->stClientAccountInfoListResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_REQ == selector)
    {
        ret = this->stClientAddressPhoneQueryReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_RESP == selector)
    {
        ret = this->stClientAddressPhoneQueryResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_NAME_LOGIN == selector)
    {
        ret = this->stClientRequestAccessNameLogin.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TOKEN_LOGIN == selector)
    {
        ret = this->stClientRequestAccessTokenLogin.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_RESPONSE_CLIENT_NAME_LOGIN == selector)
    {
        ret = this->stAccessResponseClientNameLogin.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_ORDER == selector)
    {
        ret = this->stClientRequestAccessTradeCreateOrder.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_ORDER == selector)
    {
        ret = this->stTradeResponseAccessClientCreateOrder.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderBasicInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderBasicInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderSpecificInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderSpecificInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_APPLY_ORDER == selector)
    {
        ret = this->stClientRequestAccessTradeApplyOrder.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_APPLY_ORDER == selector)
    {
        ret = this->stTradeResponseAccessClientApplyOrder.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYER == selector)
    {
        ret = this->stClientRequestAccessTradeSelectApplyer.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYER == selector)
    {
        ret = this->stTradeResponseAccessClientSelectApplyer.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_REQ == selector)
    {
        ret = this->stClientConfirmOrCancelOrderReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_RESP == selector)
    {
        ret = this->stClientConfirmOrCancelOrderResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_REQ == selector)
    {
        ret = this->stClientCreatedOrderBriefReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_RESP == selector)
    {
        ret = this->stClientCreatedOrderBriefResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_DISCUSS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectDiscuss.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_DISCUSS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectDiscuss.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_DISCUSS == selector)
    {
        ret = this->stClientRequestAccessTradeCreateDiscuss.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_DISCUSS == selector)
    {
        ret = this->stTradeResponseAccessClientCreateDiscuss.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PHOTO_WALL == selector)
    {
        ret = this->stClientRequestAccessTradeSelectPhotoWall.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PHOTO_WALL == selector)
    {
        ret = this->stTradeResponseAccessClientSelectPhotoWall.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_PHOTO_WALL == selector)
    {
        ret = this->stClientRequestAccessTradeUpdatePhotoWall.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_PHOTO_WALL == selector)
    {
        ret = this->stTradeResponseAccessClientUpdatePhotoWall.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_REGISTER_TRADEINFO == selector)
    {
        ret = this->stClientRequestAccessTradeRegisterTradeinfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_REGISTER_TRADEINFO == selector)
    {
        ret = this->stTradeResponseAccessClientRegisterTradeinfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_ARGUE == selector)
    {
        ret = this->stClientRequestAccessTradeUpdateArgue.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_ARGUE == selector)
    {
        ret = this->stTradeResponseAccessClientUpdateArgue.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TRADEUSERINFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectTradeUserInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TRADEUSERINFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectTradeUserInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_SERVICE == selector)
    {
        ret = this->stClientRequestAccessTradeUpdateService.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_SERVICE == selector)
    {
        ret = this->stTradeResponseAccessClientUpdateService.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectGifts.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectGifts.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_PRESENT_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradePresentGifts.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_PRESENT_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientPresentGifts.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_BUY_CAR_REQ == selector)
    {
        ret = this->stCT_BuyCar_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_BUY_CAR_RESP == selector)
    {
        ret = this->stTC_BuyCar_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_OPERATE_CAR_REQ == selector)
    {
        ret = this->stCT_OperateCar_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_OPERATE_CAR_RESP == selector)
    {
        ret = this->stTC_OperateCar_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CT_APPLY_ORDER_BRIEF_REQ == selector)
    {
        ret = this->stClientAppliedOrderBriefReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TC_APPLY_ORDER_BRIEF_RESP == selector)
    {
        ret = this->stClientAppliedOrderBriefResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_GuaranteeFriend_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_GuaranteeFriend_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_CANCEL_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_CancelGuaranteeFriend_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_CANCEL_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_CancelGuaranteeFriend_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_QueryGuaranteeFriend_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_QueryGuaranteeFriend_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TASKINFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectTaskInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TASKINFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectTaskInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELL_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradeSellGifts.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELL_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientSellGifts.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_USERINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectUserInfoList.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_USERINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectUserInfoList.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPLEVEL_VIP == selector)
    {
        ret = this->stClientRequestAccessTradeUpLevelVip.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPLEVEL_VIP == selector)
    {
        ret = this->stTradeResponseAccessClientUpLevelVip.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_CHATROOMINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeGetChatRoomInfoList.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_GET_CHATROOMINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientGetChatRoomInfoList.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectGiftsPagidList.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectGiftsPagidList.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_IDENTITYBANK == selector)
    {
        ret = this->stClientRequestAccessTradeSelectIdentityBank.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_IDENTITYBANK == selector)
    {
        ret = this->stTradeResponseAccessClientSelectIdentityBank.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_VISITORSLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectVisitorsList.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_VISITORSLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectVisitorsList.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_SELF_GUARANTEE_REQ == selector)
    {
        ret = this->stCT_QuerySelfGuarantee_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_SELF_GUARANTEE_RESP == selector)
    {
        ret = this->stTC_QuerySelfGuarantee_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_PROMISE_SELF_REQ == selector)
    {
        ret = this->stCT_QueryPromiseSelf_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_PROMISE_SELF_RESP == selector)
    {
        ret = this->stTC_QueryPromiseSelf_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PARTICULARS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectParticulars.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PARTICULARS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectParticulars.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_ORDER_STATE_INFO_LIST_REQ == selector)
    {
        ret = this->stCT_OrderStateInfoList_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_ORDER_STATE_INFO_LIST_RESP == selector)
    {
        ret = this->stTC_OrderStateInfoList_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_USER_COMPLAINT_REQ == selector)
    {
        ret = this->stCT_UserComplaint_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_USER_COMPLAINT_RESP == selector)
    {
        ret = this->stTC_UserComplaint_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDone.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_DONE == selector)
    {
        ret = this->stTradeRsponseAccessClientOrderDone.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_CLOSEDOWN == selector)
    {
        ret = this->stClientRequestAccessTradeOrderClosedown.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_CLOSEDOWN == selector)
    {
        ret = this->stTradeRsponseAccessClientOrderClosedown.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_AT_ONLINE_USER_COUNT == selector)
    {
        ret = this->stAT_OnlineUserCount_Ntf.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectApplyerUserInfoList.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectApplyerUserInfoList.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_NOTIFY_TRADE_USER_GIS_INFO == selector)
    {
        ret = this->stClientNotifyTradeUserGisInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_CLIENT_USER_GIS_INFO == selector)
    {
        ret = this->stTradeResponseClientUserGisInfoResult.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_HOME_ORDER_INFO_REQ == selector)
    {
        ret = this->stCT_HomeOrderInfo_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_HOME_ORDER_INFO_RESP == selector)
    {
        ret = this->stTC_HomeOrderInfo_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderDetailsInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderDetailsInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_COMPILE_USER_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeCompileUserInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_COMPILE_USER_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientCompileUserInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GLOBAL_USER_INFO_REQ == selector)
    {
        ret = this->stCT_GlobalUserInfoList_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GLOBAL_USER_INFO_RESP == selector)
    {
        ret = this->stTC_GlobalUserInfoList_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_TASK_AWARD == selector)
    {
        ret = this->stClientRequestAccessTradeGetTaskAward.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_GET_TASK_AWARD == selector)
    {
        ret = this->stTradeResponseAccessClientGetTaskAward.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SYSTEM_SEND_MESG == selector)
    {
        ret = this->stCmdSystemSendMesg.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_DISCUSS_DETAIL_REQ == selector)
    {
        ret = this->stCT_QueryDiscussDetail_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_DISCUSS_DETAIL_RESP == selector)
    {
        ret = this->stTC_QueryDiscussDetail_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DELETE_DISCUSS_DETAIL_REQ == selector)
    {
        ret = this->stCT_DeleteDiscuss_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DELETE_DISCUSS_DETAIL_RESP == selector)
    {
        ret = this->stTC_DeleteDiscuss_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DISCUSS_ORDER_REQ == selector)
    {
        ret = this->stCT_DiscussOrder_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DISCUSS_ORDER_RESP == selector)
    {
        ret = this->stTC_DiscussOrder_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_APPLYER == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDoneApplyer.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_APPLYER == selector)
    {
        ret = this->stTradeResponseAccessClientOrderDoneApplyer.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_CREATER == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDoneCreater.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_CREATER == selector)
    {
        ret = this->stTradeResponseAccessClientOrderDoneCreater.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_REPORT_INFO_REQ == selector)
    {
        ret = this->stCT_ReportInfo_Req.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_REPORT_INFO_RESP == selector)
    {
        ret = this->stTC_ReportInfo_Resp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_REQ == selector)
    {
        ret = this->stClientPlayersNearbyReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_RESP == selector)
    {
        ret = this->stClientPlayersNearbyResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_MAKE_REPUTATION == selector)
    {
        ret = this->stClientRequestAccessTradeMakeReputation.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_MAKE_REPUTATION == selector)
    {
        ret = this->stTradeResponseAccessClientMakeReputation.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_REQ == selector)
    {
        ret = this->stClientChatLogonReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_RESP == selector)
    {
        ret = this->stClientChatLogonResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_REQ == selector)
    {
        ret = this->stClientChatSendMsgReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_RESP == selector)
    {
        ret = this->stClientChatSendMsgResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHATSVR_FORWARD_MSG == selector)
    {
        ret = this->stClientChatsvrForwardMsg.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_REQ == selector)
    {
        ret = this->stClientAddFriendReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_RESP == selector)
    {
        ret = this->stClientAddFriendResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_REQ == selector)
    {
        ret = this->stClientDeleteFriendReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_RESP == selector)
    {
        ret = this->stClientDeleteFriendResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_REQ == selector)
    {
        ret = this->stClientJoinGroupReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_RESP == selector)
    {
        ret = this->stClientJoinGroupResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_REQ == selector)
    {
        ret = this->stClientSecedeGroupReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_RESP == selector)
    {
        ret = this->stClientSecedeGroupResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_REQ == selector)
    {
        ret = this->stClientGetThirdPartyPayTokenReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_RESP == selector)
    {
        ret = this->stClientGetThirdPartyPayTokenResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_REQ == selector)
    {
        ret = this->stClientGeneratePayOrderReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_RESP == selector)
    {
        ret = this->stClientGeneratePayOrderResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_NOTIFY_CLIENT_PAY_RESULT == selector)
    {
        ret = this->stTradeNotifyClientPayResult.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_REQ == selector)
    {
        ret = this->stClientExchangeStoneOrCurrencyReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_RESP == selector)
    {
        ret = this->stClientExchangeStoneOrCurrencyResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_REQ == selector)
    {
        ret = this->stClientWithdrawHonestyGoldReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_RESP == selector)
    {
        ret = this->stClientWithdrawHonestyGoldResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}
TdrError::ErrorType
ClientPkgBody::unpack_l(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer)
{
    /* adjust cutversion */
    if (0 == cutVer || ClientPkgBody::CURRVERSION < cutVer)
    {
        cutVer = ClientPkgBody::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkgBody::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (CMD_KICKOFF_USER_NOTIFY == selector)
    {
        ret = this->stCmdKickoffUserNotify.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_REQ == selector)
    {
        ret = this->stClientVcCodeReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_RESP == selector)
    {
        ret = this->stClientVcCodeResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_REQ == selector)
    {
        ret = this->stClientRegisterReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_RESP == selector)
    {
        ret = this->stClientRegisterResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_REQ == selector)
    {
        ret = this->stClientNameLogonReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_RESP == selector)
    {
        ret = this->stClientNameLogonResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_REQ == selector)
    {
        ret = this->stClientBaseInfoReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_RESP == selector)
    {
        ret = this->stClientBaseInfoResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_REQ == selector)
    {
        ret = this->stClientUpdateBaseInfoReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_RESP == selector)
    {
        ret = this->stClientUpdateBaseInfoResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_REQ == selector)
    {
        ret = this->stClientBaseInfoListReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_RESP == selector)
    {
        ret = this->stClientBaseInfoListResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_REQ == selector)
    {
        ret = this->stClientUpdateBirthdayReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_RESP == selector)
    {
        ret = this->stClientUpdateBirthdayResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_REQ == selector)
    {
        ret = this->stClientUpdateNickNameReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_RESP == selector)
    {
        ret = this->stClientUpdateNickNameResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_REQ == selector)
    {
        ret = this->stClientUpdateOccupationReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_RESP == selector)
    {
        ret = this->stClientUpdateOccupationResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_REQ == selector)
    {
        ret = this->stClientUpdateResidentionReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_RESP == selector)
    {
        ret = this->stClientUpdateResidentionResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_REQ == selector)
    {
        ret = this->stClientUpdateSignatureReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_RESP == selector)
    {
        ret = this->stClientUpdateSignatureResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_REQ == selector)
    {
        ret = this->stClientUpdatePortraitReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_RESP == selector)
    {
        ret = this->stClientUpdatePortraitResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_REQ == selector)
    {
        ret = this->stClientUpdateGenderReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_RESP == selector)
    {
        ret = this->stClientUpdateGenderResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_REQ == selector)
    {
        ret = this->stClientUserAccountInfoReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_RESP == selector)
    {
        ret = this->stClientUserAccountInfoResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CG_UPDATE_RESIDENTION_DETAIL_REQ == selector)
    {
        ret = this->stCG_UpdateResidentionDetail_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_GC_UPDATE_RESIDENTION_DETAIL_RESP == selector)
    {
        ret = this->stGC_UpdateResidentionDetail_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_REQ == selector)
    {
        ret = this->stClientPhoneQueryUserIdReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_RESP == selector)
    {
        ret = this->stClientPhoneQueryUserIdResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_REQ == selector)
    {
        ret = this->stClientRetrieveCodeReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_RESP == selector)
    {
        ret = this->stClientRetrieveCodeResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_REQ == selector)
    {
        ret = this->stClientValidateRetrieveCodeReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_RESP == selector)
    {
        ret = this->stClientValidateRetrieveCodeResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_REQ == selector)
    {
        ret = this->stClientModifyPasswordReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_RESP == selector)
    {
        ret = this->stClientModifyPasswordResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_REQ == selector)
    {
        ret = this->stClientTokenLoginReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_RESP == selector)
    {
        ret = this->stClientTokenLoginResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_REQ == selector)
    {
        ret = this->stClientAccountInfoListReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_RESP == selector)
    {
        ret = this->stClientAccountInfoListResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_REQ == selector)
    {
        ret = this->stClientAddressPhoneQueryReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_RESP == selector)
    {
        ret = this->stClientAddressPhoneQueryResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_NAME_LOGIN == selector)
    {
        ret = this->stClientRequestAccessNameLogin.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TOKEN_LOGIN == selector)
    {
        ret = this->stClientRequestAccessTokenLogin.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_RESPONSE_CLIENT_NAME_LOGIN == selector)
    {
        ret = this->stAccessResponseClientNameLogin.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_ORDER == selector)
    {
        ret = this->stClientRequestAccessTradeCreateOrder.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_ORDER == selector)
    {
        ret = this->stTradeResponseAccessClientCreateOrder.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderBasicInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderBasicInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderSpecificInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderSpecificInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_APPLY_ORDER == selector)
    {
        ret = this->stClientRequestAccessTradeApplyOrder.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_APPLY_ORDER == selector)
    {
        ret = this->stTradeResponseAccessClientApplyOrder.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYER == selector)
    {
        ret = this->stClientRequestAccessTradeSelectApplyer.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYER == selector)
    {
        ret = this->stTradeResponseAccessClientSelectApplyer.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_REQ == selector)
    {
        ret = this->stClientConfirmOrCancelOrderReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_RESP == selector)
    {
        ret = this->stClientConfirmOrCancelOrderResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_REQ == selector)
    {
        ret = this->stClientCreatedOrderBriefReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_RESP == selector)
    {
        ret = this->stClientCreatedOrderBriefResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_DISCUSS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectDiscuss.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_DISCUSS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectDiscuss.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_DISCUSS == selector)
    {
        ret = this->stClientRequestAccessTradeCreateDiscuss.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_DISCUSS == selector)
    {
        ret = this->stTradeResponseAccessClientCreateDiscuss.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PHOTO_WALL == selector)
    {
        ret = this->stClientRequestAccessTradeSelectPhotoWall.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PHOTO_WALL == selector)
    {
        ret = this->stTradeResponseAccessClientSelectPhotoWall.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_PHOTO_WALL == selector)
    {
        ret = this->stClientRequestAccessTradeUpdatePhotoWall.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_PHOTO_WALL == selector)
    {
        ret = this->stTradeResponseAccessClientUpdatePhotoWall.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_REGISTER_TRADEINFO == selector)
    {
        ret = this->stClientRequestAccessTradeRegisterTradeinfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_REGISTER_TRADEINFO == selector)
    {
        ret = this->stTradeResponseAccessClientRegisterTradeinfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_ARGUE == selector)
    {
        ret = this->stClientRequestAccessTradeUpdateArgue.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_ARGUE == selector)
    {
        ret = this->stTradeResponseAccessClientUpdateArgue.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TRADEUSERINFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectTradeUserInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TRADEUSERINFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectTradeUserInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_SERVICE == selector)
    {
        ret = this->stClientRequestAccessTradeUpdateService.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_SERVICE == selector)
    {
        ret = this->stTradeResponseAccessClientUpdateService.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectGifts.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectGifts.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_PRESENT_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradePresentGifts.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_PRESENT_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientPresentGifts.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_BUY_CAR_REQ == selector)
    {
        ret = this->stCT_BuyCar_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_BUY_CAR_RESP == selector)
    {
        ret = this->stTC_BuyCar_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_OPERATE_CAR_REQ == selector)
    {
        ret = this->stCT_OperateCar_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_OPERATE_CAR_RESP == selector)
    {
        ret = this->stTC_OperateCar_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CT_APPLY_ORDER_BRIEF_REQ == selector)
    {
        ret = this->stClientAppliedOrderBriefReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TC_APPLY_ORDER_BRIEF_RESP == selector)
    {
        ret = this->stClientAppliedOrderBriefResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_GuaranteeFriend_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_GuaranteeFriend_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_CANCEL_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_CancelGuaranteeFriend_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_CANCEL_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_CancelGuaranteeFriend_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = this->stCT_QueryGuaranteeFriend_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = this->stTC_QueryGuaranteeFriend_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TASKINFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectTaskInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TASKINFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectTaskInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELL_GIFTS == selector)
    {
        ret = this->stClientRequestAccessTradeSellGifts.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELL_GIFTS == selector)
    {
        ret = this->stTradeResponseAccessClientSellGifts.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_USERINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectUserInfoList.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_USERINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectUserInfoList.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPLEVEL_VIP == selector)
    {
        ret = this->stClientRequestAccessTradeUpLevelVip.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPLEVEL_VIP == selector)
    {
        ret = this->stTradeResponseAccessClientUpLevelVip.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_CHATROOMINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeGetChatRoomInfoList.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_GET_CHATROOMINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientGetChatRoomInfoList.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectGiftsPagidList.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectGiftsPagidList.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_IDENTITYBANK == selector)
    {
        ret = this->stClientRequestAccessTradeSelectIdentityBank.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_IDENTITYBANK == selector)
    {
        ret = this->stTradeResponseAccessClientSelectIdentityBank.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_VISITORSLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectVisitorsList.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_VISITORSLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectVisitorsList.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_SELF_GUARANTEE_REQ == selector)
    {
        ret = this->stCT_QuerySelfGuarantee_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_SELF_GUARANTEE_RESP == selector)
    {
        ret = this->stTC_QuerySelfGuarantee_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_PROMISE_SELF_REQ == selector)
    {
        ret = this->stCT_QueryPromiseSelf_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_PROMISE_SELF_RESP == selector)
    {
        ret = this->stTC_QueryPromiseSelf_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PARTICULARS == selector)
    {
        ret = this->stClientRequestAccessTradeSelectParticulars.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PARTICULARS == selector)
    {
        ret = this->stTradeResponseAccessClientSelectParticulars.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_ORDER_STATE_INFO_LIST_REQ == selector)
    {
        ret = this->stCT_OrderStateInfoList_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_ORDER_STATE_INFO_LIST_RESP == selector)
    {
        ret = this->stTC_OrderStateInfoList_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_USER_COMPLAINT_REQ == selector)
    {
        ret = this->stCT_UserComplaint_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_USER_COMPLAINT_RESP == selector)
    {
        ret = this->stTC_UserComplaint_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDone.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_DONE == selector)
    {
        ret = this->stTradeRsponseAccessClientOrderDone.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_CLOSEDOWN == selector)
    {
        ret = this->stClientRequestAccessTradeOrderClosedown.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_CLOSEDOWN == selector)
    {
        ret = this->stTradeRsponseAccessClientOrderClosedown.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_AT_ONLINE_USER_COUNT == selector)
    {
        ret = this->stAT_OnlineUserCount_Ntf.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = this->stClientRequestAccessTradeSelectApplyerUserInfoList.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = this->stTradeResponseAccessClientSelectApplyerUserInfoList.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_NOTIFY_TRADE_USER_GIS_INFO == selector)
    {
        ret = this->stClientNotifyTradeUserGisInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_CLIENT_USER_GIS_INFO == selector)
    {
        ret = this->stTradeResponseClientUserGisInfoResult.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_HOME_ORDER_INFO_REQ == selector)
    {
        ret = this->stCT_HomeOrderInfo_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_HOME_ORDER_INFO_RESP == selector)
    {
        ret = this->stTC_HomeOrderInfo_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeSelectOrderDetailsInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientSelectOrderDetailsInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_COMPILE_USER_INFO == selector)
    {
        ret = this->stClientRequestAccessTradeCompileUserInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_COMPILE_USER_INFO == selector)
    {
        ret = this->stTradeResponseAccessClientCompileUserInfo.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GLOBAL_USER_INFO_REQ == selector)
    {
        ret = this->stCT_GlobalUserInfoList_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GLOBAL_USER_INFO_RESP == selector)
    {
        ret = this->stTC_GlobalUserInfoList_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_TASK_AWARD == selector)
    {
        ret = this->stClientRequestAccessTradeGetTaskAward.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_GET_TASK_AWARD == selector)
    {
        ret = this->stTradeResponseAccessClientGetTaskAward.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SYSTEM_SEND_MESG == selector)
    {
        ret = this->stCmdSystemSendMesg.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_DISCUSS_DETAIL_REQ == selector)
    {
        ret = this->stCT_QueryDiscussDetail_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_DISCUSS_DETAIL_RESP == selector)
    {
        ret = this->stTC_QueryDiscussDetail_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DELETE_DISCUSS_DETAIL_REQ == selector)
    {
        ret = this->stCT_DeleteDiscuss_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DELETE_DISCUSS_DETAIL_RESP == selector)
    {
        ret = this->stTC_DeleteDiscuss_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DISCUSS_ORDER_REQ == selector)
    {
        ret = this->stCT_DiscussOrder_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DISCUSS_ORDER_RESP == selector)
    {
        ret = this->stTC_DiscussOrder_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_APPLYER == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDoneApplyer.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_APPLYER == selector)
    {
        ret = this->stTradeResponseAccessClientOrderDoneApplyer.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_CREATER == selector)
    {
        ret = this->stClientRequestAccessTradeOrderDoneCreater.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_CREATER == selector)
    {
        ret = this->stTradeResponseAccessClientOrderDoneCreater.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_REPORT_INFO_REQ == selector)
    {
        ret = this->stCT_ReportInfo_Req.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_REPORT_INFO_RESP == selector)
    {
        ret = this->stTC_ReportInfo_Resp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_REQ == selector)
    {
        ret = this->stClientPlayersNearbyReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_RESP == selector)
    {
        ret = this->stClientPlayersNearbyResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_MAKE_REPUTATION == selector)
    {
        ret = this->stClientRequestAccessTradeMakeReputation.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_MAKE_REPUTATION == selector)
    {
        ret = this->stTradeResponseAccessClientMakeReputation.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_REQ == selector)
    {
        ret = this->stClientChatLogonReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_RESP == selector)
    {
        ret = this->stClientChatLogonResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_REQ == selector)
    {
        ret = this->stClientChatSendMsgReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_RESP == selector)
    {
        ret = this->stClientChatSendMsgResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHATSVR_FORWARD_MSG == selector)
    {
        ret = this->stClientChatsvrForwardMsg.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_REQ == selector)
    {
        ret = this->stClientAddFriendReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_RESP == selector)
    {
        ret = this->stClientAddFriendResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_REQ == selector)
    {
        ret = this->stClientDeleteFriendReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_RESP == selector)
    {
        ret = this->stClientDeleteFriendResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_REQ == selector)
    {
        ret = this->stClientJoinGroupReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_RESP == selector)
    {
        ret = this->stClientJoinGroupResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_REQ == selector)
    {
        ret = this->stClientSecedeGroupReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_RESP == selector)
    {
        ret = this->stClientSecedeGroupResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_REQ == selector)
    {
        ret = this->stClientGetThirdPartyPayTokenReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_RESP == selector)
    {
        ret = this->stClientGetThirdPartyPayTokenResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_REQ == selector)
    {
        ret = this->stClientGeneratePayOrderReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_RESP == selector)
    {
        ret = this->stClientGeneratePayOrderResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_NOTIFY_CLIENT_PAY_RESULT == selector)
    {
        ret = this->stTradeNotifyClientPayResult.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_REQ == selector)
    {
        ret = this->stClientExchangeStoneOrCurrencyReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_RESP == selector)
    {
        ret = this->stClientExchangeStoneOrCurrencyResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_REQ == selector)
    {
        ret = this->stClientWithdrawHonestyGoldReq.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_RESP == selector)
    {
        ret = this->stClientWithdrawHonestyGoldResp.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPkgBody::visualize(int64_t selector, char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(selector, destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkgBody::visualize(int64_t selector, TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (CMD_KICKOFF_USER_NOTIFY == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCmdKickoffUserNotify]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCmdKickoffUserNotify */
        if (0 > indent)
        {
            ret = this->stCmdKickoffUserNotify.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCmdKickoffUserNotify.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientVcCodeReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientVcCodeReq */
        if (0 > indent)
        {
            ret = this->stClientVcCodeReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientVcCodeReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VC_CODE_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientVcCodeResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientVcCodeResp */
        if (0 > indent)
        {
            ret = this->stClientVcCodeResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientVcCodeResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRegisterReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRegisterReq */
        if (0 > indent)
        {
            ret = this->stClientRegisterReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRegisterReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_REGISTER_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRegisterResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRegisterResp */
        if (0 > indent)
        {
            ret = this->stClientRegisterResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRegisterResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientNameLogonReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientNameLogonReq */
        if (0 > indent)
        {
            ret = this->stClientNameLogonReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientNameLogonReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_NAME_LOGON_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientNameLogonResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientNameLogonResp */
        if (0 > indent)
        {
            ret = this->stClientNameLogonResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientNameLogonResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientBaseInfoReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientBaseInfoReq */
        if (0 > indent)
        {
            ret = this->stClientBaseInfoReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientBaseInfoReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientBaseInfoResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientBaseInfoResp */
        if (0 > indent)
        {
            ret = this->stClientBaseInfoResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientBaseInfoResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateBaseInfoReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateBaseInfoReq */
        if (0 > indent)
        {
            ret = this->stClientUpdateBaseInfoReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateBaseInfoReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BASE_INFO_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateBaseInfoResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateBaseInfoResp */
        if (0 > indent)
        {
            ret = this->stClientUpdateBaseInfoResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateBaseInfoResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientBaseInfoListReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientBaseInfoListReq */
        if (0 > indent)
        {
            ret = this->stClientBaseInfoListReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientBaseInfoListReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_BASE_INFO_LIST_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientBaseInfoListResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientBaseInfoListResp */
        if (0 > indent)
        {
            ret = this->stClientBaseInfoListResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientBaseInfoListResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateBirthdayReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateBirthdayReq */
        if (0 > indent)
        {
            ret = this->stClientUpdateBirthdayReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateBirthdayReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_BIRTHDAY_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateBirthdayResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateBirthdayResp */
        if (0 > indent)
        {
            ret = this->stClientUpdateBirthdayResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateBirthdayResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateNickNameReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateNickNameReq */
        if (0 > indent)
        {
            ret = this->stClientUpdateNickNameReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateNickNameReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_NICKNAME_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateNickNameResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateNickNameResp */
        if (0 > indent)
        {
            ret = this->stClientUpdateNickNameResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateNickNameResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateOccupationReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateOccupationReq */
        if (0 > indent)
        {
            ret = this->stClientUpdateOccupationReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateOccupationReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_OCCUPATION_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateOccupationResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateOccupationResp */
        if (0 > indent)
        {
            ret = this->stClientUpdateOccupationResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateOccupationResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateResidentionReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateResidentionReq */
        if (0 > indent)
        {
            ret = this->stClientUpdateResidentionReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateResidentionReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_RESIDENTION_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateResidentionResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateResidentionResp */
        if (0 > indent)
        {
            ret = this->stClientUpdateResidentionResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateResidentionResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateSignatureReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateSignatureReq */
        if (0 > indent)
        {
            ret = this->stClientUpdateSignatureReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateSignatureReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_SIGNATURE_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateSignatureResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateSignatureResp */
        if (0 > indent)
        {
            ret = this->stClientUpdateSignatureResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateSignatureResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdatePortraitReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdatePortraitReq */
        if (0 > indent)
        {
            ret = this->stClientUpdatePortraitReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdatePortraitReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_PORTRAIT_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdatePortraitResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdatePortraitResp */
        if (0 > indent)
        {
            ret = this->stClientUpdatePortraitResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdatePortraitResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateGenderReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateGenderReq */
        if (0 > indent)
        {
            ret = this->stClientUpdateGenderReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateGenderReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_UPDATE_GENDER_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUpdateGenderResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUpdateGenderResp */
        if (0 > indent)
        {
            ret = this->stClientUpdateGenderResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUpdateGenderResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUserAccountInfoReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUserAccountInfoReq */
        if (0 > indent)
        {
            ret = this->stClientUserAccountInfoReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUserAccountInfoReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_USER_ACCOUNT_INFO_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientUserAccountInfoResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientUserAccountInfoResp */
        if (0 > indent)
        {
            ret = this->stClientUserAccountInfoResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientUserAccountInfoResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CG_UPDATE_RESIDENTION_DETAIL_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCG_UpdateResidentionDetail_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCG_UpdateResidentionDetail_Req */
        if (0 > indent)
        {
            ret = this->stCG_UpdateResidentionDetail_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCG_UpdateResidentionDetail_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_GC_UPDATE_RESIDENTION_DETAIL_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stGC_UpdateResidentionDetail_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stGC_UpdateResidentionDetail_Resp */
        if (0 > indent)
        {
            ret = this->stGC_UpdateResidentionDetail_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stGC_UpdateResidentionDetail_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientPhoneQueryUserIdReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientPhoneQueryUserIdReq */
        if (0 > indent)
        {
            ret = this->stClientPhoneQueryUserIdReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientPhoneQueryUserIdReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CLIENT_PHONE_QUERY_USERID_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientPhoneQueryUserIdResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientPhoneQueryUserIdResp */
        if (0 > indent)
        {
            ret = this->stClientPhoneQueryUserIdResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientPhoneQueryUserIdResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRetrieveCodeReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRetrieveCodeReq */
        if (0 > indent)
        {
            ret = this->stClientRetrieveCodeReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRetrieveCodeReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_RETRIEVE_CODE_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRetrieveCodeResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRetrieveCodeResp */
        if (0 > indent)
        {
            ret = this->stClientRetrieveCodeResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRetrieveCodeResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientValidateRetrieveCodeReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientValidateRetrieveCodeReq */
        if (0 > indent)
        {
            ret = this->stClientValidateRetrieveCodeReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientValidateRetrieveCodeReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_VALIDATE_RETRIEVE_CODE_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientValidateRetrieveCodeResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientValidateRetrieveCodeResp */
        if (0 > indent)
        {
            ret = this->stClientValidateRetrieveCodeResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientValidateRetrieveCodeResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientModifyPasswordReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientModifyPasswordReq */
        if (0 > indent)
        {
            ret = this->stClientModifyPasswordReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientModifyPasswordReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_MODIFY_PASSWORD_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientModifyPasswordResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientModifyPasswordResp */
        if (0 > indent)
        {
            ret = this->stClientModifyPasswordResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientModifyPasswordResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientTokenLoginReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientTokenLoginReq */
        if (0 > indent)
        {
            ret = this->stClientTokenLoginReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientTokenLoginReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TOKEN_LOGON_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientTokenLoginResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientTokenLoginResp */
        if (0 > indent)
        {
            ret = this->stClientTokenLoginResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientTokenLoginResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientAccountInfoListReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientAccountInfoListReq */
        if (0 > indent)
        {
            ret = this->stClientAccountInfoListReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientAccountInfoListReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ACCOUNT_INFO_LIST_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientAccountInfoListResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientAccountInfoListResp */
        if (0 > indent)
        {
            ret = this->stClientAccountInfoListResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientAccountInfoListResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientAddressPhoneQueryReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientAddressPhoneQueryReq */
        if (0 > indent)
        {
            ret = this->stClientAddressPhoneQueryReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientAddressPhoneQueryReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADDRESS_PHONE_QUERY_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientAddressPhoneQueryResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientAddressPhoneQueryResp */
        if (0 > indent)
        {
            ret = this->stClientAddressPhoneQueryResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientAddressPhoneQueryResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_NAME_LOGIN == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessNameLogin]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessNameLogin */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessNameLogin.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessNameLogin.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TOKEN_LOGIN == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTokenLogin]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTokenLogin */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTokenLogin.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTokenLogin.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_RESPONSE_CLIENT_NAME_LOGIN == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stAccessResponseClientNameLogin]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stAccessResponseClientNameLogin */
        if (0 > indent)
        {
            ret = this->stAccessResponseClientNameLogin.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stAccessResponseClientNameLogin.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_ORDER == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeCreateOrder]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeCreateOrder */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeCreateOrder.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeCreateOrder.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_ORDER == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientCreateOrder]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientCreateOrder */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientCreateOrder.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientCreateOrder.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectOrderBasicInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectOrderBasicInfo */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectOrderBasicInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectOrderBasicInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_BASIC_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectOrderBasicInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectOrderBasicInfo */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectOrderBasicInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectOrderBasicInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectOrderSpecificInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectOrderSpecificInfo */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectOrderSpecificInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectOrderSpecificInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_SPECIFIC_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectOrderSpecificInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectOrderSpecificInfo */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectOrderSpecificInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectOrderSpecificInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_APPLY_ORDER == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeApplyOrder]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeApplyOrder */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeApplyOrder.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeApplyOrder.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_APPLY_ORDER == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientApplyOrder]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientApplyOrder */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientApplyOrder.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientApplyOrder.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYER == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectApplyer]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectApplyer */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectApplyer.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectApplyer.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYER == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectApplyer]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectApplyer */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectApplyer.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectApplyer.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientConfirmOrCancelOrderReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientConfirmOrCancelOrderReq */
        if (0 > indent)
        {
            ret = this->stClientConfirmOrCancelOrderReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientConfirmOrCancelOrderReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CONFIRM_OR_CANCEL_ORDER_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientConfirmOrCancelOrderResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientConfirmOrCancelOrderResp */
        if (0 > indent)
        {
            ret = this->stClientConfirmOrCancelOrderResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientConfirmOrCancelOrderResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientCreatedOrderBriefReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientCreatedOrderBriefReq */
        if (0 > indent)
        {
            ret = this->stClientCreatedOrderBriefReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientCreatedOrderBriefReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_CREATED_ORDER_BRIEF_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientCreatedOrderBriefResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientCreatedOrderBriefResp */
        if (0 > indent)
        {
            ret = this->stClientCreatedOrderBriefResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientCreatedOrderBriefResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_DISCUSS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectDiscuss]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectDiscuss */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectDiscuss.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectDiscuss.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_DISCUSS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectDiscuss]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectDiscuss */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectDiscuss.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectDiscuss.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_CREATE_DISCUSS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeCreateDiscuss]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeCreateDiscuss */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeCreateDiscuss.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeCreateDiscuss.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_CREATE_DISCUSS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientCreateDiscuss]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientCreateDiscuss */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientCreateDiscuss.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientCreateDiscuss.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PHOTO_WALL == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectPhotoWall]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectPhotoWall */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectPhotoWall.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectPhotoWall.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PHOTO_WALL == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectPhotoWall]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectPhotoWall */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectPhotoWall.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectPhotoWall.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_PHOTO_WALL == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeUpdatePhotoWall]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeUpdatePhotoWall */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeUpdatePhotoWall.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeUpdatePhotoWall.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_PHOTO_WALL == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientUpdatePhotoWall]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientUpdatePhotoWall */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientUpdatePhotoWall.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientUpdatePhotoWall.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_REGISTER_TRADEINFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeRegisterTradeinfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeRegisterTradeinfo */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeRegisterTradeinfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeRegisterTradeinfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_REGISTER_TRADEINFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientRegisterTradeinfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientRegisterTradeinfo */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientRegisterTradeinfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientRegisterTradeinfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_ARGUE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeUpdateArgue]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeUpdateArgue */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeUpdateArgue.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeUpdateArgue.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_ARGUE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientUpdateArgue]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientUpdateArgue */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientUpdateArgue.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientUpdateArgue.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TRADEUSERINFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectTradeUserInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectTradeUserInfo */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectTradeUserInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectTradeUserInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TRADEUSERINFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectTradeUserInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectTradeUserInfo */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectTradeUserInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectTradeUserInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPDATE_SERVICE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeUpdateService]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeUpdateService */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeUpdateService.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeUpdateService.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_SERVICE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientUpdateService]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientUpdateService */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientUpdateService.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientUpdateService.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectGifts]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectGifts */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectGifts.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectGifts.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectGifts]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectGifts */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectGifts.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectGifts.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_PRESENT_GIFTS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradePresentGifts]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradePresentGifts */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradePresentGifts.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradePresentGifts.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_PRESENT_GIFTS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientPresentGifts]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientPresentGifts */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientPresentGifts.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientPresentGifts.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_BUY_CAR_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_BuyCar_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_BuyCar_Req */
        if (0 > indent)
        {
            ret = this->stCT_BuyCar_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_BuyCar_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_BUY_CAR_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_BuyCar_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_BuyCar_Resp */
        if (0 > indent)
        {
            ret = this->stTC_BuyCar_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_BuyCar_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_OPERATE_CAR_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_OperateCar_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_OperateCar_Req */
        if (0 > indent)
        {
            ret = this->stCT_OperateCar_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_OperateCar_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_OPERATE_CAR_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_OperateCar_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_OperateCar_Resp */
        if (0 > indent)
        {
            ret = this->stTC_OperateCar_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_OperateCar_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CT_APPLY_ORDER_BRIEF_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientAppliedOrderBriefReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientAppliedOrderBriefReq */
        if (0 > indent)
        {
            ret = this->stClientAppliedOrderBriefReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientAppliedOrderBriefReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TC_APPLY_ORDER_BRIEF_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientAppliedOrderBriefResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientAppliedOrderBriefResp */
        if (0 > indent)
        {
            ret = this->stClientAppliedOrderBriefResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientAppliedOrderBriefResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_GuaranteeFriend_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_GuaranteeFriend_Req */
        if (0 > indent)
        {
            ret = this->stCT_GuaranteeFriend_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_GuaranteeFriend_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_GuaranteeFriend_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_GuaranteeFriend_Resp */
        if (0 > indent)
        {
            ret = this->stTC_GuaranteeFriend_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_GuaranteeFriend_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_CANCEL_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_CancelGuaranteeFriend_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_CancelGuaranteeFriend_Req */
        if (0 > indent)
        {
            ret = this->stCT_CancelGuaranteeFriend_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_CancelGuaranteeFriend_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_CANCEL_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_CancelGuaranteeFriend_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_CancelGuaranteeFriend_Resp */
        if (0 > indent)
        {
            ret = this->stTC_CancelGuaranteeFriend_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_CancelGuaranteeFriend_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_GUARANTEE_FRIEND_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_QueryGuaranteeFriend_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_QueryGuaranteeFriend_Req */
        if (0 > indent)
        {
            ret = this->stCT_QueryGuaranteeFriend_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_QueryGuaranteeFriend_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_GUARANTEE_FRIEND_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_QueryGuaranteeFriend_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_QueryGuaranteeFriend_Resp */
        if (0 > indent)
        {
            ret = this->stTC_QueryGuaranteeFriend_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_QueryGuaranteeFriend_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_TASKINFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectTaskInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectTaskInfo */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectTaskInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectTaskInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TASKINFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectTaskInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectTaskInfo */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectTaskInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectTaskInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELL_GIFTS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSellGifts]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSellGifts */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSellGifts.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSellGifts.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELL_GIFTS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSellGifts]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSellGifts */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSellGifts.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSellGifts.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_USERINFOLIST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectUserInfoList]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectUserInfoList */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectUserInfoList.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectUserInfoList.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_USERINFOLIST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectUserInfoList]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectUserInfoList */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectUserInfoList.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectUserInfoList.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_UPLEVEL_VIP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeUpLevelVip]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeUpLevelVip */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeUpLevelVip.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeUpLevelVip.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_UPLEVEL_VIP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientUpLevelVip]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientUpLevelVip */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientUpLevelVip.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientUpLevelVip.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_CHATROOMINFOLIST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeGetChatRoomInfoList]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeGetChatRoomInfoList */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeGetChatRoomInfoList.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeGetChatRoomInfoList.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_GET_CHATROOMINFOLIST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientGetChatRoomInfoList]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientGetChatRoomInfoList */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientGetChatRoomInfoList.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientGetChatRoomInfoList.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectGiftsPagidList]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectGiftsPagidList */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectGiftsPagidList.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectGiftsPagidList.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTSPAGIDLIST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectGiftsPagidList]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectGiftsPagidList */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectGiftsPagidList.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectGiftsPagidList.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_IDENTITYBANK == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectIdentityBank]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectIdentityBank */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectIdentityBank.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectIdentityBank.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_IDENTITYBANK == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectIdentityBank]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectIdentityBank */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectIdentityBank.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectIdentityBank.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_VISITORSLIST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectVisitorsList]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectVisitorsList */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectVisitorsList.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectVisitorsList.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_VISITORSLIST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectVisitorsList]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectVisitorsList */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectVisitorsList.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectVisitorsList.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_SELF_GUARANTEE_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_QuerySelfGuarantee_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_QuerySelfGuarantee_Req */
        if (0 > indent)
        {
            ret = this->stCT_QuerySelfGuarantee_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_QuerySelfGuarantee_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_SELF_GUARANTEE_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_QuerySelfGuarantee_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_QuerySelfGuarantee_Resp */
        if (0 > indent)
        {
            ret = this->stTC_QuerySelfGuarantee_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_QuerySelfGuarantee_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_PROMISE_SELF_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_QueryPromiseSelf_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_QueryPromiseSelf_Req */
        if (0 > indent)
        {
            ret = this->stCT_QueryPromiseSelf_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_QueryPromiseSelf_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_PROMISE_SELF_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_QueryPromiseSelf_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_QueryPromiseSelf_Resp */
        if (0 > indent)
        {
            ret = this->stTC_QueryPromiseSelf_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_QueryPromiseSelf_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_PARTICULARS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectParticulars]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectParticulars */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectParticulars.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectParticulars.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PARTICULARS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectParticulars]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectParticulars */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectParticulars.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectParticulars.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_ORDER_STATE_INFO_LIST_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_OrderStateInfoList_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_OrderStateInfoList_Req */
        if (0 > indent)
        {
            ret = this->stCT_OrderStateInfoList_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_OrderStateInfoList_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_ORDER_STATE_INFO_LIST_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_OrderStateInfoList_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_OrderStateInfoList_Resp */
        if (0 > indent)
        {
            ret = this->stTC_OrderStateInfoList_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_OrderStateInfoList_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_USER_COMPLAINT_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_UserComplaint_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_UserComplaint_Req */
        if (0 > indent)
        {
            ret = this->stCT_UserComplaint_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_UserComplaint_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_USER_COMPLAINT_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_UserComplaint_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_UserComplaint_Resp */
        if (0 > indent)
        {
            ret = this->stTC_UserComplaint_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_UserComplaint_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeOrderDone]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeOrderDone */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeOrderDone.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeOrderDone.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_DONE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeRsponseAccessClientOrderDone]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeRsponseAccessClientOrderDone */
        if (0 > indent)
        {
            ret = this->stTradeRsponseAccessClientOrderDone.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeRsponseAccessClientOrderDone.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_CLOSEDOWN == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeOrderClosedown]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeOrderClosedown */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeOrderClosedown.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeOrderClosedown.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_ORDER_CLOSEDOWN == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeRsponseAccessClientOrderClosedown]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeRsponseAccessClientOrderClosedown */
        if (0 > indent)
        {
            ret = this->stTradeRsponseAccessClientOrderClosedown.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeRsponseAccessClientOrderClosedown.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_AT_ONLINE_USER_COUNT == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stAT_OnlineUserCount_Ntf]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stAT_OnlineUserCount_Ntf */
        if (0 > indent)
        {
            ret = this->stAT_OnlineUserCount_Ntf.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stAT_OnlineUserCount_Ntf.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectApplyerUserInfoList]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectApplyerUserInfoList */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectApplyerUserInfoList.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectApplyerUserInfoList.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYERUSERINFOLIST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectApplyerUserInfoList]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectApplyerUserInfoList */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectApplyerUserInfoList.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectApplyerUserInfoList.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_NOTIFY_TRADE_USER_GIS_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientNotifyTradeUserGisInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientNotifyTradeUserGisInfo */
        if (0 > indent)
        {
            ret = this->stClientNotifyTradeUserGisInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientNotifyTradeUserGisInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_CLIENT_USER_GIS_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseClientUserGisInfoResult]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseClientUserGisInfoResult */
        if (0 > indent)
        {
            ret = this->stTradeResponseClientUserGisInfoResult.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseClientUserGisInfoResult.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_HOME_ORDER_INFO_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_HomeOrderInfo_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_HomeOrderInfo_Req */
        if (0 > indent)
        {
            ret = this->stCT_HomeOrderInfo_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_HomeOrderInfo_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_HOME_ORDER_INFO_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_HomeOrderInfo_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_HomeOrderInfo_Resp */
        if (0 > indent)
        {
            ret = this->stTC_HomeOrderInfo_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_HomeOrderInfo_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeSelectOrderDetailsInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeSelectOrderDetailsInfo */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeSelectOrderDetailsInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeSelectOrderDetailsInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_SELECT_ORDER_DETAILS_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientSelectOrderDetailsInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientSelectOrderDetailsInfo */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientSelectOrderDetailsInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientSelectOrderDetailsInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_COMPILE_USER_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeCompileUserInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeCompileUserInfo */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeCompileUserInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeCompileUserInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_COMPILE_USER_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientCompileUserInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientCompileUserInfo */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientCompileUserInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientCompileUserInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_GLOBAL_USER_INFO_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_GlobalUserInfoList_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_GlobalUserInfoList_Req */
        if (0 > indent)
        {
            ret = this->stCT_GlobalUserInfoList_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_GlobalUserInfoList_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_GLOBAL_USER_INFO_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_GlobalUserInfoList_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_GlobalUserInfoList_Resp */
        if (0 > indent)
        {
            ret = this->stTC_GlobalUserInfoList_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_GlobalUserInfoList_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_GET_TASK_AWARD == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeGetTaskAward]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeGetTaskAward */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeGetTaskAward.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeGetTaskAward.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_GET_TASK_AWARD == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientGetTaskAward]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientGetTaskAward */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientGetTaskAward.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientGetTaskAward.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SYSTEM_SEND_MESG == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCmdSystemSendMesg]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCmdSystemSendMesg */
        if (0 > indent)
        {
            ret = this->stCmdSystemSendMesg.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCmdSystemSendMesg.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_QUERY_DISCUSS_DETAIL_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_QueryDiscussDetail_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_QueryDiscussDetail_Req */
        if (0 > indent)
        {
            ret = this->stCT_QueryDiscussDetail_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_QueryDiscussDetail_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_QUERY_DISCUSS_DETAIL_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_QueryDiscussDetail_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_QueryDiscussDetail_Resp */
        if (0 > indent)
        {
            ret = this->stTC_QueryDiscussDetail_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_QueryDiscussDetail_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DELETE_DISCUSS_DETAIL_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_DeleteDiscuss_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_DeleteDiscuss_Req */
        if (0 > indent)
        {
            ret = this->stCT_DeleteDiscuss_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_DeleteDiscuss_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DELETE_DISCUSS_DETAIL_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_DeleteDiscuss_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_DeleteDiscuss_Resp */
        if (0 > indent)
        {
            ret = this->stTC_DeleteDiscuss_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_DeleteDiscuss_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_DISCUSS_ORDER_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_DiscussOrder_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_DiscussOrder_Req */
        if (0 > indent)
        {
            ret = this->stCT_DiscussOrder_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_DiscussOrder_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_DISCUSS_ORDER_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_DiscussOrder_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_DiscussOrder_Resp */
        if (0 > indent)
        {
            ret = this->stTC_DiscussOrder_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_DiscussOrder_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_APPLYER == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeOrderDoneApplyer]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeOrderDoneApplyer */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeOrderDoneApplyer.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeOrderDoneApplyer.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_APPLYER == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientOrderDoneApplyer]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientOrderDoneApplyer */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientOrderDoneApplyer.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientOrderDoneApplyer.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_CREATER == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeOrderDoneCreater]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeOrderDoneCreater */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeOrderDoneCreater.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeOrderDoneCreater.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_CREATER == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientOrderDoneCreater]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientOrderDoneCreater */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientOrderDoneCreater.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientOrderDoneCreater.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CT_REPORT_INFO_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stCT_ReportInfo_Req]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stCT_ReportInfo_Req */
        if (0 > indent)
        {
            ret = this->stCT_ReportInfo_Req.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stCT_ReportInfo_Req.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_TC_REPORT_INFO_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTC_ReportInfo_Resp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTC_ReportInfo_Resp */
        if (0 > indent)
        {
            ret = this->stTC_ReportInfo_Resp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTC_ReportInfo_Resp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientPlayersNearbyReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientPlayersNearbyReq */
        if (0 > indent)
        {
            ret = this->stClientPlayersNearbyReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientPlayersNearbyReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_PLAYERS_NEARBY_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientPlayersNearbyResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientPlayersNearbyResp */
        if (0 > indent)
        {
            ret = this->stClientPlayersNearbyResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientPlayersNearbyResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_REQUEST_ACCESS_TRADE_MAKE_REPUTATION == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientRequestAccessTradeMakeReputation]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientRequestAccessTradeMakeReputation */
        if (0 > indent)
        {
            ret = this->stClientRequestAccessTradeMakeReputation.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientRequestAccessTradeMakeReputation.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RESPONSE_ACCESS_CLIENT_MAKE_REPUTATION == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeResponseAccessClientMakeReputation]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeResponseAccessClientMakeReputation */
        if (0 > indent)
        {
            ret = this->stTradeResponseAccessClientMakeReputation.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeResponseAccessClientMakeReputation.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientChatLogonReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientChatLogonReq */
        if (0 > indent)
        {
            ret = this->stClientChatLogonReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientChatLogonReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_LOGON_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientChatLogonResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientChatLogonResp */
        if (0 > indent)
        {
            ret = this->stClientChatLogonResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientChatLogonResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientChatSendMsgReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientChatSendMsgReq */
        if (0 > indent)
        {
            ret = this->stClientChatSendMsgReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientChatSendMsgReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHAT_SEND_MSG_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientChatSendMsgResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientChatSendMsgResp */
        if (0 > indent)
        {
            ret = this->stClientChatSendMsgResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientChatSendMsgResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_CHATSVR_FORWARD_MSG == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientChatsvrForwardMsg]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientChatsvrForwardMsg */
        if (0 > indent)
        {
            ret = this->stClientChatsvrForwardMsg.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientChatsvrForwardMsg.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientAddFriendReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientAddFriendReq */
        if (0 > indent)
        {
            ret = this->stClientAddFriendReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientAddFriendReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_ADD_FRIEND_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientAddFriendResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientAddFriendResp */
        if (0 > indent)
        {
            ret = this->stClientAddFriendResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientAddFriendResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientDeleteFriendReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientDeleteFriendReq */
        if (0 > indent)
        {
            ret = this->stClientDeleteFriendReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientDeleteFriendReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_DELETE_FRIEND_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientDeleteFriendResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientDeleteFriendResp */
        if (0 > indent)
        {
            ret = this->stClientDeleteFriendResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientDeleteFriendResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientJoinGroupReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientJoinGroupReq */
        if (0 > indent)
        {
            ret = this->stClientJoinGroupReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientJoinGroupReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_JOIN_GROUP_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientJoinGroupResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientJoinGroupResp */
        if (0 > indent)
        {
            ret = this->stClientJoinGroupResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientJoinGroupResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientSecedeGroupReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientSecedeGroupReq */
        if (0 > indent)
        {
            ret = this->stClientSecedeGroupReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientSecedeGroupReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CMD_SECEDE_GROUP_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientSecedeGroupResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientSecedeGroupResp */
        if (0 > indent)
        {
            ret = this->stClientSecedeGroupResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientSecedeGroupResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientGetThirdPartyPayTokenReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientGetThirdPartyPayTokenReq */
        if (0 > indent)
        {
            ret = this->stClientGetThirdPartyPayTokenReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientGetThirdPartyPayTokenReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GET_THIRDPARTY_PAY_TOKEN_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientGetThirdPartyPayTokenResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientGetThirdPartyPayTokenResp */
        if (0 > indent)
        {
            ret = this->stClientGetThirdPartyPayTokenResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientGetThirdPartyPayTokenResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientGeneratePayOrderReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientGeneratePayOrderReq */
        if (0 > indent)
        {
            ret = this->stClientGeneratePayOrderReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientGeneratePayOrderReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_GENERATE_PAY_ORDER_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientGeneratePayOrderResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientGeneratePayOrderResp */
        if (0 > indent)
        {
            ret = this->stClientGeneratePayOrderResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientGeneratePayOrderResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_NOTIFY_CLIENT_PAY_RESULT == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeNotifyClientPayResult]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeNotifyClientPayResult */
        if (0 > indent)
        {
            ret = this->stTradeNotifyClientPayResult.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeNotifyClientPayResult.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientExchangeStoneOrCurrencyReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientExchangeStoneOrCurrencyReq */
        if (0 > indent)
        {
            ret = this->stClientExchangeStoneOrCurrencyReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientExchangeStoneOrCurrencyReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_EXCHANGE_STONE_OR_CURRENCY_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientExchangeStoneOrCurrencyResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientExchangeStoneOrCurrencyResp */
        if (0 > indent)
        {
            ret = this->stClientExchangeStoneOrCurrencyResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientExchangeStoneOrCurrencyResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_REQ == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientWithdrawHonestyGoldReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientWithdrawHonestyGoldReq */
        if (0 > indent)
        {
            ret = this->stClientWithdrawHonestyGoldReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientWithdrawHonestyGoldReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CLIENT_WITHDRAW_HONESTY_GOLD_RESP == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stClientWithdrawHonestyGoldResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stClientWithdrawHonestyGoldResp */
        if (0 > indent)
        {
            ret = this->stClientWithdrawHonestyGoldResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stClientWithdrawHonestyGoldResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ClientPkg::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ClientPkg::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkg::pack_l(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack_l(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkg::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPkg::CURRVERSION < cutVer)
    {
        cutVer = ClientPkg::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    const size_t metaSizePos = destBuf.getUsedSize();

    const size_t savedBeginPos = destBuf.getUsedSize();

    /* pack member: this->stHead */
    {
        ret = this->stHead.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stBody */
    {
        const int64_t selector4stBody = this->stHead.dwCmdID;
        ret = this->stBody.pack(selector4stBody, destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* set sizeinfo for ClientPkg */
    const size_t sizeInBuf = destBuf.getUsedSize() - savedBeginPos;
    ret = destBuf.writeUInt16((uint16_t)(sizeInBuf), metaSizePos);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

TdrError::ErrorType
ClientPkg::pack_l(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ClientPkg::CURRVERSION < cutVer)
    {
        cutVer = ClientPkg::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    const size_t metaSizePos = destBuf.getUsedSize();

    const size_t savedBeginPos = destBuf.getUsedSize();

    /* pack member: this->stHead */
    {
        ret = this->stHead.pack_l(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stBody */
    {
        const int64_t selector4stBody = this->stHead.dwCmdID;
        ret = this->stBody.pack_l(selector4stBody, destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* set sizeinfo for ClientPkg */
    const size_t sizeInBuf = destBuf.getUsedSize() - savedBeginPos;
    ret = destBuf.writeUInt16_l((uint16_t)(sizeInBuf), metaSizePos);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

TdrError::ErrorType
ClientPkg::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkg::unpack_l(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack_l(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkg::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* get sizeinfo for ClientPkg */
    /* get meta's sizeinfo-value */
    uint16_t sizeInBuf;
    ret = srcBuf.readUInt16(sizeInBuf, srcBuf.getUsedSize() + 0);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* check srcBuf contains enough bytes specified by sizeinfo */
    if (srcBuf.getLeftSize() < sizeInBuf)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_SHORT_BUF_FOR_READ;
    }

    /* adjust cutversion */
    if (0 == cutVer || ClientPkg::CURRVERSION < cutVer)
    {
        cutVer = ClientPkg::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->stHead */
    {
        ret = this->stHead.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stBody */
    {
        const int64_t selector4stBody = this->stHead.dwCmdID;
        ret = this->stBody.unpack(selector4stBody, srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPkg::unpack_l(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* get sizeinfo for ClientPkg */
    /* get meta's sizeinfo-value */
    uint16_t sizeInBuf;
    ret = srcBuf.readUInt16_l(sizeInBuf, srcBuf.getUsedSize() + 0);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* check srcBuf contains enough bytes specified by sizeinfo */
    if (srcBuf.getLeftSize() < sizeInBuf)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_SHORT_BUF_FOR_READ;
    }

    /* adjust cutversion */
    if (0 == cutVer || ClientPkg::CURRVERSION < cutVer)
    {
        cutVer = ClientPkg::CURRVERSION;
    }

    /* check cutversion */
    if (ClientPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->stHead */
    {
        ret = this->stHead.unpack_l(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stBody */
    {
        const int64_t selector4stBody = this->stHead.dwCmdID;
        ret = this->stBody.unpack_l(selector4stBody, srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
ClientPkg::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ClientPkg::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->stHead */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stHead]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stHead */
    if (0 > indent)
    {
        ret = this->stHead.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stHead.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stBody */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stBody]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stBody */
    const int64_t selector4stBody = this->stHead.dwCmdID;
    if (0 > indent)
    {
        ret = this->stBody.visualize(selector4stBody, destBuf, indent, separator);
    } else
    {
        ret = this->stBody.visualize(selector4stBody, destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ClientPkg::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ClientPkg::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


}
