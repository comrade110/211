/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 2cf24d0046363badc4b95a8c906bab49 */

/* creation time: Tue Sep  8 14:12:09 2015 */
/* tdr version: 2.6.3, build at 20150209 */

#if defined(_WIN32) || defined(_WIN64)
#pragma warning(disable:4996 4244)
#endif

#include "access_protocol.h"
#include "TdrTypeUtil.h"

using tsf4g_tdr::TdrBufUtil;
using tsf4g_tdr::TdrTypeUtil;

namespace access_svr
{


TdrError::ErrorType
CommPkg::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CommPkg::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CommPkg::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CommPkg::CURRVERSION < cutVer)
    {
        cutVer = CommPkg::CURRVERSION;
    }

    /* check cutversion */
    if (CommPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->ullUserID */
    {
        ret = destBuf.writeUInt64(this->ullUserID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBodyLen */
    {
        ret = destBuf.writeInt32(this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szBody */
    {
        if (0 > this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_MAX_BODY_LEN < this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szBody, this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
CommPkg::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CommPkg::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CommPkg::CURRVERSION < cutVer)
    {
        cutVer = CommPkg::CURRVERSION;
    }

    /* check cutversion */
    if (CommPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->ullUserID */
    {
        ret = srcBuf.readUInt64(this->ullUserID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBodyLen */
    {
        ret = srcBuf.readInt32(this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szBody */
    {
        if (0 > this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_MAX_BODY_LEN < this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szBody, this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
CommPkg::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CommPkg::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->ullUserID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[ullUserID]", TDR_CPP_UINT64_FORMAT, this->ullUserID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBodyLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBodyLen]", "%d", this->iBodyLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szBody */
    if (0 > this->iBodyLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_MAX_BODY_LEN < this->iBodyLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szBody]", this->iBodyLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szBody_i = 0; szBody_i < this->iBodyLen; szBody_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szBody[szBody_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CommPkg::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CommPkg::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeRegReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeRegReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRegReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRegReq::CURRVERSION < cutVer)
    {
        cutVer = TradeRegReq::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRegReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->dwGameID */
    {
        ret = destBuf.writeUInt32(this->dwGameID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeRegReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRegReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRegReq::CURRVERSION < cutVer)
    {
        cutVer = TradeRegReq::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRegReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->dwGameID */
    {
        ret = srcBuf.readUInt32(this->dwGameID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeRegReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRegReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->dwGameID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwGameID]", "%u", this->dwGameID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeRegReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeRegReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeRegResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeRegResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRegResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRegResp::CURRVERSION < cutVer)
    {
        cutVer = TradeRegResp::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRegResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeRegResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRegResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRegResp::CURRVERSION < cutVer)
    {
        cutVer = TradeRegResp::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRegResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeRegResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRegResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeRegResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeRegResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeCommPkgReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeCommPkgReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeCommPkgReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeCommPkgReq::CURRVERSION < cutVer)
    {
        cutVer = TradeCommPkgReq::CURRVERSION;
    }

    /* check cutversion */
    if (TradeCommPkgReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->stData */
    {
        ret = this->stData.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeCommPkgReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeCommPkgReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeCommPkgReq::CURRVERSION < cutVer)
    {
        cutVer = TradeCommPkgReq::CURRVERSION;
    }

    /* check cutversion */
    if (TradeCommPkgReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->stData */
    {
        ret = this->stData.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeCommPkgReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeCommPkgReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->stData */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stData]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stData */
    if (0 > indent)
    {
        ret = this->stData.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stData.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeCommPkgReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeCommPkgReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeCommPkgResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeCommPkgResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeCommPkgResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeCommPkgResp::CURRVERSION < cutVer)
    {
        cutVer = TradeCommPkgResp::CURRVERSION;
    }

    /* check cutversion */
    if (TradeCommPkgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stData */
    {
        ret = this->stData.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeCommPkgResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeCommPkgResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeCommPkgResp::CURRVERSION < cutVer)
    {
        cutVer = TradeCommPkgResp::CURRVERSION;
    }

    /* check cutversion */
    if (TradeCommPkgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stData */
    {
        ret = this->stData.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeCommPkgResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeCommPkgResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stData */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stData]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stData */
    if (0 > indent)
    {
        ret = this->stData.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stData.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeCommPkgResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeCommPkgResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessNotifyTradeLogonReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLogonReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLogonReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessNotifyTradeLogonReq::CURRVERSION < cutVer)
    {
        cutVer = AccessNotifyTradeLogonReq::CURRVERSION;
    }

    /* check cutversion */
    if (AccessNotifyTradeLogonReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->chPlaceholder */
    {
        ret = destBuf.writeInt8(this->chPlaceholder);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessNotifyTradeLogonReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLogonReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessNotifyTradeLogonReq::CURRVERSION < cutVer)
    {
        cutVer = AccessNotifyTradeLogonReq::CURRVERSION;
    }

    /* check cutversion */
    if (AccessNotifyTradeLogonReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->chPlaceholder */
    {
        ret = srcBuf.readInt8(this->chPlaceholder);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessNotifyTradeLogonReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLogonReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->chPlaceholder */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chPlaceholder]", "0x%02x", this->chPlaceholder);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessNotifyTradeLogonReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessNotifyTradeLogonReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessNotifyTradeLogonResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLogonResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLogonResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessNotifyTradeLogonResp::CURRVERSION < cutVer)
    {
        cutVer = AccessNotifyTradeLogonResp::CURRVERSION;
    }

    /* check cutversion */
    if (AccessNotifyTradeLogonResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessNotifyTradeLogonResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLogonResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessNotifyTradeLogonResp::CURRVERSION < cutVer)
    {
        cutVer = AccessNotifyTradeLogonResp::CURRVERSION;
    }

    /* check cutversion */
    if (AccessNotifyTradeLogonResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessNotifyTradeLogonResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLogonResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessNotifyTradeLogonResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessNotifyTradeLogonResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessRequestTradeUpdateUserInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessRequestTradeUpdateUserInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRequestTradeUpdateUserInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessRequestTradeUpdateUserInfo::CURRVERSION < cutVer)
    {
        cutVer = AccessRequestTradeUpdateUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (AccessRequestTradeUpdateUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->stData */
    {
        ret = this->stData.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessRequestTradeUpdateUserInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRequestTradeUpdateUserInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessRequestTradeUpdateUserInfo::CURRVERSION < cutVer)
    {
        cutVer = AccessRequestTradeUpdateUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (AccessRequestTradeUpdateUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->stData */
    {
        ret = this->stData.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessRequestTradeUpdateUserInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRequestTradeUpdateUserInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->stData */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stData]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stData */
    if (0 > indent)
    {
        ret = this->stData.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stData.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessRequestTradeUpdateUserInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessRequestTradeUpdateUserInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeRsponseAccessUpdateUserInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessUpdateUserInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessUpdateUserInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRsponseAccessUpdateUserInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeRsponseAccessUpdateUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRsponseAccessUpdateUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stData */
    {
        ret = this->stData.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeRsponseAccessUpdateUserInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessUpdateUserInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRsponseAccessUpdateUserInfo::CURRVERSION < cutVer)
    {
        cutVer = TradeRsponseAccessUpdateUserInfo::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRsponseAccessUpdateUserInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stData */
    {
        ret = this->stData.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeRsponseAccessUpdateUserInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRsponseAccessUpdateUserInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stData */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stData]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stData */
    if (0 > indent)
    {
        ret = this->stData.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stData.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeRsponseAccessUpdateUserInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeRsponseAccessUpdateUserInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessNotifyTradeLoginInfoReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLoginInfoReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLoginInfoReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessNotifyTradeLoginInfoReq::CURRVERSION < cutVer)
    {
        cutVer = AccessNotifyTradeLoginInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (AccessNotifyTradeLoginInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->chLoginInfoFlag */
    {
        ret = destBuf.writeInt8(this->chLoginInfoFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessNotifyTradeLoginInfoReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLoginInfoReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessNotifyTradeLoginInfoReq::CURRVERSION < cutVer)
    {
        cutVer = AccessNotifyTradeLoginInfoReq::CURRVERSION;
    }

    /* check cutversion */
    if (AccessNotifyTradeLoginInfoReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->chLoginInfoFlag */
    {
        ret = srcBuf.readInt8(this->chLoginInfoFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessNotifyTradeLoginInfoReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLoginInfoReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->chLoginInfoFlag */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[chLoginInfoFlag]", "0x%02x", this->chLoginInfoFlag);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessNotifyTradeLoginInfoReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessNotifyTradeLoginInfoReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessNotifyTradeLoginInfoResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLoginInfoResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLoginInfoResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessNotifyTradeLoginInfoResp::CURRVERSION < cutVer)
    {
        cutVer = AccessNotifyTradeLoginInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (AccessNotifyTradeLoginInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessNotifyTradeLoginInfoResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLoginInfoResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessNotifyTradeLoginInfoResp::CURRVERSION < cutVer)
    {
        cutVer = AccessNotifyTradeLoginInfoResp::CURRVERSION;
    }

    /* check cutversion */
    if (AccessNotifyTradeLoginInfoResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessNotifyTradeLoginInfoResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessNotifyTradeLoginInfoResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessNotifyTradeLoginInfoResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessNotifyTradeLoginInfoResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessTradeHeartBeatRequest::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessTradeHeartBeatRequest::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessTradeHeartBeatRequest::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessTradeHeartBeatRequest::CURRVERSION < cutVer)
    {
        cutVer = AccessTradeHeartBeatRequest::CURRVERSION;
    }

    /* check cutversion */
    if (AccessTradeHeartBeatRequest::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->tHostTime */
    {
        ret = destBuf.writeUInt64(this->tHostTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessTradeHeartBeatRequest::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessTradeHeartBeatRequest::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessTradeHeartBeatRequest::CURRVERSION < cutVer)
    {
        cutVer = AccessTradeHeartBeatRequest::CURRVERSION;
    }

    /* check cutversion */
    if (AccessTradeHeartBeatRequest::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->tHostTime */
    {
        ret = srcBuf.readUInt64(this->tHostTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessTradeHeartBeatRequest::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessTradeHeartBeatRequest::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->tHostTime */
    ret = TdrBufUtil::printTdrDateTime(destBuf, indent, separator, "[tHostTime]", this->tHostTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessTradeHeartBeatRequest::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessTradeHeartBeatRequest::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessTradeHeartBeatResponse::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessTradeHeartBeatResponse::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessTradeHeartBeatResponse::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessTradeHeartBeatResponse::CURRVERSION < cutVer)
    {
        cutVer = AccessTradeHeartBeatResponse::CURRVERSION;
    }

    /* check cutversion */
    if (AccessTradeHeartBeatResponse::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->tHostTime */
    {
        ret = destBuf.writeUInt64(this->tHostTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->tServTime */
    {
        ret = destBuf.writeUInt64(this->tServTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessTradeHeartBeatResponse::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessTradeHeartBeatResponse::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessTradeHeartBeatResponse::CURRVERSION < cutVer)
    {
        cutVer = AccessTradeHeartBeatResponse::CURRVERSION;
    }

    /* check cutversion */
    if (AccessTradeHeartBeatResponse::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->tHostTime */
    {
        ret = srcBuf.readUInt64(this->tHostTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->tServTime */
    {
        ret = srcBuf.readUInt64(this->tServTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessTradeHeartBeatResponse::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessTradeHeartBeatResponse::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->tHostTime */
    ret = TdrBufUtil::printTdrDateTime(destBuf, indent, separator, "[tHostTime]", this->tHostTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->tServTime */
    ret = TdrBufUtil::printTdrDateTime(destBuf, indent, separator, "[tServTime]", this->tServTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessTradeHeartBeatResponse::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessTradeHeartBeatResponse::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessRequestTradeClientLogin::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessRequestTradeClientLogin::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRequestTradeClientLogin::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessRequestTradeClientLogin::CURRVERSION < cutVer)
    {
        cutVer = AccessRequestTradeClientLogin::CURRVERSION;
    }

    /* check cutversion */
    if (AccessRequestTradeClientLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessRequestTradeClientLogin::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRequestTradeClientLogin::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessRequestTradeClientLogin::CURRVERSION < cutVer)
    {
        cutVer = AccessRequestTradeClientLogin::CURRVERSION;
    }

    /* check cutversion */
    if (AccessRequestTradeClientLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessRequestTradeClientLogin::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRequestTradeClientLogin::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessRequestTradeClientLogin::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessRequestTradeClientLogin::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessRequestTradeClientLogout::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessRequestTradeClientLogout::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRequestTradeClientLogout::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessRequestTradeClientLogout::CURRVERSION < cutVer)
    {
        cutVer = AccessRequestTradeClientLogout::CURRVERSION;
    }

    /* check cutversion */
    if (AccessRequestTradeClientLogout::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessRequestTradeClientLogout::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRequestTradeClientLogout::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessRequestTradeClientLogout::CURRVERSION < cutVer)
    {
        cutVer = AccessRequestTradeClientLogout::CURRVERSION;
    }

    /* check cutversion */
    if (AccessRequestTradeClientLogout::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessRequestTradeClientLogout::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRequestTradeClientLogout::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessRequestTradeClientLogout::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessRequestTradeClientLogout::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
TradeRequestAccessKickSomeone::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
TradeRequestAccessKickSomeone::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRequestAccessKickSomeone::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRequestAccessKickSomeone::CURRVERSION < cutVer)
    {
        cutVer = TradeRequestAccessKickSomeone::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRequestAccessKickSomeone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llUid */
    {
        ret = destBuf.writeInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeRequestAccessKickSomeone::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRequestAccessKickSomeone::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || TradeRequestAccessKickSomeone::CURRVERSION < cutVer)
    {
        cutVer = TradeRequestAccessKickSomeone::CURRVERSION;
    }

    /* check cutversion */
    if (TradeRequestAccessKickSomeone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llUid */
    {
        ret = srcBuf.readInt64(this->llUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
TradeRequestAccessKickSomeone::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
TradeRequestAccessKickSomeone::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llUid]", TDR_CPP_INT64_FORMAT, this->llUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
TradeRequestAccessKickSomeone::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
TradeRequestAccessKickSomeone::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessRsponseTradeKickSomeone::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessRsponseTradeKickSomeone::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRsponseTradeKickSomeone::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessRsponseTradeKickSomeone::CURRVERSION < cutVer)
    {
        cutVer = AccessRsponseTradeKickSomeone::CURRVERSION;
    }

    /* check cutversion */
    if (AccessRsponseTradeKickSomeone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessRsponseTradeKickSomeone::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRsponseTradeKickSomeone::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessRsponseTradeKickSomeone::CURRVERSION < cutVer)
    {
        cutVer = AccessRsponseTradeKickSomeone::CURRVERSION;
    }

    /* check cutversion */
    if (AccessRsponseTradeKickSomeone::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessRsponseTradeKickSomeone::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessRsponseTradeKickSomeone::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessRsponseTradeKickSomeone::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessRsponseTradeKickSomeone::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ChatRegReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ChatRegReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRegReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRegReq::CURRVERSION < cutVer)
    {
        cutVer = ChatRegReq::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRegReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->dwGameID */
    {
        ret = destBuf.writeUInt32(this->dwGameID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatRegReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRegReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRegReq::CURRVERSION < cutVer)
    {
        cutVer = ChatRegReq::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRegReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->dwGameID */
    {
        ret = srcBuf.readUInt32(this->dwGameID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatRegReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRegReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->dwGameID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwGameID]", "%u", this->dwGameID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ChatRegReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ChatRegReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ChatRegResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ChatRegResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRegResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRegResp::CURRVERSION < cutVer)
    {
        cutVer = ChatRegResp::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRegResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatRegResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRegResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatRegResp::CURRVERSION < cutVer)
    {
        cutVer = ChatRegResp::CURRVERSION;
    }

    /* check cutversion */
    if (ChatRegResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatRegResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatRegResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ChatRegResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ChatRegResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ChatCommPkgReq::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ChatCommPkgReq::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatCommPkgReq::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatCommPkgReq::CURRVERSION < cutVer)
    {
        cutVer = ChatCommPkgReq::CURRVERSION;
    }

    /* check cutversion */
    if (ChatCommPkgReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->stData */
    {
        ret = this->stData.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatCommPkgReq::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatCommPkgReq::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatCommPkgReq::CURRVERSION < cutVer)
    {
        cutVer = ChatCommPkgReq::CURRVERSION;
    }

    /* check cutversion */
    if (ChatCommPkgReq::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->stData */
    {
        ret = this->stData.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatCommPkgReq::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatCommPkgReq::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->stData */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stData]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stData */
    if (0 > indent)
    {
        ret = this->stData.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stData.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ChatCommPkgReq::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ChatCommPkgReq::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ChatCommPkgResp::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ChatCommPkgResp::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatCommPkgResp::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatCommPkgResp::CURRVERSION < cutVer)
    {
        cutVer = ChatCommPkgResp::CURRVERSION;
    }

    /* check cutversion */
    if (ChatCommPkgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iResult */
    {
        ret = destBuf.writeInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bIsLogonRetVal */
    {
        ret = destBuf.writeUInt8(this->bIsLogonRetVal);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stData */
    {
        ret = this->stData.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatCommPkgResp::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatCommPkgResp::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatCommPkgResp::CURRVERSION < cutVer)
    {
        cutVer = ChatCommPkgResp::CURRVERSION;
    }

    /* check cutversion */
    if (ChatCommPkgResp::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iResult */
    {
        ret = srcBuf.readInt32(this->iResult);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bIsLogonRetVal */
    {
        ret = srcBuf.readUInt8(this->bIsLogonRetVal);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stData */
    {
        ret = this->stData.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatCommPkgResp::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatCommPkgResp::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iResult */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResult]", "%d", this->iResult);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bIsLogonRetVal */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bIsLogonRetVal]", "0x%02x", this->bIsLogonRetVal);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stData */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stData]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stData */
    if (0 > indent)
    {
        ret = this->stData.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stData.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ChatCommPkgResp::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ChatCommPkgResp::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ChatMsgPkg::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ChatMsgPkg::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatMsgPkg::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatMsgPkg::CURRVERSION < cutVer)
    {
        cutVer = ChatMsgPkg::CURRVERSION;
    }

    /* check cutversion */
    if (ChatMsgPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llSenderUid */
    {
        ret = destBuf.writeInt64(this->llSenderUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llReceiverUid */
    {
        ret = destBuf.writeInt64(this->llReceiverUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBodyLen */
    {
        ret = destBuf.writeInt32(this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szBody */
    {
        if (0 > this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_MAX_BODY_LEN < this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szBody, this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatMsgPkg::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatMsgPkg::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatMsgPkg::CURRVERSION < cutVer)
    {
        cutVer = ChatMsgPkg::CURRVERSION;
    }

    /* check cutversion */
    if (ChatMsgPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llSenderUid */
    {
        ret = srcBuf.readInt64(this->llSenderUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llReceiverUid */
    {
        ret = srcBuf.readInt64(this->llReceiverUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBodyLen */
    {
        ret = srcBuf.readInt32(this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szBody */
    {
        if (0 > this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_MAX_BODY_LEN < this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szBody, this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatMsgPkg::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatMsgPkg::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llSenderUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llSenderUid]", TDR_CPP_INT64_FORMAT, this->llSenderUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llReceiverUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llReceiverUid]", TDR_CPP_INT64_FORMAT, this->llReceiverUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBodyLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBodyLen]", "%d", this->iBodyLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szBody */
    if (0 > this->iBodyLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_MAX_BODY_LEN < this->iBodyLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szBody]", this->iBodyLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szBody_i = 0; szBody_i < this->iBodyLen; szBody_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szBody[szBody_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ChatMsgPkg::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ChatMsgPkg::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
ChatForwardMsgPkg::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
ChatForwardMsgPkg::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatForwardMsgPkg::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatForwardMsgPkg::CURRVERSION < cutVer)
    {
        cutVer = ChatForwardMsgPkg::CURRVERSION;
    }

    /* check cutversion */
    if (ChatForwardMsgPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->llSenderUid */
    {
        ret = destBuf.writeInt64(this->llSenderUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->llReceiverUid */
    {
        ret = destBuf.writeInt64(this->llReceiverUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwChatID */
    {
        ret = destBuf.writeUInt32(this->dwChatID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bForwardFlag */
    {
        ret = destBuf.writeUInt8(this->bForwardFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBodyLen */
    {
        ret = destBuf.writeInt32(this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->szBody */
    {
        if (0 > this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_MAX_BODY_LEN < this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = destBuf.writeBytes(&this->szBody, this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatForwardMsgPkg::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatForwardMsgPkg::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || ChatForwardMsgPkg::CURRVERSION < cutVer)
    {
        cutVer = ChatForwardMsgPkg::CURRVERSION;
    }

    /* check cutversion */
    if (ChatForwardMsgPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->llSenderUid */
    {
        ret = srcBuf.readInt64(this->llSenderUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->llReceiverUid */
    {
        ret = srcBuf.readInt64(this->llReceiverUid);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwChatID */
    {
        ret = srcBuf.readUInt32(this->dwChatID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bForwardFlag */
    {
        ret = srcBuf.readUInt8(this->bForwardFlag);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBodyLen */
    {
        ret = srcBuf.readInt32(this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->szBody */
    {
        if (0 > this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (ACCESS_MAX_BODY_LEN < this->iBodyLen)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = srcBuf.readBytes(&this->szBody, this->iBodyLen);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
ChatForwardMsgPkg::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
ChatForwardMsgPkg::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->llSenderUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llSenderUid]", TDR_CPP_INT64_FORMAT, this->llSenderUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->llReceiverUid */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[llReceiverUid]", TDR_CPP_INT64_FORMAT, this->llReceiverUid);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwChatID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwChatID]", "%u", this->dwChatID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bForwardFlag */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bForwardFlag]", "0x%02x", this->bForwardFlag);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBodyLen */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBodyLen]", "%d", this->iBodyLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->szBody */
    if (0 > this->iBodyLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (ACCESS_MAX_BODY_LEN < this->iBodyLen)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[szBody]", this->iBodyLen);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t szBody_i = 0; szBody_i < this->iBodyLen; szBody_i++)
    {
        ret = destBuf.textize(" " "0x%02x", this->szBody[szBody_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
ChatForwardMsgPkg::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
ChatForwardMsgPkg::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessChatHeartBeatRequest::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessChatHeartBeatRequest::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessChatHeartBeatRequest::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessChatHeartBeatRequest::CURRVERSION < cutVer)
    {
        cutVer = AccessChatHeartBeatRequest::CURRVERSION;
    }

    /* check cutversion */
    if (AccessChatHeartBeatRequest::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->tHostTime */
    {
        ret = destBuf.writeUInt64(this->tHostTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessChatHeartBeatRequest::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessChatHeartBeatRequest::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessChatHeartBeatRequest::CURRVERSION < cutVer)
    {
        cutVer = AccessChatHeartBeatRequest::CURRVERSION;
    }

    /* check cutversion */
    if (AccessChatHeartBeatRequest::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->tHostTime */
    {
        ret = srcBuf.readUInt64(this->tHostTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessChatHeartBeatRequest::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessChatHeartBeatRequest::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->tHostTime */
    ret = TdrBufUtil::printTdrDateTime(destBuf, indent, separator, "[tHostTime]", this->tHostTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessChatHeartBeatRequest::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessChatHeartBeatRequest::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
AccessChatHeartBeatResponse::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
AccessChatHeartBeatResponse::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessChatHeartBeatResponse::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessChatHeartBeatResponse::CURRVERSION < cutVer)
    {
        cutVer = AccessChatHeartBeatResponse::CURRVERSION;
    }

    /* check cutversion */
    if (AccessChatHeartBeatResponse::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->tHostTime */
    {
        ret = destBuf.writeUInt64(this->tHostTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->tServTime */
    {
        ret = destBuf.writeUInt64(this->tServTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessChatHeartBeatResponse::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessChatHeartBeatResponse::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || AccessChatHeartBeatResponse::CURRVERSION < cutVer)
    {
        cutVer = AccessChatHeartBeatResponse::CURRVERSION;
    }

    /* check cutversion */
    if (AccessChatHeartBeatResponse::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->tHostTime */
    {
        ret = srcBuf.readUInt64(this->tHostTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->tServTime */
    {
        ret = srcBuf.readUInt64(this->tServTime);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
AccessChatHeartBeatResponse::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
AccessChatHeartBeatResponse::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->tHostTime */
    ret = TdrBufUtil::printTdrDateTime(destBuf, indent, separator, "[tHostTime]", this->tHostTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->tServTime */
    ret = TdrBufUtil::printTdrDateTime(destBuf, indent, separator, "[tServTime]", this->tServTime);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
AccessChatHeartBeatResponse::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
AccessChatHeartBeatResponse::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
GamePkgHead::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
GamePkgHead::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GamePkgHead::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GamePkgHead::CURRVERSION < cutVer)
    {
        cutVer = GamePkgHead::CURRVERSION;
    }

    /* check cutversion */
    if (GamePkgHead::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->wDataSize */
    {
        ret = destBuf.writeUInt16(this->wDataSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwChatID */
    {
        ret = destBuf.writeUInt32(this->dwChatID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->dwTradeID */
    {
        ret = destBuf.writeUInt32(this->dwTradeID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->wCommand */
    {
        ret = destBuf.writeUInt16(this->wCommand);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->bMessageVer */
    {
        ret = destBuf.writeUInt8(this->bMessageVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
GamePkgHead::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GamePkgHead::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GamePkgHead::CURRVERSION < cutVer)
    {
        cutVer = GamePkgHead::CURRVERSION;
    }

    /* check cutversion */
    if (GamePkgHead::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->wDataSize */
    {
        ret = srcBuf.readUInt16(this->wDataSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwChatID */
    {
        ret = srcBuf.readUInt32(this->dwChatID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->dwTradeID */
    {
        ret = srcBuf.readUInt32(this->dwTradeID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->wCommand */
    {
        ret = srcBuf.readUInt16(this->wCommand);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->bMessageVer */
    {
        ret = srcBuf.readUInt8(this->bMessageVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
GamePkgHead::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GamePkgHead::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->wDataSize */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[wDataSize]", "%d", this->wDataSize);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwChatID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwChatID]", "%u", this->dwChatID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->dwTradeID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[dwTradeID]", "%u", this->dwTradeID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->wCommand */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[wCommand]", "%d", this->wCommand);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->bMessageVer */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[bMessageVer]", "0x%02x", this->bMessageVer);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
GamePkgHead::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
GamePkgHead::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
GamePkgBody::construct(int64_t selector)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (ACCESS_CHAT_NET_HEART_BEAT_REQUEST == selector)
    {
        ret = this->stChatHeartBeatReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_NET_HEART_BEAT_RESPONSE == selector)
    {
        ret = this->stChatHeartBeatResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_REGISTER_CMD_REQUEST == selector)
    {
        ret = this->stChatRegReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_REGISTER_CMD_RESPONSE == selector)
    {
        ret = this->stChatRegResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_COMM_CMD_REQUEST == selector)
    {
        ret = this->stChatCommPkgReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_COMM_CMD_RSPONSE == selector)
    {
        ret = this->stChatCommPkgResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_FORWARD_MSG_PKG == selector)
    {
        ret = this->stChatForwardMsgPkg.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_SEND_MSG == selector)
    {
        ret = this->stChatMsgPkg.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_NET_HEART_BEAT_REQUEST == selector)
    {
        ret = this->stTradeHeartBeatReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_NET_HEART_BEAT_RESPONSE == selector)
    {
        ret = this->stTradeHeartBeatResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_REGISTER_CMD_REQUEST == selector)
    {
        ret = this->stTradeRegReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_REGISTER_CMD_RESPONSE == selector)
    {
        ret = this->stTradeRegResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_COMM_CMD_REQUEST == selector)
    {
        ret = this->stTradeCommPkgReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_COMM_CMD_RSPONSE == selector)
    {
        ret = this->stTradeCommPkgResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_LOGON_NOTIFY_REQUEST == selector)
    {
        ret = this->stAccessNotifyTradeLogonReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_LOGON_NOTIFY_RSPONSE == selector)
    {
        ret = this->stAccessNotifyTradeLogonResp.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_LOGIN_INFO_NOTIFY_REQUEST == selector)
    {
        ret = this->stAccessNotifyTradeLoginInfoReq.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_UPDATE_USER_INFO == selector)
    {
        ret = this->stAccessRequestTradeUpdateUserInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_UPDATE_USER_INFO == selector)
    {
        ret = this->stTradeRsponseAccessUpdateUserInfo.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_ClIENT_LOGIN == selector)
    {
        ret = this->stAccessRequestTradeClientLogin.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_ClIENT_LOGOUT == selector)
    {
        ret = this->stAccessRequestTradeClientLogout.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_REQUEST_ACCESS_KICK_SOMEONE == selector)
    {
        ret = this->stTradeRequestAccessKickSomeone.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_RSPONSE_TRADE_KICK_SOMEONE == selector)
    {
        ret = this->stAccessRsponseTradeKickSomeone.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GamePkgBody::pack(int64_t selector, char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(selector, destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GamePkgBody::pack(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer) const
{
    /* adjust cutversion */
    if (0 == cutVer || GamePkgBody::CURRVERSION < cutVer)
    {
        cutVer = GamePkgBody::CURRVERSION;
    }

    /* check cutversion */
    if (GamePkgBody::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (ACCESS_CHAT_NET_HEART_BEAT_REQUEST == selector)
    {
        ret = this->stChatHeartBeatReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_NET_HEART_BEAT_RESPONSE == selector)
    {
        ret = this->stChatHeartBeatResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_REGISTER_CMD_REQUEST == selector)
    {
        ret = this->stChatRegReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_REGISTER_CMD_RESPONSE == selector)
    {
        ret = this->stChatRegResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_COMM_CMD_REQUEST == selector)
    {
        ret = this->stChatCommPkgReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_COMM_CMD_RSPONSE == selector)
    {
        ret = this->stChatCommPkgResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_FORWARD_MSG_PKG == selector)
    {
        ret = this->stChatForwardMsgPkg.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_SEND_MSG == selector)
    {
        ret = this->stChatMsgPkg.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_NET_HEART_BEAT_REQUEST == selector)
    {
        ret = this->stTradeHeartBeatReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_NET_HEART_BEAT_RESPONSE == selector)
    {
        ret = this->stTradeHeartBeatResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_REGISTER_CMD_REQUEST == selector)
    {
        ret = this->stTradeRegReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_REGISTER_CMD_RESPONSE == selector)
    {
        ret = this->stTradeRegResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_COMM_CMD_REQUEST == selector)
    {
        ret = this->stTradeCommPkgReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_COMM_CMD_RSPONSE == selector)
    {
        ret = this->stTradeCommPkgResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_LOGON_NOTIFY_REQUEST == selector)
    {
        ret = this->stAccessNotifyTradeLogonReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_LOGON_NOTIFY_RSPONSE == selector)
    {
        ret = this->stAccessNotifyTradeLogonResp.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_LOGIN_INFO_NOTIFY_REQUEST == selector)
    {
        ret = this->stAccessNotifyTradeLoginInfoReq.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_UPDATE_USER_INFO == selector)
    {
        ret = this->stAccessRequestTradeUpdateUserInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_UPDATE_USER_INFO == selector)
    {
        ret = this->stTradeRsponseAccessUpdateUserInfo.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_ClIENT_LOGIN == selector)
    {
        ret = this->stAccessRequestTradeClientLogin.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_ClIENT_LOGOUT == selector)
    {
        ret = this->stAccessRequestTradeClientLogout.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_REQUEST_ACCESS_KICK_SOMEONE == selector)
    {
        ret = this->stTradeRequestAccessKickSomeone.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_RSPONSE_TRADE_KICK_SOMEONE == selector)
    {
        ret = this->stAccessRsponseTradeKickSomeone.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GamePkgBody::unpack(int64_t selector, const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(selector, srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GamePkgBody::unpack(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer)
{
    /* adjust cutversion */
    if (0 == cutVer || GamePkgBody::CURRVERSION < cutVer)
    {
        cutVer = GamePkgBody::CURRVERSION;
    }

    /* check cutversion */
    if (GamePkgBody::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (ACCESS_CHAT_NET_HEART_BEAT_REQUEST == selector)
    {
        ret = this->stChatHeartBeatReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_NET_HEART_BEAT_RESPONSE == selector)
    {
        ret = this->stChatHeartBeatResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_REGISTER_CMD_REQUEST == selector)
    {
        ret = this->stChatRegReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_REGISTER_CMD_RESPONSE == selector)
    {
        ret = this->stChatRegResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_COMM_CMD_REQUEST == selector)
    {
        ret = this->stChatCommPkgReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_COMM_CMD_RSPONSE == selector)
    {
        ret = this->stChatCommPkgResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_FORWARD_MSG_PKG == selector)
    {
        ret = this->stChatForwardMsgPkg.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_SEND_MSG == selector)
    {
        ret = this->stChatMsgPkg.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_NET_HEART_BEAT_REQUEST == selector)
    {
        ret = this->stTradeHeartBeatReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_NET_HEART_BEAT_RESPONSE == selector)
    {
        ret = this->stTradeHeartBeatResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_REGISTER_CMD_REQUEST == selector)
    {
        ret = this->stTradeRegReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_REGISTER_CMD_RESPONSE == selector)
    {
        ret = this->stTradeRegResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_COMM_CMD_REQUEST == selector)
    {
        ret = this->stTradeCommPkgReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_COMM_CMD_RSPONSE == selector)
    {
        ret = this->stTradeCommPkgResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_LOGON_NOTIFY_REQUEST == selector)
    {
        ret = this->stAccessNotifyTradeLogonReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_LOGON_NOTIFY_RSPONSE == selector)
    {
        ret = this->stAccessNotifyTradeLogonResp.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_LOGIN_INFO_NOTIFY_REQUEST == selector)
    {
        ret = this->stAccessNotifyTradeLoginInfoReq.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_UPDATE_USER_INFO == selector)
    {
        ret = this->stAccessRequestTradeUpdateUserInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_UPDATE_USER_INFO == selector)
    {
        ret = this->stTradeRsponseAccessUpdateUserInfo.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_ClIENT_LOGIN == selector)
    {
        ret = this->stAccessRequestTradeClientLogin.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_ClIENT_LOGOUT == selector)
    {
        ret = this->stAccessRequestTradeClientLogout.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_REQUEST_ACCESS_KICK_SOMEONE == selector)
    {
        ret = this->stTradeRequestAccessKickSomeone.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_RSPONSE_TRADE_KICK_SOMEONE == selector)
    {
        ret = this->stAccessRsponseTradeKickSomeone.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
GamePkgBody::visualize(int64_t selector, char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(selector, destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GamePkgBody::visualize(int64_t selector, TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (ACCESS_CHAT_NET_HEART_BEAT_REQUEST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stChatHeartBeatReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stChatHeartBeatReq */
        if (0 > indent)
        {
            ret = this->stChatHeartBeatReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stChatHeartBeatReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_NET_HEART_BEAT_RESPONSE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stChatHeartBeatResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stChatHeartBeatResp */
        if (0 > indent)
        {
            ret = this->stChatHeartBeatResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stChatHeartBeatResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_REGISTER_CMD_REQUEST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stChatRegReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stChatRegReq */
        if (0 > indent)
        {
            ret = this->stChatRegReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stChatRegReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_REGISTER_CMD_RESPONSE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stChatRegResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stChatRegResp */
        if (0 > indent)
        {
            ret = this->stChatRegResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stChatRegResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_COMM_CMD_REQUEST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stChatCommPkgReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stChatCommPkgReq */
        if (0 > indent)
        {
            ret = this->stChatCommPkgReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stChatCommPkgReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_COMM_CMD_RSPONSE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stChatCommPkgResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stChatCommPkgResp */
        if (0 > indent)
        {
            ret = this->stChatCommPkgResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stChatCommPkgResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (CHAT_ACCESS_FORWARD_MSG_PKG == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stChatForwardMsgPkg]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stChatForwardMsgPkg */
        if (0 > indent)
        {
            ret = this->stChatForwardMsgPkg.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stChatForwardMsgPkg.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_CHAT_SEND_MSG == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stChatMsgPkg]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stChatMsgPkg */
        if (0 > indent)
        {
            ret = this->stChatMsgPkg.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stChatMsgPkg.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_NET_HEART_BEAT_REQUEST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeHeartBeatReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeHeartBeatReq */
        if (0 > indent)
        {
            ret = this->stTradeHeartBeatReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeHeartBeatReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_NET_HEART_BEAT_RESPONSE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeHeartBeatResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeHeartBeatResp */
        if (0 > indent)
        {
            ret = this->stTradeHeartBeatResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeHeartBeatResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_REGISTER_CMD_REQUEST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeRegReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeRegReq */
        if (0 > indent)
        {
            ret = this->stTradeRegReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeRegReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_REGISTER_CMD_RESPONSE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeRegResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeRegResp */
        if (0 > indent)
        {
            ret = this->stTradeRegResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeRegResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_COMM_CMD_REQUEST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeCommPkgReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeCommPkgReq */
        if (0 > indent)
        {
            ret = this->stTradeCommPkgReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeCommPkgReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_COMM_CMD_RSPONSE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeCommPkgResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeCommPkgResp */
        if (0 > indent)
        {
            ret = this->stTradeCommPkgResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeCommPkgResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_LOGON_NOTIFY_REQUEST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stAccessNotifyTradeLogonReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stAccessNotifyTradeLogonReq */
        if (0 > indent)
        {
            ret = this->stAccessNotifyTradeLogonReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stAccessNotifyTradeLogonReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_ACCESS_LOGON_NOTIFY_RSPONSE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stAccessNotifyTradeLogonResp]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stAccessNotifyTradeLogonResp */
        if (0 > indent)
        {
            ret = this->stAccessNotifyTradeLogonResp.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stAccessNotifyTradeLogonResp.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_TRADE_LOGIN_INFO_NOTIFY_REQUEST == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stAccessNotifyTradeLoginInfoReq]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stAccessNotifyTradeLoginInfoReq */
        if (0 > indent)
        {
            ret = this->stAccessNotifyTradeLoginInfoReq.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stAccessNotifyTradeLoginInfoReq.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_UPDATE_USER_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stAccessRequestTradeUpdateUserInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stAccessRequestTradeUpdateUserInfo */
        if (0 > indent)
        {
            ret = this->stAccessRequestTradeUpdateUserInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stAccessRequestTradeUpdateUserInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_RSPONSE_ACCESS_UPDATE_USER_INFO == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeRsponseAccessUpdateUserInfo]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeRsponseAccessUpdateUserInfo */
        if (0 > indent)
        {
            ret = this->stTradeRsponseAccessUpdateUserInfo.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeRsponseAccessUpdateUserInfo.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_ClIENT_LOGIN == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stAccessRequestTradeClientLogin]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stAccessRequestTradeClientLogin */
        if (0 > indent)
        {
            ret = this->stAccessRequestTradeClientLogin.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stAccessRequestTradeClientLogin.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_REQUEST_TRADE_ClIENT_LOGOUT == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stAccessRequestTradeClientLogout]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stAccessRequestTradeClientLogout */
        if (0 > indent)
        {
            ret = this->stAccessRequestTradeClientLogout.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stAccessRequestTradeClientLogout.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (TRADE_REQUEST_ACCESS_KICK_SOMEONE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stTradeRequestAccessKickSomeone]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stTradeRequestAccessKickSomeone */
        if (0 > indent)
        {
            ret = this->stTradeRequestAccessKickSomeone.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stTradeRequestAccessKickSomeone.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (ACCESS_RSPONSE_TRADE_KICK_SOMEONE == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stAccessRsponseTradeKickSomeone]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stAccessRsponseTradeKickSomeone */
        if (0 > indent)
        {
            ret = this->stAccessRsponseTradeKickSomeone.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stAccessRsponseTradeKickSomeone.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
GamePkg::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
GamePkg::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GamePkg::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || GamePkg::CURRVERSION < cutVer)
    {
        cutVer = GamePkg::CURRVERSION;
    }

    /* check cutversion */
    if (GamePkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }
    if (GamePkgHead::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_CONFILICT;
    }

    const size_t metaSizePos = destBuf.getUsedSize();

    const size_t savedBeginPos = destBuf.getUsedSize();

    /* pack member: this->stPkgHead */
    {
        ret = this->stPkgHead.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stPkgBody */
    {
        const int64_t selector4stPkgBody = this->stPkgHead.wCommand;
        ret = this->stPkgBody.pack(selector4stPkgBody, destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* set version-indicator */
    ret = destBuf.writeUInt8((uint8_t)(cutVer), savedBeginPos + 12);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* set sizeinfo for GamePkg */
    const size_t sizeInBuf = destBuf.getUsedSize() - savedBeginPos;
    ret = destBuf.writeUInt16((uint16_t)(sizeInBuf), metaSizePos);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}


TdrError::ErrorType
GamePkg::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GamePkg::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* get sizeinfo for GamePkg */
    /* get meta's sizeinfo-value */
    uint16_t sizeInBuf;
    ret = srcBuf.readUInt16(sizeInBuf, srcBuf.getUsedSize() + 0);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* check srcBuf contains enough bytes specified by sizeinfo */
    if (srcBuf.getLeftSize() < sizeInBuf)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_SHORT_BUF_FOR_READ;
    }

    /* get versionindicator */
    uint8_t netCutVer;
    ret = srcBuf.readUInt8(netCutVer, srcBuf.getUsedSize() + 12);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* check versionindicator */
    if (GamePkg::BASEVERSION > netCutVer || netCutVer > GamePkg::CURRVERSION)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NET_CUTVER_INVALID;
    }
    if (GamePkgHead::BASEVERSION > netCutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_CONFILICT;
    }
    cutVer = netCutVer;

    /* unpack member: this->stPkgHead */
    {
        ret = this->stPkgHead.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stPkgBody */
    {
        const int64_t selector4stPkgBody = this->stPkgHead.wCommand;
        ret = this->stPkgBody.unpack(selector4stPkgBody, srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
GamePkg::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
GamePkg::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->stPkgHead */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stPkgHead]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stPkgHead */
    if (0 > indent)
    {
        ret = this->stPkgHead.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->stPkgHead.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stPkgBody */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stPkgBody]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stPkgBody */
    const int64_t selector4stPkgBody = this->stPkgHead.wCommand;
    if (0 > indent)
    {
        ret = this->stPkgBody.visualize(selector4stPkgBody, destBuf, indent, separator);
    } else
    {
        ret = this->stPkgBody.visualize(selector4stPkgBody, destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
GamePkg::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
GamePkg::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


}
