/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 2 */
/* metalib md5sum: 0822406026b27bb2b88868677cc8d59f */

/* creation time: Fri Sep 11 10:17:39 2015 */
/* tdr version: 2.6.3, build at 20150209 */

#ifndef _client_protocol_h_
#define _client_protocol_h_

#include "TdrBuf.h"
#include "TdrError.h"
#include "TdrBufUtil.h"
#include "TdrTypeUtil.h"


using tsf4g_tdr::TdrError;
using tsf4g_tdr::TdrReadBuf;
using tsf4g_tdr::TdrWriteBuf;

namespace client
{


enum
{
    ACCESS_PASSWORD_LEN = 32, // 玩家密码最大长度
    ACCESS_NAME_LEN = 16, // 玩家名称最大长度
    ACCESS_LOGON_NAME_LEN = 16, // 用户名最大长度
    ACCESS_CHAT_MSG_MAX_LEN = 500, // 聊天一条消息最大长度
    ACCESS_NICK_NAME_LEN = 32, // 用户昵称最大长度
    ACCESS_BASE_INFO_MAX_COUNT = 20, // 同时可以获取的用户基本信息的最大用户个数
    ACCESS_ACCOUNT_INFO_MAX_COUNT = 20, // 同时可以获取的用户账户信息的最大用户个数
    TRADE_TOPIC_LEN = 64, // 订单主题最大长度
    TRADE_POSINFO_LEN = 128, // 详细地址最大长度
    TRADE_PARTICULARS_LEN = 2048, // 详细描述最大长度
    TRADE_INFONUM_OF_PAG = 10, // 一页订单最多订单数量
    MAX_DISCUSS_CONTENT_LEN = 128, // 一条评论内容最大长度
    MAX_DISCUSS_NUM_ONC_PAG = 20, // 一页评论最多评论数量
    ACCESS_THIRD_PARTY_PASSWORD_LEN = 8, // 第三方用户密码长度
    TRADE_PARTICULARS_MAX_LEN = 512, // 订单描述
    ACCESS_USER_SIGNATURE_MAX_LEN = 128, // 个性签名最大长度
    TRADE_PHOTO_WALL_MAX_COUNT = 64, // 照片墙 照片最大个数
    TRADE_GIFTS_MAX_COUNT = 128, // 一页礼物最多礼物数量
    ACCESS_IN_GROUP_MAX_MEMBER = 100, // 一个群的最多人数
    ACCESS_GROUP_NAME_MAX_LEN = 64, // 群名字的最大字节数
    ACCESS_RESIDENTION_DETAIL_MAX_LEN = 64, // 详细居住地最大字节数
    OSS_TOKEN_MAX_LEN = 128, // OssToken 最大长度
    LOGIN_TOKEN_MAX_LEN = 32, // 登陆token最大长度，实际上就一直是这个最大长度
    MAX_GUARANTEE_FRIEND_COUNT = 512, // 最大可担保好友数
    TRADE_TASK_MAX_COUNT = 64, // 最大任务数量
    TRADE_TASK_NAME_MAX_LEN = 64, // 任务名称最大长度
    TRADE_TASK_DESC_MAX_LEN = 128, // 任务描述最大长度
    PHONE_CODE_MAX_LEN = 20, // 手机号最大长度
    MAX_SELECT_USER_INFO_LIST_COUNT = 20, // 查询多人账号交易信息最大人数
    MAX_CHATROOM_COUNT = 24, // 发送给客户端最大聊天室数量
    MAX_CHATROOMDATA_SIZE = 32, // 聊天室名字或ID最大长度
    MAX_LOGIN_TOKEN_LEN = 512, // aes加密登陆密钥最大长度
    MAX_USER_COMPLAINT_DESC_LEN = 512, // 投诉描述最大长度
    MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT = 20, // 查询报名者信息列表最大人数
    CITY_NAME_MAX_LEN = 64, // 城市名称最大长度
    MAX_ADDRESS_PHONE_COUNT_ONCE = 50, // 每次通讯录可以上传的最大手机号个数
    MAX_QUERY_GLOBAL_USER_INFO_COUNT = 20, // 每次可以查询的全局用户信息最大个数
    PHP_ORDERID_MAX_LEN = 48, // PHP orderid 字符串的最大长度
    MAX_SHOW_TIPS_LEN = 128, // 提示框文字最大长度
    SYSTEM_SEND_MESG_MAX_LEN = 256, // 系统发送消息的最大长度
    MAX_DISCUSS_DETAIL_CONTENT_LEN = 128, // 评论内容最大长度
    MAX_DISCUSS_DETAIL_RECORD_COUNT_ONCE = 20, // 一次能获取到的评论记录的最大条数
    CREATE_ORDER_PICTURE_MAX_NUM = 32, // 发单上传照片的最大数量
    CREATE_ORDER_AUDIO_MAX_NUM = 16, // 发单上传语音的最大数量
    MAX_DISCUSS_DETAIL_COUNT = 256, // 订单最大评论条数
    REPORT_DESC_MAX_LEN = 1024, // 举报描述最大长度
    PLAYERS_NEARBY_MAX_COUNT = 50, // 附近的人最大数量
    MAX_DUE_ORDER_COUNT = 32, // 最大带评价订单个数
    MAX_COLLEGE_NAME_LEN = 64, // 学校名称最大长度
    MAX_PROFESSION_NAME_LEN = 64, // 专业最大长度
    MAX_OCCUPATION_NAME_LEN = 64, // 职业名称最大长度
    ACCESS_THIRDPARTY_PAY_TOKEN_MAX_LEN = 128, // 第三方支付token最大长度
    TRADE_APP_VERSION_MAX_LEN = 32, // app版本最大长度
    SECURITY_INFO_MAX_LEN = 2048, // 支付宝安全性信息最大长度
    TRADE_ITEM_NAME_MAX_LEN = 128, // 购买的商品名称最大长度
    TRADE_BUYER_PAY_ACCOUNT_MAX_LEN = 128, // 买家用户的支付宝或者微信账号 最大长度
    OFFLINE_MESG_MAX_COUNT = 16, // 用户离线信息的最大条目数量（与offline_mesg表格的mesg_info对应）
};


enum MsgPromptMode // 消息提示方式,和客户端公用
{
    MSGPROMPTMODE_POPUP_MSG_BOX = 1, // 弹框提示消息
};


enum BusErrCode // 一般业务类型错误码定义
{
    ERR_USER_NOT_REGISTER = -1003, // 用户未注册
    ERR_USER_PWD_INVALID = -1002, // 密码错误
    ERR_USER_NAME_INVALID = -1001, // 用户名错误
};


enum ItemType // 购买的物品类型,和客户端公用
{
    ITEM_TYPE_HONESTY_GOLD = 1, // 诚信金
    ITEM_TYPE_YOUWO_COIN = 2, // 有我币
    ITEM_TYPE_GAME_CURRENCY = 3, // 游戏币
    ITEM_TYPE_TOUCH_STONE = 4, // 试金石
};


enum PayWay // 支付方式,和客户端公用
{
    PAYWAY_WECHAT_PAY = 1, // 微信支付
    PAYWAY_ALIPAY = 2, // 支付宝支付
};


enum ValueChangeType // 值的改变方式，增或者减
{
    VALUE_CHANGE_TYPE_DECREASE = 0, // 减少
    VALUE_CHANGE_TYPE_INCREASE = 1, // 增加
};


enum OrderTipsType // 订单打赏方式
{
    TIPS_TYPE_OFFLINE = 0, // 线下打赏方式
    TIPS_TYPE_ONLINE = 1, // 线上打赏方式
};


enum PaymentType // 充值模块的支付类型,和客户端公用
{
    PAYMENT_TYPE_BUY = 1, // 购买商品
    PAYMENT_TYPE_WITHDRAW = 2, // 提取商品
};


enum WithdrawAccountType // 提现账户类型
{
    ACCOUNT_TYPE_ZHIFUBAO = 1, // 支付宝账户
    ACCOUNT_TYPE_WEIXIN = 2, // 微信账户
};


enum AddressPhoneFilterType // 电话结果过滤选项
{
    ADDRESS_PHONE_FILTER_TYPE_NONE = 0, // 不过滤
    ADDRESS_PHONE_FILTER_TYPE_INVALID_UID = 1, // 去掉uid 为0 的
};


enum OrderSubType // 订单的子类型（对应兴趣的二级类别）,服务端和客户端公用
{
    ORDER_SUBTYPE_LEG_WORK = 0, // 跑腿   (要用1 左移 0)
    ORDER_SUBTYPE_HOUSE_HOLD = 1, // 家政   (要用1 左移 1)
    ORDER_SUBTYPE_STUDY = 2, // 学习   (要用1 左移 2)
    ORDER_SUBTYPE_PARTY = 3, // 聚会   (要用1 左移 3)
    ORDER_SUBTYPE_SPORT = 4, // 运动   (要用1 左移 4)
    ORDER_SUBTYPE_SING_SONGS = 5, // K歌   (要用1 左移 5)
    ORDER_SUBTYPE_MODEL = 6, // 模特   (要用1 左移 6)
    ORDER_SUBTYPE_TOUR_GUIDE = 7, // 导游   (要用1 左移 7)
    ORDER_SUBTYPE_TUTOR = 8, // 家教   (要用1 左移 8)
    ORDER_SUBTYPE_MAKE_FRIEND = 9, // 交友   (要用1 左移 9)
    ORDER_SUBTYPE_LOOKFOR_SOMEONE = 10, // 找人   (要用1 左移 10)
    ORDER_SUBTYPE_RECRUITMENT = 11, // 招聘   (要用1 左移 11)
    ORDER_SUBTYPE_TRANSPORT = 12, // 交通   (要用1 左移 12)
    ORDER_SUBTYPE_BOOK_AGENT = 13, // 预订   (要用1 左移 13)
    ORDER_SUBTYPE_HEALTH_CARE = 14, // 养生健康  (要用1 左移 14)
    ORDER_SUBTYPE_QUESTION_SOLUTION = 15, // 答疑解惑  (要用1 左移 15)
};


enum OrderMainType // 订单的主类型（对应兴趣的一级类别）,服务端和客户端公用
{
    ORDER_MAIN_TYPE_SERVICE_AROUND = 0, // 身边服务（跑腿）
    ORDER_MAIN_TYPE_LOCAL_ENTERTAINMENT = 1, // 同城娱乐（活动聚会）
    ORDER_MAIN_TYPE_PART_TIME_JOB = 2, // 兼职
    ORDER_MAIN_TYPE_MAKE_FRIEND = 3, // 人脉(或者交友)
    ORDER_MAIN_TYPE_TRAVEL = 4, // 旅游
    ORDER_MAIN_TYPE_QUESTION_AND_ANSWER = 5, // 问答
    ORDER_MAIN_TYPE_GENIUS_AREA = 6, // 大神区
    ORDER_MAIN_TYPE_RENT_AND_SALE = 7, // 租售
    ORDER_MAIN_TYPE_MAX = 8, // 订单的主类型最大值
};


enum OrderSortType // 首页订单排序类型,服务端和客户端公用
{
    ORDER_SORT_TYPE_LATEST_CREATED = 0, // 最新发的单
    ORDER_SORT_TYPE_NEAREST_ORDER = 1, // 离我最近
    ORDER_SORT_TYPE_MAX_UB = 2, // 悬赏现金（有我币）最高
    ORDER_SORT_TYPE_MAX_TOUCH_STONE = 3, // 悬赏试金石最高
    ORDER_SORT_TYPE_MAX = 4, // 订单的主类型最大值
};


enum OrderTimeSpanType // 首页订单查询 订单时间跨度类型,服务端和客户端公用
{
    ORDER_TIME_SPAN_TYPE_3MIN = 0, // 订单时间跨度类型--3分钟间隔
    ORDER_TIME_SPAN_TYPE_5MIN = 1, // 订单时间跨度类型--5分钟间隔
    ORDER_TIME_SPAN_TYPE_10MIN = 2, // 订单时间跨度类型--10分钟间隔
    ORDER_TIME_SPAN_TYPE_MAX = 3, // 订单时间跨度类型最大值
};


enum PayType // 接发单的支付类型,服务端和客户端公用
{
    PAYTYPE_ALL_TYPE = 0, // 所有类型
    PAYTYPE_CASH_ON_DELIVERY = 1, // 货到付款
    PAYTYPE_YOUR_TREAT = 2, // 你请客
    PAYTYPE_MY_TREAT = 3, // 我请客
    PAYTYPE_AA_STYLE = 4, // AA制
    PAYTYPE_ONLINE_PAYMENT = 5, // 在线支付
};


enum MoneyType // 发单时选择支付的币种,服务端和客户端公用
{
    MONEY_TYPE_ALL = 0, // 所有币种
    MONEY_TYPE_TOUCH_STONE = 1, // 试金石、钻石
    MONEY_TYPE_UB = 2, // 有我币
};


enum VersionType // 版本类型,服务端和客户端公用
{
    VERSION_TYPE_ALL = 0, // 所有类型
    VERSION_TYPE_SOCIETY = 1, // 社会版
    VERSION_TYPE_CAMPUS = 2, // 校园版
    VERSION_TYPE_NONE = 3, // 无
};


enum ValidOrder // 订单筛选  是否选择了有效订单选项
{
    VALID_ORDER_ALL = 0, // 所有订单
    VALID_ORDER_TRUE = 1, // 选择了有效订单
};


enum TimeType // 搜索时间段的类型的TimeType常量定义
{
    TIME_TYPE_ALL = 0, // 所有时间段
    TIME_TYPE_TODAY = 1, // 今天的单
    TIME_TYPE_YESTERDAY = 2, // 昨天的单
    TIME_TYPE_IN_ONE_WEEK = 3, // 一周以内的
};


enum DistanceType // 搜索距离的类型定义的DistanceType常量定义
{
    DISTANCE_TYPE_ALL = 0, // 不限距离
    DISTANCE_ONE_KM = 1, // 1km范围内
    DISTANCE_TEN_KM = 2, // 10km范围内
};


enum TaskAwardType // 任务奖励类型
{
    TASK_AWARD_TYPE_VALIDATE_GOLD = 10001, // 试金石
    TASK_AWARD_TYPE_EXP = 10002, // 经验值
    TASK_AWARD_TYPE_YOUWO_GOLD = 10003, // 有我币(现金)
};


enum DiscussRecordStatus // 评价记录状态
{
    DISCUSS_RECORDE_STATUS_NORMAL = 0, // 正常状态
    DISCUSS_RECORDE_STATUS_DELETED = 1, // 被删除状态
};


enum ADMIN_USER_ORDER_OP_TYPE // 订单操作通知小秘书 动作类型
{
    ADMIN_USER_ORDER_OP_APPLY_ORDER_CANCEL = 0, // 取消报名
    ADMIN_USER_ORDER_OP_APPLY_ORDER_OK = 1, // 报名
    ADMIN_USER_ORDER_OP_RETURN_CREATER_MONEY = 2, // 订单悬赏返还
};


enum Cmds
{
    CMD_HEARTBEAT_REQ = 1, // 心跳请求
    CMD_HEARTBEAT_RESP = 2, // 心跳请求返回
    CMD_KICKOFF_USER_NOTIFY = 3, // 服务器踢掉用户通知给客户端
    CMD_VC_CODE_REQ = 1003, // 注册验证码请求
    CMD_VC_CODE_RESP = 1004, // 注册验证码请求返回
    CMD_REGISTER_REQ = 1005, // 注册账号请求
    CMD_REGISTER_RESP = 1006, // 注册账号返回
    CMD_NAME_LOGON_REQ = 1007, // 用户名登录请求
    CMD_NAME_LOGON_RESP = 1008, // 用户名登录返回
    CMD_BASE_INFO_REQ = 1009, // 用户基本信息请求
    CMD_BASE_INFO_RESP = 1010, // 用户基本信息应答
    CMD_UPDATE_BASE_INFO_REQ = 1011, // 用户更新基本信息请求
    CMD_UPDATE_BASE_INFO_RESP = 1012, // 用户基更新本信息应答
    CMD_BASE_INFO_LIST_REQ = 1013, // 用户批量请求基本信息
    CMD_BASE_INFO_LIST_RESP = 1014, // 用户批量请求基本信息应答
    CMD_UPDATE_BIRTHDAY_REQ = 1015, // 用户更新出生日期
    CMD_UPDATE_BIRTHDAY_RESP = 1016, // 用户更新出生日期应答
    CMD_UPDATE_NICKNAME_REQ = 1017, // 用户更新昵称
    CMD_UPDATE_NICKNAME_RESP = 1018, // 用户更新昵称应答
    CMD_UPDATE_OCCUPATION_REQ = 1019, // 用户更新职业
    CMD_UPDATE_OCCUPATION_RESP = 1020, // 用户更新职业应答
    CMD_UPDATE_RESIDENTION_REQ = 1021, // 用户更新居住地
    CMD_UPDATE_RESIDENTION_RESP = 1022, // 用户更新居住地应答
    CMD_UPDATE_SIGNATURE_REQ = 1023, // 用户更新个性签名
    CMD_UPDATE_SIGNATURE_RESP = 1024, // 用户更新个性签名应答
    CMD_UPDATE_PORTRAIT_REQ = 1025, // 用户更新头像
    CMD_UPDATE_PORTRAIT_RESP = 1026, // 用户更新头像应答
    CMD_UPDATE_GENDER_REQ = 1027, // 用户更新性别
    CMD_UPDATE_GENDER_RESP = 1028, // 用户更新性别应答
    CMD_USER_ACCOUNT_INFO_REQ = 1029, // 用户账户信息请求
    CMD_USER_ACCOUNT_INFO_RESP = 1030, // 用户账户信息应答
    CMD_CG_UPDATE_RESIDENTION_DETAIL_REQ = 1031, // 用户更新居住地详细信息
    CMD_GC_UPDATE_RESIDENTION_DETAIL_RESP = 1032, // 用户更新居住地详细信息应答
    CMD_CLIENT_PHONE_QUERY_USERID_REQ = 1033, // 根据手机号请求uid
    CMD_CLIENT_PHONE_QUERY_USERID_RESP = 1034, // 根据手机号请求uid响应
    CMD_RETRIEVE_CODE_REQ = 1035, // 获取修改密码手机验证码请求
    CMD_RETRIEVE_CODE_RESP = 1036, // 获取修改密码手机验证码响应
    CMD_VALIDATE_RETRIEVE_CODE_REQ = 1037, // 验证获取的手机验证码请求
    CMD_VALIDATE_RETRIEVE_CODE_RESP = 1038, // 验证获取的手机验证码请求响应
    CMD_MODIFY_PASSWORD_REQ = 1039, // 修改密码请求
    CMD_MODIFY_PASSWORD_RESP = 1040, // 修改密码响应
    CMD_TOKEN_LOGON_REQ = 1041, // Token登陆请求
    CMD_TOKEN_LOGON_RESP = 1042, // Token登陆响应
    CMD_ACCOUNT_INFO_LIST_REQ = 1043, // 用户批量请求账户信息
    CMD_ACCOUNT_INFO_LIST_RESP = 1044, // 用户批量请求账户信息应答
    CMD_ADDRESS_PHONE_QUERY_REQ = 1045, // 用户批量请求手机号码对应的uid
    CMD_ADDRESS_PHONE_QUERY_RESP = 1046, // 用户批量请求手机号码对应的uid响应
    CLIENT_REQUEST_ACCESS_NAME_LOGIN = 1047, // 用户名密码登录请求
    CLIENT_REQUEST_ACCESS_TOKEN_LOGIN = 1048, // token登录请求
    ACCESS_RESPONSE_CLIENT_NAME_LOGIN = 1049, // 用户名密码登录应答
    CLIENT_REQUEST_ACCESS_TRADE_MIN = 2000, // 客户端请求网关交易服务器最小协议号(不包含本身)
    CLIENT_REQUEST_ACCESS_TRADE_CREATE_ORDER = 2007, // 客户端请求网关交易服务器创建订单
    TRADE_RSPONSE_ACCESS_CLIENT_CREATE_ORDER = 2008, // 交易服务器回应网关客户端创建订单
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_BASIC_INFO = 2009, // 客户端请求网关交易服务器查询订单基本信息
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_BASIC_INFO = 2010, // 交易服务器回应网关客户端查询订单基本信息
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_SPECIFIC_INFO = 2011, // 客户端请求网关交易服务器查询订单详细信息
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_ORDER_SPECIFIC_INFO = 2012, // 交易服务器回应网关客户端查询订单详细信息
    CLIENT_REQUEST_ACCESS_TRADE_APPLY_ORDER = 2013, // 客户端请求网关交易服务器报名参与活动
    TRADE_RSPONSE_ACCESS_CLIENT_APPLY_ORDER = 2014, // 交易服务器回应网关客户端报名参与活动
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYER = 2015, // 客户端请求网关交易服务器选择参与对象
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYER = 2016, // 交易服务器回应网关客户端选择参与对象
    CLIENT_CONFIRM_OR_CANCEL_ORDER_REQ = 2017, // 客户端确认订单或者取消订单 请求
    CLIENT_CONFIRM_OR_CANCEL_ORDER_RESP = 2018, // 客户端确认订单或者取消订单 服务器响应
    CLIENT_CREATED_ORDER_BRIEF_REQ = 2019, // 客户端查询创建过的订单 请求
    CLIENT_CREATED_ORDER_BRIEF_RESP = 2020, // 客户端查询创建过的订单 应答
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_DISCUSS = 2021, // 客户端请求网关交易服务器查看评论信息
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_DISCUSS = 2022, // 交易服务器回应网关客户端查看评论信息
    CLIENT_REQUEST_ACCESS_TRADE_CREATE_DISCUSS = 2023, // 客户端请求网关交易服务器发表评论
    TRADE_RSPONSE_ACCESS_CLIENT_CREATE_DISCUSS = 2024, // 交易服务器回应网关客户端发表评论
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_PHOTO_WALL = 2025, // 客户端请求网关交易服务器获取照片墙信息
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PHOTO_WALL = 2026, // 交易服务器回应网关客户端获取照片墙信息
    CLIENT_REQUEST_ACCESS_TRADE_UPDATE_PHOTO_WALL = 2027, // 客户端请求网关交易服务器更新照片墙信息
    TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_PHOTO_WALL = 2028, // 交易服务器回应网关客户端更新照片墙信息
    CLIENT_REQUEST_ACCESS_TRADE_REGISTER_TRADEINFO = 2029, // 客户端请求网关交易服务器注册账号交易信息
    TRADE_RSPONSE_ACCESS_CLIENT_REGISTER_TRADEINFO = 2030, // 交易服务器回应网关客户端注册账号交易信息
    CLIENT_REQUEST_ACCESS_TRADE_UPDATE_ARGUE = 2031, // 客户端请求网关交易服务器对订单进行评价
    TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_ARGUE = 2032, // 交易服务器回应网关客户端对订单进行评价
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_TRADEUSERINFO = 2033, // 客户端请求网关交易服务器查询账号交易信息
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TRADEUSERINFO = 2034, // 交易服务器回应网关客户端查询账号交易信息
    CLIENT_REQUEST_ACCESS_TRADE_UPDATE_SERVICE = 2035, // 客户端请求网关交易服务器更新我的服务
    TRADE_RSPONSE_ACCESS_CLIENT_UPDATE_SERVICE = 2036, // 交易服务器回应网关客户端更新我的服务
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTS = 2037, // 客户端请求网关交易服务器查看礼物信息
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTS = 2038, // 交易服务器回应网关客户端查看礼物信息
    CLIENT_REQUEST_ACCESS_TRADE_PRESENT_GIFTS = 2039, // 客户端请求网关交易服务器赠送礼物
    TRADE_RSPONSE_ACCESS_CLIENT_PRESENT_GIFTS = 2040, // 交易服务器回应网关客户端赠送礼物
    CMD_CT_BUY_CAR_REQ = 2041, // 买车
    CMD_TC_BUY_CAR_RESP = 2042, // 买车响应
    CMD_CT_OPERATE_CAR_REQ = 2043, // 操作车
    CMD_TC_OPERATE_CAR_RESP = 2044, // 操作车响应
    CT_APPLY_ORDER_BRIEF_REQ = 2045, // 客户端请求订单服务器 申请过的订单简要信息
    TC_APPLY_ORDER_BRIEF_RESP = 2046, // 订单服务器响应 客户端 申请过的订单简要信息
    CMD_CT_GUARANTEE_FRIEND_REQ = 2047, // 客户端请求担保好友
    CMD_TC_GUARANTEE_FRIEND_RESP = 2048, // 客户端请求担保好友响应
    CMD_CT_CANCEL_GUARANTEE_FRIEND_REQ = 2049, // 客户端请求取消担保好友
    CMD_TC_CANCEL_GUARANTEE_FRIEND_RESP = 2050, // 客户端请求取消担保好友响应
    CMD_CT_QUERY_GUARANTEE_FRIEND_REQ = 2051, // 客户端请求查询担保好友
    CMD_TC_QUERY_GUARANTEE_FRIEND_RESP = 2052, // 客户端请求查询担保好友响应
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_TASKINFO = 2053, // 客户端请求网关交易服务器查询任务信息
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_TASKINFO = 2054, // 交易服务器回应网关客户端查询任务信息
    CLIENT_REQUEST_ACCESS_TRADE_SELL_GIFTS = 2055, // 客户端请求网关交易服务器出售礼物
    TRADE_RSPONSE_ACCESS_CLIENT_SELL_GIFTS = 2056, // 交易服务器回应网关客户端出售礼物
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_USERINFOLIST = 2057, // 客户端请求网关交易服务器查询多人账号交易信息
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_USERINFOLIST = 2058, // 交易服务器回应网关客户端查询多人账号交易信息
    CLIENT_REQUEST_ACCESS_TRADE_UPLEVEL_VIP = 2059, // 客户端请求网关交易服务器升级vip等级
    TRADE_RSPONSE_ACCESS_CLIENT_UPLEVEL_VIP = 2060, // 交易服务器回应网关客户端升级vip等级
    CLIENT_REQUEST_ACCESS_TRADE_GET_CHATROOMINFOLIST = 2061, // 客户端请求网关交易服务器获取当前火热聊天室信息列表
    TRADE_RSPONSE_ACCESS_CLIENT_GET_CHATROOMINFOLIST = 2062, // 交易服务器回应网关客户端获取当前火热聊天室信息列表
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_GIFTSPAGIDLIST = 2063, // 客户端请求网关交易服务器查询礼物页ID列表
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_GIFTSPAGIDLIST = 2064, // 交易服务器回应网关客户端查询礼物页ID列表
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_IDENTITYBANK = 2065, // 客户端请求网关交易服务器查询身份证银行卡信息
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_IDENTITYBANK = 2066, // 交易服务器回应网关客户端查询身份证银行卡信息
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_VISITORSLIST = 2067, // 客户端请求网关交易服务器查询最近访问列表
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_VISITORSLIST = 2068, // 交易服务器回应网关客户端查询最近访问列表
    CMD_CT_QUERY_SELF_GUARANTEE_REQ = 2069, // 客户端请求 自己担保的人
    CMD_TC_QUERY_SELF_GUARANTEE_RESP = 2070, // 客户端请求 自己担保的人响应
    CMD_CT_QUERY_PROMISE_SELF_REQ = 2071, // 客户端请求查询 担保自己的人
    CMD_TC_QUERY_PROMISE_SELF_RESP = 2072, // 客户端请求查询担保自己的人响应
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_PARTICULARS = 2073, // 客户端请求网关交易服务器查询详细描述
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_PARTICULARS = 2074, // 交易服务器回应网关客户端查询详细描述
    CMD_CT_ORDER_STATE_INFO_LIST_REQ = 2075, // 客户端请求交易服务器批量查询订单状态信息
    CMD_TC_ORDER_STATE_INFO_LIST_RESP = 2076, // 交易服务器回应客户端查询结果
    CMD_CT_USER_COMPLAINT_REQ = 2077, // 投诉请求
    CMD_TC_USER_COMPLAINT_RESP = 2078, // 投诉请求响应
    CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE = 2079, // 客户端请求网关交易服务器完成订单
    TRADE_RSPONSE_ACCESS_CLIENT_ORDER_DONE = 2080, // 交易服务器回应网关客户端完成订单
    CLIENT_REQUEST_ACCESS_TRADE_ORDER_CLOSEDOWN = 2081, // 客户端请求网关交易服务器关闭订单
    TRADE_RSPONSE_ACCESS_CLIENT_ORDER_CLOSEDOWN = 2082, // 交易服务器回应网关客户端关闭订单
    CMD_AT_ONLINE_USER_COUNT = 2083, // 网关通知交易服务器在线人数
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_APPLYERUSERINFOLIST = 2084, // 客户端请求网关交易服务器查询报名者信息列表
    TRADE_RSPONSE_ACCESS_CLIENT_SELECT_APPLYERUSERINFOLIST = 2085, // 交易服务器回应网关客户端查询报名者信息列表
    CLIENT_NOTIFY_TRADE_USER_GIS_INFO = 2087, // 客户端通知交易服务器用户的地理位置信息，更新到LBS
    TRADE_RSPONSE_CLIENT_USER_GIS_INFO = 2088, // 交易服务器回应客户端更新用户的地理位置信息结果
    CMD_CT_HOME_ORDER_INFO_REQ = 2089, // 首页订单信息请求
    CMD_TC_HOME_ORDER_INFO_RESP = 2090, // 首页订单信息响应
    CLIENT_REQUEST_ACCESS_TRADE_SELECT_ORDER_DETAILS_INFO = 2091, // 客户端请求网关交易服务器查询订单详细信息(合并界面协议)
    TRADE_RESPONSE_ACCESS_CLIENT_SELECT_ORDER_DETAILS_INFO = 2092, // 交易服务器回应网关客户端查询订单详细信息(合并界面协议)
    CLIENT_REQUEST_ACCESS_TRADE_COMPILE_USER_INFO = 2093, // 客户端请求网关交易服务器编辑资料
    TRADE_RESPONSE_ACCESS_CLIENT_COMPILE_USER_INFO = 2094, // 交易服务器回应网关客户端编辑资料
    CMD_CT_GLOBAL_USER_INFO_REQ = 2097, // 全局用户信息请求
    CMD_TC_GLOBAL_USER_INFO_RESP = 2098, // 全局用户信息响应
    CLIENT_REQUEST_ACCESS_TRADE_GET_TASK_AWARD = 2101, // 客户端请求网关交易服务器获取任务奖励
    TRADE_RESPONSE_ACCESS_CLIENT_GET_TASK_AWARD = 2102, // 交易服务器回应网关客户端获取任务奖励
    CMD_SYSTEM_SEND_MESG = 2104, // 系统发送消息
    CMD_CT_QUERY_DISCUSS_DETAIL_REQ = 2105, // 查询评论信息
    CMD_TC_QUERY_DISCUSS_DETAIL_RESP = 2106, // 查询评论信息响应
    CMD_CT_DELETE_DISCUSS_DETAIL_REQ = 2107, // 删除评论请求
    CMD_TC_DELETE_DISCUSS_DETAIL_RESP = 2108, // 删除评论响应
    CMD_CT_DISCUSS_ORDER_REQ = 2109, // 发表评论请求
    CMD_TC_DISCUSS_ORDER_RESP = 2110, // 发表评论响应
    CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_APPLYER = 2111, // 客户端请求网关交易服务器接单人完成订单
    TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_APPLYER = 2112, // 交易服务器回应网关客户端接单人完成订单
    CLIENT_REQUEST_ACCESS_TRADE_ORDER_DONE_CREATER = 2113, // 客户端请求网关交易服务器发单人完成订单
    TRADE_RESPONSE_ACCESS_CLIENT_ORDER_DONE_CREATER = 2114, // 交易服务器回应网关客户端发单人完成订单
    CMD_CT_REPORT_INFO_REQ = 2115, // 举报请求
    CMD_TC_REPORT_INFO_RESP = 2116, // 举报响应
    CMD_PLAYERS_NEARBY_REQ = 2117, // 附近的人请求
    CMD_PLAYERS_NEARBY_RESP = 2118, // 附近的人响应
    CLIENT_REQUEST_ACCESS_TRADE_MAKE_REPUTATION = 2119, // 客户端请求网关交易服务器给某人点赞
    TRADE_RESPONSE_ACCESS_CLIENT_MAKE_REPUTATION = 2120, // 交易服务器回应网关客户端给某人点赞
    CLIENT_REQUEST_ACCESS_TRADE_MAX = 3000, // 客户端请求网关交易服务器最大协议号(不包含本身)
    CMD_CHAT_LOGON_REQ = 3001, // 用户登录聊天服务器请求
    CMD_CHAT_LOGON_RESP = 3002, // 用户登录聊天服务器返回
    CMD_CHAT_SEND_MSG_REQ = 3003, // 用户发聊天消息请求
    CMD_CHAT_SEND_MSG_RESP = 3004, // 用户发聊天消息返回
    CMD_CHATSVR_FORWARD_MSG = 3005, // 聊天服务器转发聊天消息
    CMD_ADD_FRIEND_REQ = 3007, // 用户添加好友请求
    CMD_ADD_FRIEND_RESP = 3008, // 用户添加好友应答
    CMD_DELETE_FRIEND_REQ = 3009, // 用户删除好友请求
    CMD_DELETE_FRIEND_RESP = 3010, // 用户删除好友应答
    CMD_JOIN_GROUP_REQ = 3011, // 用户加入群请求
    CMD_JOIN_GROUP_RESP = 3012, // 用户加入群应答
    CMD_SECEDE_GROUP_REQ = 3013, // 用户退出群请求
    CMD_SECEDE_GROUP_RESP = 3014, // 用户退出群应答
    CLIENT_GET_THIRDPARTY_PAY_TOKEN_REQ = 4001, // 客户端请求获取第三方支付token
    CLIENT_GET_THIRDPARTY_PAY_TOKEN_RESP = 4002, // 网关回应 客户端请求获取第三方支付token
    CLIENT_GENERATE_PAY_ORDER_REQ = 4003, // 生成支付订单 请求
    CLIENT_GENERATE_PAY_ORDER_RESP = 4004, // 生成支付订单 响应
    TRADE_NOTIFY_CLIENT_PAY_RESULT = 4006, // 通知支付结果给客户端
    CLIENT_EXCHANGE_STONE_OR_CURRENCY_REQ = 4007, // 客户端请求用有我币兑换游戏币或者试金石 请求
    CLIENT_EXCHANGE_STONE_OR_CURRENCY_RESP = 4008, // 客户端请求用有我币兑换游戏币或者试金石 响应
    CLIENT_WITHDRAW_HONESTY_GOLD_REQ = 4009, // 客户端请求提取诚信金 请求
    CLIENT_WITHDRAW_HONESTY_GOLD_RESP = 4010, // 客户端请求提取诚信金 响应
};


enum eORDER_STATUS // 订单状态
{
    ORDER_STATUS_WAIT_APPLY = 0, // 等待报名
    ORDER_STATUS_WAIT_DONE_APPLYER = 1, // 等待接单人执行完成
    ORDER_STATUS_WAIT_DONE_CREATER = 2, // 等待发单人确定完成
    ORDER_STATUS_WAIT_ARGUE = 3, // 订单执行完成等待评论
    ORDER_STATUS_OVER = 4, // 订单完结
    ORDER_STATUS_CONTESTED = 5, // 投诉
    ORDER_STATUS_CLOSEDOWN = 6, // 已经被单主关闭
};


enum eAPPLY_STATUS // 订单报名者状态
{
    APPLY_STATUS_APPLY = 0, // 刚刚报名
    APPLY_STATUS_SELECT = 1, // 已被选中
};


enum eAPPLY_STATUS_2_CLIENT // 客户端查看到的报名状态
{
    APPLY_STATUS_2_CLIENT_NOR = 0, // 可报名
    APPLY_STATUS_2_CLIENT_SELF = 1, // 自己的订单
    APPLY_STATUS_2_CLIENT_APPLYED = 2, // 已经报名
    APPLY_STATUS_2_CLIENT_SELECTED = 3, // 自己已经被选中
    APPLY_STATUS_2_CLIENT_HASSELECTED = 4, // 已经选中其他人或者订单已经完成(自己没报名)
};


enum eAPPLY_REQUEST_TYPE // 申请报名状态
{
    APPLY_REQUEST_CANCEL = 0, // 取消报名
    APPLY_REQUEST_APPLY = 1, // 报名
};


enum eCONFIRM_CANCEL_ORDER_TYPE // 确认或取消订单类型
{
    CONFIRM_CANCEL_ORDER_CONFIRM = 0, // 被选中玩家确认服务
    CONFIRM_CANCEL_ORDER_CANCEL = 1, // 被选中玩家取消服务
};


enum eREQUEST_ORDER_DONE_TYPE // 请求完成订单类型
{
    REQUEST_ORDER_DONE_NOR = 0, // 普通请求完成
    REQUEST_ORDER_DONE_FORCE = 1, // 强制请求完成
};


#pragma pack(1)


class CmdKickoffUserNotify
{
    public: /* members */
        int8_t chPlaceholder; // 占位符，消息体不能为空

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CmdKickoffUserNotify          tagCmdKickoffUserNotify;
typedef       CmdKickoffUserNotify             CMDKICKOFFUSERNOTIFY;
typedef       CmdKickoffUserNotify*          LPCMDKICKOFFUSERNOTIFY;
typedef const CmdKickoffUserNotify*         LCPCMDKICKOFFUSERNOTIFY;


class ClientVcCodeReq
{
    public: /* members */
        int64_t llPhoneNum; // 电话号码

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientVcCodeReq          tagClientVcCodeReq;
typedef       ClientVcCodeReq             CLIENTVCCODEREQ;
typedef       ClientVcCodeReq*          LPCLIENTVCCODEREQ;
typedef const ClientVcCodeReq*         LCPCLIENTVCCODEREQ;


class ClientVcCodeResp
{
    public: /* members */
        int32_t iResult; // 结果
        int32_t iIsRegister; // 是否已经被注册 0表示未注册 1表示已经注册

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientVcCodeResp          tagClientVcCodeResp;
typedef       ClientVcCodeResp             CLIENTVCCODERESP;
typedef       ClientVcCodeResp*          LPCLIENTVCCODERESP;
typedef const ClientVcCodeResp*         LCPCLIENTVCCODERESP;


class ClientRegisterReq
{
    public: /* members */
        int64_t llPhoneNum; // 电话号码
        int32_t iVcCode; // 验证码
        int32_t iNameLen; // 名称长度
        char szName[ACCESS_NAME_LEN]; // 名称
        int32_t iPwLen; // 密码长度
        char szPassWord[ACCESS_PASSWORD_LEN]; // 密码
        int64_t llPromotionCode; // 推广码
        int32_t iRegister_channel; // 注册渠道号

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRegisterReq          tagClientRegisterReq;
typedef       ClientRegisterReq             CLIENTREGISTERREQ;
typedef       ClientRegisterReq*          LPCLIENTREGISTERREQ;
typedef const ClientRegisterReq*         LCPCLIENTREGISTERREQ;


class ClientRegisterResp
{
    public: /* members */
        int64_t llUid; // 用户ID
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRegisterResp          tagClientRegisterResp;
typedef       ClientRegisterResp             CLIENTREGISTERRESP;
typedef       ClientRegisterResp*          LPCLIENTREGISTERRESP;
typedef const ClientRegisterResp*         LCPCLIENTREGISTERRESP;


class ClientRetrieveCodeReq
{
    public: /* members */
        int64_t llPhoneNum; // 电话号码

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRetrieveCodeReq          tagClientRetrieveCodeReq;
typedef       ClientRetrieveCodeReq             CLIENTRETRIEVECODEREQ;
typedef       ClientRetrieveCodeReq*          LPCLIENTRETRIEVECODEREQ;
typedef const ClientRetrieveCodeReq*         LCPCLIENTRETRIEVECODEREQ;


class ClientRetrieveCodeResp
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRetrieveCodeResp          tagClientRetrieveCodeResp;
typedef       ClientRetrieveCodeResp             CLIENTRETRIEVECODERESP;
typedef       ClientRetrieveCodeResp*          LPCLIENTRETRIEVECODERESP;
typedef const ClientRetrieveCodeResp*         LCPCLIENTRETRIEVECODERESP;


class ClientValidateRetrieveCodeReq
{
    public: /* members */
        int64_t llPhoneNum; // 电话号码
        int32_t iCode; // 验证码

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientValidateRetrieveCodeReq          tagClientValidateRetrieveCodeReq;
typedef       ClientValidateRetrieveCodeReq             CLIENTVALIDATERETRIEVECODEREQ;
typedef       ClientValidateRetrieveCodeReq*          LPCLIENTVALIDATERETRIEVECODEREQ;
typedef const ClientValidateRetrieveCodeReq*         LCPCLIENTVALIDATERETRIEVECODEREQ;


class ClientValidateRetrieveCodeResp
{
    public: /* members */
        int32_t iResult; // 结果
        int32_t iCodeStatus; // 验证码状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientValidateRetrieveCodeResp          tagClientValidateRetrieveCodeResp;
typedef       ClientValidateRetrieveCodeResp             CLIENTVALIDATERETRIEVECODERESP;
typedef       ClientValidateRetrieveCodeResp*          LPCLIENTVALIDATERETRIEVECODERESP;
typedef const ClientValidateRetrieveCodeResp*         LCPCLIENTVALIDATERETRIEVECODERESP;


class ClientModifyPasswordReq
{
    public: /* members */
        int64_t llPhoneNum; // 用户电话号码
        int32_t iPwdLen; // 密码长度
        char szPassWord[ACCESS_PASSWORD_LEN]; // 密码

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientModifyPasswordReq          tagClientModifyPasswordReq;
typedef       ClientModifyPasswordReq             CLIENTMODIFYPASSWORDREQ;
typedef       ClientModifyPasswordReq*          LPCLIENTMODIFYPASSWORDREQ;
typedef const ClientModifyPasswordReq*         LCPCLIENTMODIFYPASSWORDREQ;


class ClientModifyPasswordResp
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientModifyPasswordResp          tagClientModifyPasswordResp;
typedef       ClientModifyPasswordResp             CLIENTMODIFYPASSWORDRESP;
typedef       ClientModifyPasswordResp*          LPCLIENTMODIFYPASSWORDRESP;
typedef const ClientModifyPasswordResp*         LCPCLIENTMODIFYPASSWORDRESP;


class ClientNameLogonReq // 用户名密码登录请求
{
    public: /* members */
        int32_t iNameLen; // 用户名长度
        char szName[ACCESS_LOGON_NAME_LEN]; // 用户名
        int32_t iPwLen; // 密码长度
        char szPassword[ACCESS_PASSWORD_LEN]; // 密码

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientNameLogonReq          tagClientNameLogonReq;
typedef       ClientNameLogonReq             CLIENTNAMELOGONREQ;
typedef       ClientNameLogonReq*          LPCLIENTNAMELOGONREQ;
typedef const ClientNameLogonReq*         LCPCLIENTNAMELOGONREQ;


class ClientNameLogonResp // 用户名登录应答
{
    public: /* members */
        int32_t iResult; // 结果
        int64_t llUid; // 用户id
        int8_t chThirdPartyPwLen; // 第三方密码长度
        char szThirdPartyPassword[ACCESS_THIRD_PARTY_PASSWORD_LEN]; // 第三方用户密码
        int32_t iOssTokenLen; // OSStoken 长度
        char szOssToken[OSS_TOKEN_MAX_LEN]; // 第三方用户密码
        int32_t iLoginTokenLen; // 登陆token长度
        char szLoginToken[MAX_LOGIN_TOKEN_LEN]; // 免密登陆token

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientNameLogonResp          tagClientNameLogonResp;
typedef       ClientNameLogonResp             CLIENTNAMELOGONRESP;
typedef       ClientNameLogonResp*          LPCLIENTNAMELOGONRESP;
typedef const ClientNameLogonResp*         LCPCLIENTNAMELOGONRESP;


class ClientRequestAccessNameLogin // 用户名密码登录请求
{
    public: /* members */
        int32_t iNameLen; // 用户名长度
        char szName[ACCESS_LOGON_NAME_LEN]; // 用户名
        int32_t iPwLen; // 密码长度
        char szPassword[ACCESS_PASSWORD_LEN]; // 密码

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessNameLogin          tagClientRequestAccessNameLogin;
typedef       ClientRequestAccessNameLogin             CLIENTREQUESTACCESSNAMELOGIN;
typedef       ClientRequestAccessNameLogin*          LPCLIENTREQUESTACCESSNAMELOGIN;
typedef const ClientRequestAccessNameLogin*         LCPCLIENTREQUESTACCESSNAMELOGIN;


class ClientRequestAccessTokenLogin // token登陆请求
{
    public: /* members */
        int32_t iLoginTokenLen; // 客户端登陆token长度
        char szLoginToken[MAX_LOGIN_TOKEN_LEN]; // 登陆token

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTokenLogin          tagClientRequestAccessTokenLogin;
typedef       ClientRequestAccessTokenLogin             CLIENTREQUESTACCESSTOKENLOGIN;
typedef       ClientRequestAccessTokenLogin*          LPCLIENTREQUESTACCESSTOKENLOGIN;
typedef const ClientRequestAccessTokenLogin*         LCPCLIENTREQUESTACCESSTOKENLOGIN;


class AccessResponseClientNameLogin // 用户名密码登录应答
{
    public: /* members */
        int32_t iResult; // 结果
        int64_t llUid; // 账号id
        int32_t iRegister_channel; // 注册渠道号
        int64_t llPortrait; // 头像id
        int64_t llBirthday; // 生日
        uint8_t bGender; // 性别
        int32_t iNickNameLen; // 昵称长度
        char szNickname[ACCESS_NICK_NAME_LEN]; // 昵称
        int32_t iThirdPartyPwLen; // 第三方密码长度
        char szThirdPartyPassword[ACCESS_THIRD_PARTY_PASSWORD_LEN]; // 第三方用户密码
        int32_t iAge; // 年龄
        int32_t iOccupation; // 职业
        int32_t iConstellation; // 星座
        int32_t iSignatureLen; // 个性签名长度
        char szSignature[ACCESS_USER_SIGNATURE_MAX_LEN]; // 个性签名
        int32_t iResidence; // 居住地
        int32_t iResidence_detailLen; // 详细居住地长度
        char szResidence_detail[ACCESS_RESIDENTION_DETAIL_MAX_LEN]; // 详细居住地
        int64_t llPromoter; // 推广本用户的人的用户ID
        int32_t iPromote_count; // 目前本用户推广的人数
        int32_t iPromote_level; // 推广等级
        int32_t iLoginTokenLen; // 登陆token长度
        char szLoginToken[MAX_LOGIN_TOKEN_LEN]; // 免密登陆token
        int32_t iGold_integrity; // 诚信金
        int32_t iIntegrity_level; // 诚信金等级
        int32_t iGold_youwo; // 有我币
        int32_t iGold_game; // 游戏币
        int32_t iGold_validate; // 试金石
        int32_t iVip_level; // vip等级
        int32_t iVip_buy_time; // vip购买时间
        int32_t iVip_deadline; // vip过期时间
        int32_t iPhoto_count; // 照片数
        int64_t llCert_flags; // 认证标志
        int32_t iSincerity_value; // 诚信值
        int32_t iBusiness_value; // 业务值
        int32_t iVisitor_count; // 最近访问人数
        int64_t llExp; // 经验值
        int32_t iLevel; // 玩家等级
        int32_t iRecharge; // 充值数
        int32_t iDeposit_level; // 押金等级
        int32_t iDeposit_limit; // 押金上限
        int32_t iOffline_deposit_limit; // 线下支付方式的押金上限
        int32_t iOrder_create_fnum; // 发单完成数
        int32_t iOrder_apply_fnum; // 接单完成数
        int64_t llInterest; // 兴趣
        int32_t iShowLoginTips; // 是否弹出提示框0否 1是
        int32_t iLoginTipsLen; // 每日登录奖励弹框提示文字长度
        char szLoginTips[MAX_SHOW_TIPS_LEN]; // 每日登录奖励弹框提示文字
        int32_t iDueOrderCount; // 用户待评价的订单个数
        int64_t dueOrderList[MAX_DUE_ORDER_COUNT]; // 用户待评价的订单id数组
        int32_t iNow_time; // 服务器当前时间

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AccessResponseClientNameLogin          tagAccessResponseClientNameLogin;
typedef       AccessResponseClientNameLogin             ACCESSRESPONSECLIENTNAMELOGIN;
typedef       AccessResponseClientNameLogin*          LPACCESSRESPONSECLIENTNAMELOGIN;
typedef const AccessResponseClientNameLogin*         LCPACCESSRESPONSECLIENTNAMELOGIN;


class ClientTokenLoginReq // token登陆请求
{
    public: /* members */
        int32_t iLoginTokenLen; // 客户端登陆token长度
        char szLoginToken[MAX_LOGIN_TOKEN_LEN]; // 登陆token

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientTokenLoginReq          tagClientTokenLoginReq;
typedef       ClientTokenLoginReq             CLIENTTOKENLOGINREQ;
typedef       ClientTokenLoginReq*          LPCLIENTTOKENLOGINREQ;
typedef const ClientTokenLoginReq*         LCPCLIENTTOKENLOGINREQ;


class ClientTokenLoginResp // token登陆应答
{
    public: /* members */
        int32_t iResult; // 结果
        int64_t llUid; // 用户id
        int8_t chThirdPartyPwLen; // 第三方密码长度
        char szThirdPartyPassword[ACCESS_THIRD_PARTY_PASSWORD_LEN]; // 第三方用户密码
        int32_t iOssTokenLen; // OSStoken 长度
        char szOssToken[OSS_TOKEN_MAX_LEN]; // 第三方用户密码
        int32_t iLoginTokenLen; // 登陆token长度
        char szLoginToken[MAX_LOGIN_TOKEN_LEN]; // 免密登陆token

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientTokenLoginResp          tagClientTokenLoginResp;
typedef       ClientTokenLoginResp             CLIENTTOKENLOGINRESP;
typedef       ClientTokenLoginResp*          LPCLIENTTOKENLOGINRESP;
typedef const ClientTokenLoginResp*         LCPCLIENTTOKENLOGINRESP;


class AddressPhoneInfo // 通讯录手机号信息
{
    public: /* members */
        int64_t llPhone; // 用户手机号
        int64_t llUid; // 用户id
        int32_t iNickNameLen; // 昵称长度
        char szNickName[ACCESS_NICK_NAME_LEN]; // 用户昵称
        int32_t iIsFriend; // 是否是好友关系

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AddressPhoneInfo          tagAddressPhoneInfo;
typedef       AddressPhoneInfo             ADDRESSPHONEINFO;
typedef       AddressPhoneInfo*          LPADDRESSPHONEINFO;
typedef const AddressPhoneInfo*         LCPADDRESSPHONEINFO;


class ClientAddressPhoneQueryReq // 通讯录手机号码查询请求
{
    public: /* members */
        int32_t iAddressPhoneCount; // 手机号个数
        int64_t addressPhones[MAX_ADDRESS_PHONE_COUNT_ONCE]; // 手机号们

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientAddressPhoneQueryReq          tagClientAddressPhoneQueryReq;
typedef       ClientAddressPhoneQueryReq             CLIENTADDRESSPHONEQUERYREQ;
typedef       ClientAddressPhoneQueryReq*          LPCLIENTADDRESSPHONEQUERYREQ;
typedef const ClientAddressPhoneQueryReq*         LCPCLIENTADDRESSPHONEQUERYREQ;


class ClientAddressPhoneQueryResp // 通讯录手机号码查询响应
{
    public: /* members */
        int32_t iResult; // 结果
        int32_t iAddressPhoneInfoCount; // 手机号个数
        AddressPhoneInfo astAddressPhoneInfo[MAX_ADDRESS_PHONE_COUNT_ONCE]; // 结果信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientAddressPhoneQueryResp          tagClientAddressPhoneQueryResp;
typedef       ClientAddressPhoneQueryResp             CLIENTADDRESSPHONEQUERYRESP;
typedef       ClientAddressPhoneQueryResp*          LPCLIENTADDRESSPHONEQUERYRESP;
typedef const ClientAddressPhoneQueryResp*         LCPCLIENTADDRESSPHONEQUERYRESP;


class ClientBaseInfoReq // 基本信息请求
{
    public: /* members */
        int64_t llUid; // 给用户id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientBaseInfoReq          tagClientBaseInfoReq;
typedef       ClientBaseInfoReq             CLIENTBASEINFOREQ;
typedef       ClientBaseInfoReq*          LPCLIENTBASEINFOREQ;
typedef const ClientBaseInfoReq*         LCPCLIENTBASEINFOREQ;


class ClientBaseInfoResp // 基本信息响应
{
    public: /* members */
        int32_t iResult; // 结果
        int8_t chAdapted; // 是填充过基本信息0:未填充，1: 已填充
        int8_t chGender; // 性别
        int64_t llBirthday; // 生日
        int64_t llPortrait; // 头像
        int32_t iNickNameLen; // 昵称长度
        char szNickName[ACCESS_NICK_NAME_LEN]; // 昵称

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientBaseInfoResp          tagClientBaseInfoResp;
typedef       ClientBaseInfoResp             CLIENTBASEINFORESP;
typedef       ClientBaseInfoResp*          LPCLIENTBASEINFORESP;
typedef const ClientBaseInfoResp*         LCPCLIENTBASEINFORESP;


class UserBaseInfo // 用户基本信息结构定义
{
    public: /* members */
        int8_t chAdapted; // 是填充过基本信息0:未填充，1: 已填充
        int64_t llUid; // user id
        int8_t chGender; // 性别
        int64_t llBirthday; // 生日
        int64_t llPortrait; // 头像
        int32_t iNickNameLen; // 昵称长度
        char szNickName[ACCESS_NICK_NAME_LEN]; // 昵称
        int32_t iOccupation; // 职业
        int32_t iSignatureLen; // 个性签名长度
        char szSignature[ACCESS_USER_SIGNATURE_MAX_LEN]; // 个性签名
        int32_t iResidention; // 居住地
        int32_t iResidentionDetailLen; // 详细居住地长度
        char szResidentionDetail[ACCESS_RESIDENTION_DETAIL_MAX_LEN]; // 详细居住地
        int32_t iId; // 客户端要求 添加id字段

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       UserBaseInfo          tagUserBaseInfo;
typedef       UserBaseInfo             USERBASEINFO;
typedef       UserBaseInfo*          LPUSERBASEINFO;
typedef const UserBaseInfo*         LCPUSERBASEINFO;


class ClientUserAccountInfoReq // 用户账户信息请求
{
    public: /* members */
        int64_t llUid; // user id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUserAccountInfoReq          tagClientUserAccountInfoReq;
typedef       ClientUserAccountInfoReq             CLIENTUSERACCOUNTINFOREQ;
typedef       ClientUserAccountInfoReq*          LPCLIENTUSERACCOUNTINFOREQ;
typedef const ClientUserAccountInfoReq*         LCPCLIENTUSERACCOUNTINFOREQ;


class ClientUserAccountInfoResp // 用户账户信息
{
    public: /* members */
        int32_t iResult; // 结果
        int64_t llUid; // user id
        int8_t chGender; // 性别
        int64_t llBirthday; // 生日
        int64_t llPortrait; // 头像
        int32_t iNickNameLen; // 昵称长度
        char szNickName[ACCESS_NICK_NAME_LEN]; // 昵称
        int32_t iOccupation; // 职业
        int32_t iSignatureLen; // 个性签名长度
        char szSignature[ACCESS_USER_SIGNATURE_MAX_LEN]; // 个性签名
        int32_t iResidention; // 居住地
        int32_t iResidentionDetailLen; // 详细居住地长度
        char szResidentionDetail[ACCESS_RESIDENTION_DETAIL_MAX_LEN]; // 详细居住地

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUserAccountInfoResp          tagClientUserAccountInfoResp;
typedef       ClientUserAccountInfoResp             CLIENTUSERACCOUNTINFORESP;
typedef       ClientUserAccountInfoResp*          LPCLIENTUSERACCOUNTINFORESP;
typedef const ClientUserAccountInfoResp*         LCPCLIENTUSERACCOUNTINFORESP;


class ClientAccountInfoListReq // 客户端批量基本信息列表请求
{
    public: /* members */
        int32_t iUidCount; // 用户ID个数
        int64_t uidList[ACCESS_ACCOUNT_INFO_MAX_COUNT]; // 用户ID列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientAccountInfoListReq          tagClientAccountInfoListReq;
typedef       ClientAccountInfoListReq             CLIENTACCOUNTINFOLISTREQ;
typedef       ClientAccountInfoListReq*          LPCLIENTACCOUNTINFOLISTREQ;
typedef const ClientAccountInfoListReq*         LCPCLIENTACCOUNTINFOLISTREQ;


class ClientAccountInfoListResp // 客户端批量基本信息列表应答
{
    public: /* members */
        int32_t iResult; // 结果
        int32_t iUserInfoCount; // 用户信息个数
        UserBaseInfo astUserInfos[ACCESS_ACCOUNT_INFO_MAX_COUNT]; // 用户信息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientAccountInfoListResp          tagClientAccountInfoListResp;
typedef       ClientAccountInfoListResp             CLIENTACCOUNTINFOLISTRESP;
typedef       ClientAccountInfoListResp*          LPCLIENTACCOUNTINFOLISTRESP;
typedef const ClientAccountInfoListResp*         LCPCLIENTACCOUNTINFOLISTRESP;


class ClientBaseInfoListReq // 基本信息列表请求
{
    public: /* members */
        int32_t iUidCount; // 用户ID个数
        int64_t uidList[ACCESS_BASE_INFO_MAX_COUNT]; // 用户ID列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientBaseInfoListReq          tagClientBaseInfoListReq;
typedef       ClientBaseInfoListReq             CLIENTBASEINFOLISTREQ;
typedef       ClientBaseInfoListReq*          LPCLIENTBASEINFOLISTREQ;
typedef const ClientBaseInfoListReq*         LCPCLIENTBASEINFOLISTREQ;


class ClientBaseInfoListResp // 基本信息列表请求
{
    public: /* members */
        int32_t iResult; // 结果
        int32_t iUserInfoCount; // 用户信息个数
        UserBaseInfo astUserInfos[ACCESS_BASE_INFO_MAX_COUNT]; // 用户信息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientBaseInfoListResp          tagClientBaseInfoListResp;
typedef       ClientBaseInfoListResp             CLIENTBASEINFOLISTRESP;
typedef       ClientBaseInfoListResp*          LPCLIENTBASEINFOLISTRESP;
typedef const ClientBaseInfoListResp*         LCPCLIENTBASEINFOLISTRESP;


class ClientUpdateBaseInfoReq // 基本信息更新请求
{
    public: /* members */
        int8_t chGender; // 性别
        int64_t llBirthday; // 生日
        int64_t llPortrait; // 头像
        int64_t llInterest; // 兴趣
        int32_t iNickNameLen; // 昵称长度
        char szNickName[ACCESS_NICK_NAME_LEN]; // 昵称

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateBaseInfoReq          tagClientUpdateBaseInfoReq;
typedef       ClientUpdateBaseInfoReq             CLIENTUPDATEBASEINFOREQ;
typedef       ClientUpdateBaseInfoReq*          LPCLIENTUPDATEBASEINFOREQ;
typedef const ClientUpdateBaseInfoReq*         LCPCLIENTUPDATEBASEINFOREQ;


class ClientUpdateBaseInfoResp // 基本信息更新响应
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateBaseInfoResp          tagClientUpdateBaseInfoResp;
typedef       ClientUpdateBaseInfoResp             CLIENTUPDATEBASEINFORESP;
typedef       ClientUpdateBaseInfoResp*          LPCLIENTUPDATEBASEINFORESP;
typedef const ClientUpdateBaseInfoResp*         LCPCLIENTUPDATEBASEINFORESP;


class ClientPhoneQueryUserIdReq // 根据手机号码获取uid请求
{
    public: /* members */
        int32_t iPhoneCodeLen; // 手机号码长度
        char szPhoneCode[PHONE_CODE_MAX_LEN]; // 手机号码

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientPhoneQueryUserIdReq          tagClientPhoneQueryUserIdReq;
typedef       ClientPhoneQueryUserIdReq             CLIENTPHONEQUERYUSERIDREQ;
typedef       ClientPhoneQueryUserIdReq*          LPCLIENTPHONEQUERYUSERIDREQ;
typedef const ClientPhoneQueryUserIdReq*         LCPCLIENTPHONEQUERYUSERIDREQ;


class ClientPhoneQueryUserIdResp // 根据手机号码获取uid响应
{
    public: /* members */
        int32_t iResult; // 结果
        int64_t llUid; // 用户uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientPhoneQueryUserIdResp          tagClientPhoneQueryUserIdResp;
typedef       ClientPhoneQueryUserIdResp             CLIENTPHONEQUERYUSERIDRESP;
typedef       ClientPhoneQueryUserIdResp*          LPCLIENTPHONEQUERYUSERIDRESP;
typedef const ClientPhoneQueryUserIdResp*         LCPCLIENTPHONEQUERYUSERIDRESP;


class ClientChatLogonReq // 用户登录聊天服务器
{
    public: /* members */
        int32_t iData; // 保留字段

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientChatLogonReq          tagClientChatLogonReq;
typedef       ClientChatLogonReq             CLIENTCHATLOGONREQ;
typedef       ClientChatLogonReq*          LPCLIENTCHATLOGONREQ;
typedef const ClientChatLogonReq*         LCPCLIENTCHATLOGONREQ;


class ClientChatLogonResp // 用户登录聊天服务器返回
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientChatLogonResp          tagClientChatLogonResp;
typedef       ClientChatLogonResp             CLIENTCHATLOGONRESP;
typedef       ClientChatLogonResp*          LPCLIENTCHATLOGONRESP;
typedef const ClientChatLogonResp*         LCPCLIENTCHATLOGONRESP;


class ClientAddFriendReq // 用户添加好友请求
{
    public: /* members */
        int64_t llUid; // 用户uid
        int64_t llFriendUid; // 好友uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientAddFriendReq          tagClientAddFriendReq;
typedef       ClientAddFriendReq             CLIENTADDFRIENDREQ;
typedef       ClientAddFriendReq*          LPCLIENTADDFRIENDREQ;
typedef const ClientAddFriendReq*         LCPCLIENTADDFRIENDREQ;


class ClientAddFriendResp // 用户添加好友应答
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientAddFriendResp          tagClientAddFriendResp;
typedef       ClientAddFriendResp             CLIENTADDFRIENDRESP;
typedef       ClientAddFriendResp*          LPCLIENTADDFRIENDRESP;
typedef const ClientAddFriendResp*         LCPCLIENTADDFRIENDRESP;


class ClientDeleteFriendReq // 用户删除好友请求
{
    public: /* members */
        int64_t llUid; // 用户编号
        int64_t llFriendUid; // 好友的用户编号

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientDeleteFriendReq          tagClientDeleteFriendReq;
typedef       ClientDeleteFriendReq             CLIENTDELETEFRIENDREQ;
typedef       ClientDeleteFriendReq*          LPCLIENTDELETEFRIENDREQ;
typedef const ClientDeleteFriendReq*         LCPCLIENTDELETEFRIENDREQ;


class ClientDeleteFriendResp // 用户删除好友应答
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientDeleteFriendResp          tagClientDeleteFriendResp;
typedef       ClientDeleteFriendResp             CLIENTDELETEFRIENDRESP;
typedef       ClientDeleteFriendResp*          LPCLIENTDELETEFRIENDRESP;
typedef const ClientDeleteFriendResp*         LCPCLIENTDELETEFRIENDRESP;


class ClientJoinGroupReq // 用户加入群请求
{
    public: /* members */
        int64_t llGroupId; // 群编号
        int64_t llGroupOwnerId; // 群主编号
        int16_t nGroupNameCount; // 群名字的长度
        char szGroupName[ACCESS_GROUP_NAME_MAX_LEN]; // 群名字
        int16_t nMemberUidCount; // 请求加入群的成员uid个数
        int64_t memberUid[ACCESS_IN_GROUP_MAX_MEMBER]; // 用户编号

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientJoinGroupReq          tagClientJoinGroupReq;
typedef       ClientJoinGroupReq             CLIENTJOINGROUPREQ;
typedef       ClientJoinGroupReq*          LPCLIENTJOINGROUPREQ;
typedef const ClientJoinGroupReq*         LCPCLIENTJOINGROUPREQ;


class ClientJoinGroupResp // 用户加入群应答
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientJoinGroupResp          tagClientJoinGroupResp;
typedef       ClientJoinGroupResp             CLIENTJOINGROUPRESP;
typedef       ClientJoinGroupResp*          LPCLIENTJOINGROUPRESP;
typedef const ClientJoinGroupResp*         LCPCLIENTJOINGROUPRESP;


class ClientSecedeGroupReq // 用户退出群请求
{
    public: /* members */
        int64_t llMemberUid; // 用户编号
        int64_t llGroupId; // 群编号

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientSecedeGroupReq          tagClientSecedeGroupReq;
typedef       ClientSecedeGroupReq             CLIENTSECEDEGROUPREQ;
typedef       ClientSecedeGroupReq*          LPCLIENTSECEDEGROUPREQ;
typedef const ClientSecedeGroupReq*         LCPCLIENTSECEDEGROUPREQ;


class ClientSecedeGroupResp // 用户退出群应答
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientSecedeGroupResp          tagClientSecedeGroupResp;
typedef       ClientSecedeGroupResp             CLIENTSECEDEGROUPRESP;
typedef       ClientSecedeGroupResp*          LPCLIENTSECEDEGROUPRESP;
typedef const ClientSecedeGroupResp*         LCPCLIENTSECEDEGROUPRESP;


class ClientChatSendMsgReq // 用户发聊天消息请求
{
    public: /* members */
        int64_t llReceiverID; // 接受消息者的用户id
        int32_t iMsgLen; // 消息长度
        char szMessage[ACCESS_CHAT_MSG_MAX_LEN]; // 消息体

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientChatSendMsgReq          tagClientChatSendMsgReq;
typedef       ClientChatSendMsgReq             CLIENTCHATSENDMSGREQ;
typedef       ClientChatSendMsgReq*          LPCLIENTCHATSENDMSGREQ;
typedef const ClientChatSendMsgReq*         LCPCLIENTCHATSENDMSGREQ;


class ClientChatSendMsgResp // 用户发聊天消息返回
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientChatSendMsgResp          tagClientChatSendMsgResp;
typedef       ClientChatSendMsgResp             CLIENTCHATSENDMSGRESP;
typedef       ClientChatSendMsgResp*          LPCLIENTCHATSENDMSGRESP;
typedef const ClientChatSendMsgResp*         LCPCLIENTCHATSENDMSGRESP;


class ClientChatsvrForwardMsg // 聊天服务器转发聊天消息 请求
{
    public: /* members */
        int64_t llSenderID; // 发送消息者的用户id
        int32_t iMsgLen; // 消息长度
        char szMessage[ACCESS_CHAT_MSG_MAX_LEN]; // 消息体

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientChatsvrForwardMsg          tagClientChatsvrForwardMsg;
typedef       ClientChatsvrForwardMsg             CLIENTCHATSVRFORWARDMSG;
typedef       ClientChatsvrForwardMsg*          LPCLIENTCHATSVRFORWARDMSG;
typedef const ClientChatsvrForwardMsg*         LCPCLIENTCHATSVRFORWARDMSG;


class ClientChatsvrForwardMsgResp // 聊天服务器转发聊天消息 响应
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientChatsvrForwardMsgResp          tagClientChatsvrForwardMsgResp;
typedef       ClientChatsvrForwardMsgResp             CLIENTCHATSVRFORWARDMSGRESP;
typedef       ClientChatsvrForwardMsgResp*          LPCLIENTCHATSVRFORWARDMSGRESP;
typedef const ClientChatsvrForwardMsgResp*         LCPCLIENTCHATSVRFORWARDMSGRESP;


class GISInfo // 地理位置信息
{
    public: /* members */
        int64_t llLongitude; // GPS经度
        int64_t llDimension; // GPS维度

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       GISInfo          tagGISInfo;
typedef       GISInfo             GISINFO;
typedef       GISInfo*          LPGISINFO;
typedef const GISInfo*         LCPGISINFO;


class AudioInfo
{
    public: /* members */
        int64_t llAudioId; // 上传的语音id(uid+time_stamp)
        int32_t iSeconds; // 上传的这个语音时间长度（second）

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AudioInfo          tagAudioInfo;
typedef       AudioInfo             AUDIOINFO;
typedef       AudioInfo*          LPAUDIOINFO;
typedef const AudioInfo*         LCPAUDIOINFO;


class ClientRequestAccessTradeCreateOrder // 客户端请求网关交易服务器创建订单
{
    public: /* members */
        int32_t iType; // 订单类型
        uint32_t dwPosInfoLen; // 地区信息长度
        char szPosInfo[TRADE_POSINFO_LEN]; // 地区信息
        int32_t iMoneyType; // 币种（参考MoneyType的常量定义）
        int32_t iMoneyNum; // 币数(U币以分为单位)
        int32_t iGender; // 接到系统通知的用户的性别,即推送给对象的性别
        GISInfo stGISInfo; // 地理位置信息
        uint32_t dwParticularsLen; // 详细描述长度
        char szParticulars[TRADE_PARTICULARS_LEN]; // 详细描述
        int32_t iPictureNum; // 发单时上传的照片数量
        int64_t pictureidList[CREATE_ORDER_PICTURE_MAX_NUM]; // 上传的照片id列表(数组元素为uid+time_stamp)
        int32_t iAudioNum; // 发单时上传的语音个数
        AudioInfo astAudioInfo[CREATE_ORDER_AUDIO_MAX_NUM]; // 上传的语音信息列表
        int32_t iVersionType; // 版本类型（参考VersionType的常量定义）

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
            VERSION_iVersionType = 2,
        };
};

typedef       ClientRequestAccessTradeCreateOrder          tagClientRequestAccessTradeCreateOrder;
typedef       ClientRequestAccessTradeCreateOrder             CLIENTREQUESTACCESSTRADECREATEORDER;
typedef       ClientRequestAccessTradeCreateOrder*          LPCLIENTREQUESTACCESSTRADECREATEORDER;
typedef const ClientRequestAccessTradeCreateOrder*         LCPCLIENTREQUESTACCESSTRADECREATEORDER;


class TradeResponseAccessClientCreateOrder // 交易服务器回应网关客户端创建订单
{
    public: /* members */
        int32_t iResult; // 返回状态
        int64_t llOrderid; // 订单id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientCreateOrder          tagTradeResponseAccessClientCreateOrder;
typedef       TradeResponseAccessClientCreateOrder             TRADERESPONSEACCESSCLIENTCREATEORDER;
typedef       TradeResponseAccessClientCreateOrder*          LPTRADERESPONSEACCESSCLIENTCREATEORDER;
typedef const TradeResponseAccessClientCreateOrder*         LCPTRADERESPONSEACCESSCLIENTCREATEORDER;


class OrderBasicInfoToClient
{
    public: /* members */
        int64_t llOrderid; // 订单id
        int64_t llCreaterUid; // 创建者uid
        uint8_t bStatus; // 订单状态eORDER_STATUS 0等待报名,1等待接单人执行完成,2等待发单人确定完成,3订单执行完成等待评论,4订单完结,5投诉,6已经被单主关闭
        int32_t iType; // 订单类型
        int32_t iPayType; // 支付类型
        int32_t iCreater_degree; // 创建者完成进度 参考订单报名者完成状态eAPPLY_STATUS
        int32_t iDone_time; // 执行完时间
        int32_t iArgue_time; // 首次评价时间
        uint32_t dwTopicLen; // 主题长度
        char szTopic[TRADE_TOPIC_LEN]; // 主题
        uint32_t dwOverTime; // 订单结束报名时间
        uint32_t dwPosID; // 地区id
        uint32_t dwPosInfoLen; // 地区信息长度
        char szPosInfo[TRADE_POSINFO_LEN]; // 地区信息
        uint32_t dwTryMoney; // 试金石
        uint32_t dwGratuity; // 小费
        uint32_t dwOfficialNum; // 可参与人数
        int32_t iApplyStata; // 客户端查看到的报名状态 0,可报名 1,自己的订单, 2已经报名 3,自己已经被选中 4,已经选中其他人或者订单已经完成(自己没报名)
        uint32_t dwDiscussNum; // 评论次数
        GISInfo stGISInfo; // 地理位置信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       OrderBasicInfoToClient          tagOrderBasicInfoToClient;
typedef       OrderBasicInfoToClient             ORDERBASICINFOTOCLIENT;
typedef       OrderBasicInfoToClient*          LPORDERBASICINFOTOCLIENT;
typedef const OrderBasicInfoToClient*         LCPORDERBASICINFOTOCLIENT;


class ClientRequestAccessTradeSelectOrderBasicInfo // 客户端请求网关交易服务器查询订单基本信息
{
    public: /* members */
        uint8_t bSelectType; // 查询类型
        uint8_t bPag; // 查询页面
        uint8_t bSex; // 单主性别过滤， 0：不分男女， 1：只限女性，2:只限男性
        uint8_t bAgeUp; // 单主年龄上限，0为没有上限
        uint8_t bAgeDown; // 单主年龄下限，0为没有下限
        int32_t iAreaID; // 地区编码，具体定义见设计文档
        GISInfo stGISInfo; // 客户端地理位置信息
        uint8_t bOrderNum; // 请求订单个数, 为0是服务器默认20个
        uint32_t dwOrderType; // 查询的订单类型，具体定义见设计文档
        int64_t llPreSearchIndex; // 上次查询结果索引,首次查询，上行0，查询条件不变，查询更多结果时发回服务器

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectOrderBasicInfo          tagClientRequestAccessTradeSelectOrderBasicInfo;
typedef       ClientRequestAccessTradeSelectOrderBasicInfo             CLIENTREQUESTACCESSTRADESELECTORDERBASICINFO;
typedef       ClientRequestAccessTradeSelectOrderBasicInfo*          LPCLIENTREQUESTACCESSTRADESELECTORDERBASICINFO;
typedef const ClientRequestAccessTradeSelectOrderBasicInfo*         LCPCLIENTREQUESTACCESSTRADESELECTORDERBASICINFO;


class TradeResponseAccessClientSelectOrderBasicInfo // 交易服务器回应网关客户端查询订单基本信息
{
    public: /* members */
        int32_t iResult; // 返回状态
        uint32_t dwInfoCount; // 订单数量
        int64_t llCurSearchIndex; // 本次结果查询索引
        OrderBasicInfoToClient astOrderBasicInfoToClientList[TRADE_INFONUM_OF_PAG]; // 订单信息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectOrderBasicInfo          tagTradeResponseAccessClientSelectOrderBasicInfo;
typedef       TradeResponseAccessClientSelectOrderBasicInfo             TRADERESPONSEACCESSCLIENTSELECTORDERBASICINFO;
typedef       TradeResponseAccessClientSelectOrderBasicInfo*          LPTRADERESPONSEACCESSCLIENTSELECTORDERBASICINFO;
typedef const TradeResponseAccessClientSelectOrderBasicInfo*         LCPTRADERESPONSEACCESSCLIENTSELECTORDERBASICINFO;


class HomeOrderInfo
{
    public: /* members */
        int64_t llOrderid; // 订单id
        int32_t iStatus; // 订单状态
        int32_t iType; // 订单类型
        int64_t llCreaterUid; // 创建者uid
        int32_t iCreateTime; // 订单创建时间
        int32_t iPosInfoLen; // 地区信息长度
        char szPosInfo[TRADE_POSINFO_LEN]; // 地区信息
        int32_t iParticularsLen; // 详细描述长度
        char szParticulars[TRADE_PARTICULARS_LEN]; // 详细描述
        int32_t iMoneyType; // 币种（参考MoneyType的常量定义）
        int32_t iMoneyNum; // 币数
        int32_t iGender; // 此订单面向对象的性别
        int32_t iApplyStata; // 客户端查看到的报名状态 0,可报名 1,自己的订单, 2已经报名 3,自己已经被选中 4,已经选中其他人或者订单已经完成(自己没报名)
        int32_t iDiscussNum; // 评论次数
        int64_t llLongitude; // 订单所在地理位置经度
        int64_t llLatitude; // 订单所在地理位置纬度
        int32_t iApplyNum; // 报名人数
        int32_t iCreaterNickNameLen; // 单主昵称长度
        char szCreaterNickname[ACCESS_NICK_NAME_LEN]; // 单主昵称
        int64_t llCreaterBirth; // 单主出生日期
        int32_t iCreaterGender; // 单主性别
        int32_t iPictureNum; // 发单时上传的照片数量
        int64_t pictureidList[CREATE_ORDER_PICTURE_MAX_NUM]; // 上传的照片id列表(数组元素为uid+time_stamp)
        int32_t iAudioNum; // 发单时上传的语音个数
        AudioInfo astAudioInfo[CREATE_ORDER_AUDIO_MAX_NUM]; // 上传的语音信息列表
        int32_t iCreaterIntegrity_level; // 诚信金等级
        int32_t iCreaterCreditLevel; // 单主信誉等级
        int32_t iCreaterCreditValue; // 单主信誉值

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
            VERSION_iType = 2,
        };
};

typedef       HomeOrderInfo          tagHomeOrderInfo;
typedef       HomeOrderInfo             HOMEORDERINFO;
typedef       HomeOrderInfo*          LPHOMEORDERINFO;
typedef const HomeOrderInfo*         LCPHOMEORDERINFO;


class CT_HomeOrderInfo_Req // 客户端请求网关交易服务器查询首页订单信息
{
    public: /* members */
        int32_t iPag; // 查询页面
        int32_t iSex; // 单主性别过滤， 0：不分男女， 1：只限男性，2:只限女性
        int64_t llLongitude; // 用户所在地理位置经度
        int64_t llLatitude; // 用户所在地理位置维度
        int32_t iOrderMainType; // 查询的订单主类型（对应用户兴趣的一级类型）
        int32_t iValidOrder; // 是否是有效订单，（选项参照定义ValidOrder）
        int32_t iMoneyType; // 币种（参考MoneyType的常量定义）
        int32_t iMoneyNumUp; // 币数上限，0为无上限
        int32_t iMoneyNumDown; // 币数下限，0为无下限
        int32_t iAgeUp; // 单主年龄上限，0为没有上限
        int32_t iAgeDown; // 单主年龄下限，0为没有下限
        int32_t iTimeType; // 搜索时间段的类型定义，参照文件首部的TimeType常量定义
        int32_t iDistanceType; // 搜索距离的类型定义，参照文件首部的DistanceType常量定义
        int32_t iOrderSortType; // 订单排序规则（参照OrderSortType常量的定义）
        int32_t iTimeSpanType; // 订单时间跨度类型（参照常量定义OrderTimeSpanType）
        int32_t iVersionType; // 用户使用的app的版本类型（参照常量定义VersionType）

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
            VERSION_iTimeSpanType = 2,
            VERSION_iVersionType = 2,
        };
};

typedef       CT_HomeOrderInfo_Req          tagCT_HomeOrderInfo_Req;
typedef       CT_HomeOrderInfo_Req             CT_HOMEORDERINFO_REQ;
typedef       CT_HomeOrderInfo_Req*          LPCT_HOMEORDERINFO_REQ;
typedef const CT_HomeOrderInfo_Req*         LCPCT_HOMEORDERINFO_REQ;


class TC_HomeOrderInfo_Resp // 交易服务器回应网关客户端查询订单基本信息
{
    public: /* members */
        int32_t iResult; // 返回状态
        uint32_t dwInfoCount; // 订单数量
        HomeOrderInfo astHomeOrderInfos[TRADE_INFONUM_OF_PAG]; // 订单信息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
        };
};

typedef       TC_HomeOrderInfo_Resp          tagTC_HomeOrderInfo_Resp;
typedef       TC_HomeOrderInfo_Resp             TC_HOMEORDERINFO_RESP;
typedef       TC_HomeOrderInfo_Resp*          LPTC_HOMEORDERINFO_RESP;
typedef const TC_HomeOrderInfo_Resp*         LCPTC_HOMEORDERINFO_RESP;


class OrderStateInfo // 
{
    public: /* members */
        int32_t iOrderStatus; // 订单状态
        int32_t iApplyStatus; // 报名状态0,可报名 1,自己的订单, 2已经报名 3,自己已经被选中 4,已经选中其他人或者订单已经完成

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       OrderStateInfo          tagOrderStateInfo;
typedef       OrderStateInfo             ORDERSTATEINFO;
typedef       OrderStateInfo*          LPORDERSTATEINFO;
typedef const OrderStateInfo*         LCPORDERSTATEINFO;


class CT_OrderStateInfoList_Req // 批量订单状态信息查询
{
    public: /* members */
        int32_t iOrderCount; // 订单个数
        int64_t orderIds[TRADE_INFONUM_OF_PAG]; // 订单数量

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_OrderStateInfoList_Req          tagCT_OrderStateInfoList_Req;
typedef       CT_OrderStateInfoList_Req             CT_ORDERSTATEINFOLIST_REQ;
typedef       CT_OrderStateInfoList_Req*          LPCT_ORDERSTATEINFOLIST_REQ;
typedef const CT_OrderStateInfoList_Req*         LCPCT_ORDERSTATEINFOLIST_REQ;


class TC_OrderStateInfoList_Resp // 批量订单状态信息查询
{
    public: /* members */
        int32_t iResult; // 结果
        int32_t iOrderCount; // 订单个数
        OrderStateInfo astOrderStateInfoList[TRADE_INFONUM_OF_PAG]; // 订单信息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_OrderStateInfoList_Resp          tagTC_OrderStateInfoList_Resp;
typedef       TC_OrderStateInfoList_Resp             TC_ORDERSTATEINFOLIST_RESP;
typedef       TC_OrderStateInfoList_Resp*          LPTC_ORDERSTATEINFOLIST_RESP;
typedef const TC_OrderStateInfoList_Resp*         LCPTC_ORDERSTATEINFOLIST_RESP;


class ApplyInfo
{
    public: /* members */
        int64_t llUid; // 报名者id
        uint8_t bStatus; // 订单报名者完成状态eAPPLY_STATUS 0刚刚报名,1已被选中,2确认服务,3服务完成,4已经评价

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ApplyInfo          tagApplyInfo;
typedef       ApplyInfo             APPLYINFO;
typedef       ApplyInfo*          LPAPPLYINFO;
typedef const ApplyInfo*         LCPAPPLYINFO;


class ClientRequestAccessTradeSelectOrderSpecificInfo // 客户端请求网关交易服务器查询订单详细信息
{
    public: /* members */
        int64_t llOrderid; // 订单id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectOrderSpecificInfo          tagClientRequestAccessTradeSelectOrderSpecificInfo;
typedef       ClientRequestAccessTradeSelectOrderSpecificInfo             CLIENTREQUESTACCESSTRADESELECTORDERSPECIFICINFO;
typedef       ClientRequestAccessTradeSelectOrderSpecificInfo*          LPCLIENTREQUESTACCESSTRADESELECTORDERSPECIFICINFO;
typedef const ClientRequestAccessTradeSelectOrderSpecificInfo*         LCPCLIENTREQUESTACCESSTRADESELECTORDERSPECIFICINFO;


class TradeResponseAccessClientSelectOrderSpecificInfo // 交易服务器回应网关客户端查询订单详细信息
{
    public: /* members */
        int32_t iResult; // 返回状态
        uint32_t dwParticularsLen; // 详细描述长度
        char szParticulars[512]; // 详细描述
        uint32_t dwApplyNum; // 报名者人数
        ApplyInfo astApplyInfoList[100]; // 报名者信息列表
        uint32_t dwDiscussNum; // 评论总数
        uint32_t dwDiscussPagNum; // 评论总页数
        int64_t discussPagidList[256]; // 评论页面id列表
        int64_t llOrderCreaterPhone; // 订单创建者的电话号码
        int64_t llOrderApplyerPhone; // 订单服务者的电话号码
        OrderBasicInfoToClient stOrderBasicInfoToClient; // 订单信息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectOrderSpecificInfo          tagTradeResponseAccessClientSelectOrderSpecificInfo;
typedef       TradeResponseAccessClientSelectOrderSpecificInfo             TRADERESPONSEACCESSCLIENTSELECTORDERSPECIFICINFO;
typedef       TradeResponseAccessClientSelectOrderSpecificInfo*          LPTRADERESPONSEACCESSCLIENTSELECTORDERSPECIFICINFO;
typedef const TradeResponseAccessClientSelectOrderSpecificInfo*         LCPTRADERESPONSEACCESSCLIENTSELECTORDERSPECIFICINFO;


class ClientRequestAccessTradeApplyOrder // 客户端请求网关交易服务器报名参与活动
{
    public: /* members */
        int64_t llOrderid; // 订单id
        int32_t iApplyRequestType; // 报名状态eAPPLY_REQUEST_TYPE 0取消，1报名

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeApplyOrder          tagClientRequestAccessTradeApplyOrder;
typedef       ClientRequestAccessTradeApplyOrder             CLIENTREQUESTACCESSTRADEAPPLYORDER;
typedef       ClientRequestAccessTradeApplyOrder*          LPCLIENTREQUESTACCESSTRADEAPPLYORDER;
typedef const ClientRequestAccessTradeApplyOrder*         LCPCLIENTREQUESTACCESSTRADEAPPLYORDER;


class TradeResponseAccessClientApplyOrder // 交易服务器回应网关客户端报名参与活动
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientApplyOrder          tagTradeResponseAccessClientApplyOrder;
typedef       TradeResponseAccessClientApplyOrder             TRADERESPONSEACCESSCLIENTAPPLYORDER;
typedef       TradeResponseAccessClientApplyOrder*          LPTRADERESPONSEACCESSCLIENTAPPLYORDER;
typedef const TradeResponseAccessClientApplyOrder*         LCPTRADERESPONSEACCESSCLIENTAPPLYORDER;


class ClientRequestAccessTradeSelectApplyer // 客户端请求网关交易服务器选择参与对象
{
    public: /* members */
        int64_t llOrderid; // 订单id
        int64_t llApplyerid; // 选择的报名玩家id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectApplyer          tagClientRequestAccessTradeSelectApplyer;
typedef       ClientRequestAccessTradeSelectApplyer             CLIENTREQUESTACCESSTRADESELECTAPPLYER;
typedef       ClientRequestAccessTradeSelectApplyer*          LPCLIENTREQUESTACCESSTRADESELECTAPPLYER;
typedef const ClientRequestAccessTradeSelectApplyer*         LCPCLIENTREQUESTACCESSTRADESELECTAPPLYER;


class TradeResponseAccessClientSelectApplyer // 交易服务器回应网关客户端选择参与对象
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectApplyer          tagTradeResponseAccessClientSelectApplyer;
typedef       TradeResponseAccessClientSelectApplyer             TRADERESPONSEACCESSCLIENTSELECTAPPLYER;
typedef       TradeResponseAccessClientSelectApplyer*          LPTRADERESPONSEACCESSCLIENTSELECTAPPLYER;
typedef const TradeResponseAccessClientSelectApplyer*         LCPTRADERESPONSEACCESSCLIENTSELECTAPPLYER;


class ClientConfirmOrCancelOrderReq // 客户端确认订单或者取消订单 请求
{
    public: /* members */
        int64_t llOrderid; // 订单id
        uint8_t bConfirmOrCancel; // 确认或取消订单类型eCONFIRM_CANCEL_ORDER_TYPE 0被选中玩家确认服务，1被选中玩家取消服务

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientConfirmOrCancelOrderReq          tagClientConfirmOrCancelOrderReq;
typedef       ClientConfirmOrCancelOrderReq             CLIENTCONFIRMORCANCELORDERREQ;
typedef       ClientConfirmOrCancelOrderReq*          LPCLIENTCONFIRMORCANCELORDERREQ;
typedef const ClientConfirmOrCancelOrderReq*         LCPCLIENTCONFIRMORCANCELORDERREQ;


class ClientConfirmOrCancelOrderResp // 客户端确认订单或者取消订单 服务器响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientConfirmOrCancelOrderResp          tagClientConfirmOrCancelOrderResp;
typedef       ClientConfirmOrCancelOrderResp             CLIENTCONFIRMORCANCELORDERRESP;
typedef       ClientConfirmOrCancelOrderResp*          LPCLIENTCONFIRMORCANCELORDERRESP;
typedef const ClientConfirmOrCancelOrderResp*         LCPCLIENTCONFIRMORCANCELORDERRESP;


class ClientCreatedOrderBriefReq // 查询用户创建的订单简要信息 请求
{
    public: /* members */
        int64_t llUid; // user id
        int64_t llOrderId; // 查询的起始订单id，第一次传0
        int32_t iRecordCount; // 一次需要查询的数量

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientCreatedOrderBriefReq          tagClientCreatedOrderBriefReq;
typedef       ClientCreatedOrderBriefReq             CLIENTCREATEDORDERBRIEFREQ;
typedef       ClientCreatedOrderBriefReq*          LPCLIENTCREATEDORDERBRIEFREQ;
typedef const ClientCreatedOrderBriefReq*         LCPCLIENTCREATEDORDERBRIEFREQ;


class OrderCombineInfo
{
    public: /* members */
        int64_t llOrderid; // 订单id
        int32_t iStatus; // 订单状态
        int64_t llCreaterUid; // 创建者uid
        int64_t llCreateTime; // 创建时间
        int32_t iPosInfoLen; // 地区信息长度
        char szPosInfo[TRADE_POSINFO_LEN]; // 地区信息
        int32_t iParticularsLen; // 详细描述长度
        char szParticulars[TRADE_PARTICULARS_LEN]; // 详细描述
        int32_t iMoneyType; // 币种（参考MoneyType的常量定义）
        int32_t iMoneyNum; // 币数
        int32_t iApplyStata; // 客户端查看到的报名状态 0,可报名 1,自己的订单, 2已经报名 3,自己已经被选中 4,已经选中其他人或者订单已经完成(自己没报名)
        int32_t iDiscussNum; // 评论次数
        int64_t llLongitude; // 订单所在地理位置经度
        int64_t llLatitude; // 订单所在地理位置纬度
        int32_t iApplyNum; // 报名人数
        int32_t iPictureNum; // 发单时上传的照片数量
        int64_t pictureidList[CREATE_ORDER_PICTURE_MAX_NUM]; // 上传的照片id列表(数组元素为uid+time_stamp)
        int32_t iAudioNum; // 发单时上传的语音个数
        AudioInfo astAudioInfo[CREATE_ORDER_AUDIO_MAX_NUM]; // 上传的语音信息列表
        int32_t iCreaterNickNameLen; // 单主昵称长度
        char szCreaterNickname[ACCESS_NICK_NAME_LEN]; // 单主昵称
        int64_t llCreaterBirth; // 单主出生日期
        int32_t iCreaterGender; // 单主性别
        int32_t iCreaterIntegrityLevel; // 单主诚信金等级
        int32_t iCreaterCreditLevel; // 单主信誉等级
        int32_t iCreaterCreditValue; // 单主信誉值

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       OrderCombineInfo          tagOrderCombineInfo;
typedef       OrderCombineInfo             ORDERCOMBINEINFO;
typedef       OrderCombineInfo*          LPORDERCOMBINEINFO;
typedef const OrderCombineInfo*         LCPORDERCOMBINEINFO;


class ClientCreatedOrderBriefResp // 查询用户创建的订单简要信息 应答
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iTotalCount; // 当前记录的总条数
        int32_t iOrderCount; // 查询到的简要订单信息个数
        OrderCombineInfo astOrderCombineInfoList[TRADE_INFONUM_OF_PAG]; // 订单信息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientCreatedOrderBriefResp          tagClientCreatedOrderBriefResp;
typedef       ClientCreatedOrderBriefResp             CLIENTCREATEDORDERBRIEFRESP;
typedef       ClientCreatedOrderBriefResp*          LPCLIENTCREATEDORDERBRIEFRESP;
typedef const ClientCreatedOrderBriefResp*         LCPCLIENTCREATEDORDERBRIEFRESP;


class ClientAppliedOrderBriefReq // 查询用户申请的订单简要信息 请求
{
    public: /* members */
        int64_t llUid; // user id
        int64_t llOrderId; // 订单id
        int32_t iRecordCount; // 一次需要查询的数量
        int8_t chStatus; // 需要过滤的订单状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientAppliedOrderBriefReq          tagClientAppliedOrderBriefReq;
typedef       ClientAppliedOrderBriefReq             CLIENTAPPLIEDORDERBRIEFREQ;
typedef       ClientAppliedOrderBriefReq*          LPCLIENTAPPLIEDORDERBRIEFREQ;
typedef const ClientAppliedOrderBriefReq*         LCPCLIENTAPPLIEDORDERBRIEFREQ;


class ClientAppliedOrderBriefResp // 查询用户申请的订单简要信息 应答
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iTotalCount; // 当前记录的总条数
        int32_t iOrderCount; // 查询到的简要订单信息个数
        OrderCombineInfo astOrderCombineInfoList[TRADE_INFONUM_OF_PAG]; // 订单信息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientAppliedOrderBriefResp          tagClientAppliedOrderBriefResp;
typedef       ClientAppliedOrderBriefResp             CLIENTAPPLIEDORDERBRIEFRESP;
typedef       ClientAppliedOrderBriefResp*          LPCLIENTAPPLIEDORDERBRIEFRESP;
typedef const ClientAppliedOrderBriefResp*         LCPCLIENTAPPLIEDORDERBRIEFRESP;


class DiscussInfo
{
    public: /* members */
        int64_t llUid; // 评论者id
        int32_t iTime; // 评论时间
        int32_t iContentLen; // 评论内容长度
        char szContent[MAX_DISCUSS_CONTENT_LEN]; // 评论内容

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       DiscussInfo          tagDiscussInfo;
typedef       DiscussInfo             DISCUSSINFO;
typedef       DiscussInfo*          LPDISCUSSINFO;
typedef const DiscussInfo*         LCPDISCUSSINFO;


class ClientRequestAccessTradeSelectDiscuss // 客户端请求网关交易服务器查看评论信息
{
    public: /* members */
        int64_t llDiscussPagid; // 评论页面id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectDiscuss          tagClientRequestAccessTradeSelectDiscuss;
typedef       ClientRequestAccessTradeSelectDiscuss             CLIENTREQUESTACCESSTRADESELECTDISCUSS;
typedef       ClientRequestAccessTradeSelectDiscuss*          LPCLIENTREQUESTACCESSTRADESELECTDISCUSS;
typedef const ClientRequestAccessTradeSelectDiscuss*         LCPCLIENTREQUESTACCESSTRADESELECTDISCUSS;


class TradeResponseAccessClientSelectDiscuss // 交易服务器回应网关客户端查看评论信息
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iDiscussInpagNum; // 本页评论信息数量
        DiscussInfo astDiscussInfoList[MAX_DISCUSS_NUM_ONC_PAG]; // 评论内容

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectDiscuss          tagTradeResponseAccessClientSelectDiscuss;
typedef       TradeResponseAccessClientSelectDiscuss             TRADERESPONSEACCESSCLIENTSELECTDISCUSS;
typedef       TradeResponseAccessClientSelectDiscuss*          LPTRADERESPONSEACCESSCLIENTSELECTDISCUSS;
typedef const TradeResponseAccessClientSelectDiscuss*         LCPTRADERESPONSEACCESSCLIENTSELECTDISCUSS;


class ClientRequestAccessTradeCreateDiscuss // 客户端请求网关交易服务器发表评论
{
    public: /* members */
        int64_t llOrderid; // 订单id
        int32_t iContentLen; // 评论内容长度
        char szContent[MAX_DISCUSS_CONTENT_LEN]; // 评论内容

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeCreateDiscuss          tagClientRequestAccessTradeCreateDiscuss;
typedef       ClientRequestAccessTradeCreateDiscuss             CLIENTREQUESTACCESSTRADECREATEDISCUSS;
typedef       ClientRequestAccessTradeCreateDiscuss*          LPCLIENTREQUESTACCESSTRADECREATEDISCUSS;
typedef const ClientRequestAccessTradeCreateDiscuss*         LCPCLIENTREQUESTACCESSTRADECREATEDISCUSS;


class TradeResponseAccessClientCreateDiscuss // 交易服务器回应网关客户端发表评论
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientCreateDiscuss          tagTradeResponseAccessClientCreateDiscuss;
typedef       TradeResponseAccessClientCreateDiscuss             TRADERESPONSEACCESSCLIENTCREATEDISCUSS;
typedef       TradeResponseAccessClientCreateDiscuss*          LPTRADERESPONSEACCESSCLIENTCREATEDISCUSS;
typedef const TradeResponseAccessClientCreateDiscuss*         LCPTRADERESPONSEACCESSCLIENTCREATEDISCUSS;


class ClientRequestAccessTradeSelectPhotoWall // 客户端请求网关交易服务器获取照片墙信息
{
    public: /* members */
        int64_t llUid; // uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectPhotoWall          tagClientRequestAccessTradeSelectPhotoWall;
typedef       ClientRequestAccessTradeSelectPhotoWall             CLIENTREQUESTACCESSTRADESELECTPHOTOWALL;
typedef       ClientRequestAccessTradeSelectPhotoWall*          LPCLIENTREQUESTACCESSTRADESELECTPHOTOWALL;
typedef const ClientRequestAccessTradeSelectPhotoWall*         LCPCLIENTREQUESTACCESSTRADESELECTPHOTOWALL;


class TradeResponseAccessClientSelectPhotoWall // 交易服务器回应网关客户端获取照片墙信息
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iPhotoCount; // 照片个数
        int64_t photoWall[TRADE_PHOTO_WALL_MAX_COUNT]; // 照片墙

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectPhotoWall          tagTradeResponseAccessClientSelectPhotoWall;
typedef       TradeResponseAccessClientSelectPhotoWall             TRADERESPONSEACCESSCLIENTSELECTPHOTOWALL;
typedef       TradeResponseAccessClientSelectPhotoWall*          LPTRADERESPONSEACCESSCLIENTSELECTPHOTOWALL;
typedef const TradeResponseAccessClientSelectPhotoWall*         LCPTRADERESPONSEACCESSCLIENTSELECTPHOTOWALL;


class ClientRequestAccessTradeUpdatePhotoWall // 客户端请求网关交易服务器更新照片墙
{
    public: /* members */
        int32_t iPhotoCount; // 照片个数
        int64_t photoWall[TRADE_PHOTO_WALL_MAX_COUNT]; // 照片墙

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeUpdatePhotoWall          tagClientRequestAccessTradeUpdatePhotoWall;
typedef       ClientRequestAccessTradeUpdatePhotoWall             CLIENTREQUESTACCESSTRADEUPDATEPHOTOWALL;
typedef       ClientRequestAccessTradeUpdatePhotoWall*          LPCLIENTREQUESTACCESSTRADEUPDATEPHOTOWALL;
typedef const ClientRequestAccessTradeUpdatePhotoWall*         LCPCLIENTREQUESTACCESSTRADEUPDATEPHOTOWALL;


class TradeResponseAccessClientUpdatePhotoWall // 交易服务器回应网关客户端更新照片墙
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientUpdatePhotoWall          tagTradeResponseAccessClientUpdatePhotoWall;
typedef       TradeResponseAccessClientUpdatePhotoWall             TRADERESPONSEACCESSCLIENTUPDATEPHOTOWALL;
typedef       TradeResponseAccessClientUpdatePhotoWall*          LPTRADERESPONSEACCESSCLIENTUPDATEPHOTOWALL;
typedef const TradeResponseAccessClientUpdatePhotoWall*         LCPTRADERESPONSEACCESSCLIENTUPDATEPHOTOWALL;


class ClientUpdateBirthdayReq // 客户端更新出生日期
{
    public: /* members */
        int64_t llBirthday; // 出生日期

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateBirthdayReq          tagClientUpdateBirthdayReq;
typedef       ClientUpdateBirthdayReq             CLIENTUPDATEBIRTHDAYREQ;
typedef       ClientUpdateBirthdayReq*          LPCLIENTUPDATEBIRTHDAYREQ;
typedef const ClientUpdateBirthdayReq*         LCPCLIENTUPDATEBIRTHDAYREQ;


class ClientUpdateBirthdayResp // 客户端更新出生日期响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateBirthdayResp          tagClientUpdateBirthdayResp;
typedef       ClientUpdateBirthdayResp             CLIENTUPDATEBIRTHDAYRESP;
typedef       ClientUpdateBirthdayResp*          LPCLIENTUPDATEBIRTHDAYRESP;
typedef const ClientUpdateBirthdayResp*         LCPCLIENTUPDATEBIRTHDAYRESP;


class ClientUpdateNickNameReq // 客户端更新昵称
{
    public: /* members */
        int32_t iNickNameLen; // 昵称长度
        char szNickName[ACCESS_NICK_NAME_LEN]; // 昵称

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateNickNameReq          tagClientUpdateNickNameReq;
typedef       ClientUpdateNickNameReq             CLIENTUPDATENICKNAMEREQ;
typedef       ClientUpdateNickNameReq*          LPCLIENTUPDATENICKNAMEREQ;
typedef const ClientUpdateNickNameReq*         LCPCLIENTUPDATENICKNAMEREQ;


class ClientUpdateNickNameResp // 客户端更新昵称响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateNickNameResp          tagClientUpdateNickNameResp;
typedef       ClientUpdateNickNameResp             CLIENTUPDATENICKNAMERESP;
typedef       ClientUpdateNickNameResp*          LPCLIENTUPDATENICKNAMERESP;
typedef const ClientUpdateNickNameResp*         LCPCLIENTUPDATENICKNAMERESP;


class ClientUpdateOccupationReq // 客户端更新职业
{
    public: /* members */
        int32_t iOccupation; // 职业

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateOccupationReq          tagClientUpdateOccupationReq;
typedef       ClientUpdateOccupationReq             CLIENTUPDATEOCCUPATIONREQ;
typedef       ClientUpdateOccupationReq*          LPCLIENTUPDATEOCCUPATIONREQ;
typedef const ClientUpdateOccupationReq*         LCPCLIENTUPDATEOCCUPATIONREQ;


class ClientUpdateOccupationResp // 客户端更新职业响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateOccupationResp          tagClientUpdateOccupationResp;
typedef       ClientUpdateOccupationResp             CLIENTUPDATEOCCUPATIONRESP;
typedef       ClientUpdateOccupationResp*          LPCLIENTUPDATEOCCUPATIONRESP;
typedef const ClientUpdateOccupationResp*         LCPCLIENTUPDATEOCCUPATIONRESP;


class ClientUpdateResidentionReq // 客户端更新居住地
{
    public: /* members */
        int32_t iResidention; // 居住地

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateResidentionReq          tagClientUpdateResidentionReq;
typedef       ClientUpdateResidentionReq             CLIENTUPDATERESIDENTIONREQ;
typedef       ClientUpdateResidentionReq*          LPCLIENTUPDATERESIDENTIONREQ;
typedef const ClientUpdateResidentionReq*         LCPCLIENTUPDATERESIDENTIONREQ;


class ClientUpdateResidentionResp // 客户端更新居住地响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateResidentionResp          tagClientUpdateResidentionResp;
typedef       ClientUpdateResidentionResp             CLIENTUPDATERESIDENTIONRESP;
typedef       ClientUpdateResidentionResp*          LPCLIENTUPDATERESIDENTIONRESP;
typedef const ClientUpdateResidentionResp*         LCPCLIENTUPDATERESIDENTIONRESP;


class ClientUpdateSignatureReq // 客户端更新个性签名
{
    public: /* members */
        int32_t iSignatureLen; // 个性签名长度
        char szSignature[ACCESS_USER_SIGNATURE_MAX_LEN]; // 个性签名

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateSignatureReq          tagClientUpdateSignatureReq;
typedef       ClientUpdateSignatureReq             CLIENTUPDATESIGNATUREREQ;
typedef       ClientUpdateSignatureReq*          LPCLIENTUPDATESIGNATUREREQ;
typedef const ClientUpdateSignatureReq*         LCPCLIENTUPDATESIGNATUREREQ;


class ClientUpdateSignatureResp // 客户端更新个性签名响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateSignatureResp          tagClientUpdateSignatureResp;
typedef       ClientUpdateSignatureResp             CLIENTUPDATESIGNATURERESP;
typedef       ClientUpdateSignatureResp*          LPCLIENTUPDATESIGNATURERESP;
typedef const ClientUpdateSignatureResp*         LCPCLIENTUPDATESIGNATURERESP;


class ClientUpdatePortraitReq // 客户端更新头像id
{
    public: /* members */
        int64_t llPortrait; // 个性签名长度

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdatePortraitReq          tagClientUpdatePortraitReq;
typedef       ClientUpdatePortraitReq             CLIENTUPDATEPORTRAITREQ;
typedef       ClientUpdatePortraitReq*          LPCLIENTUPDATEPORTRAITREQ;
typedef const ClientUpdatePortraitReq*         LCPCLIENTUPDATEPORTRAITREQ;


class ClientUpdatePortraitResp // 客户端更新头像id结果
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdatePortraitResp          tagClientUpdatePortraitResp;
typedef       ClientUpdatePortraitResp             CLIENTUPDATEPORTRAITRESP;
typedef       ClientUpdatePortraitResp*          LPCLIENTUPDATEPORTRAITRESP;
typedef const ClientUpdatePortraitResp*         LCPCLIENTUPDATEPORTRAITRESP;


class ClientUpdateGenderReq // 客户端更新性别
{
    public: /* members */
        int8_t chGender; // 性别

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateGenderReq          tagClientUpdateGenderReq;
typedef       ClientUpdateGenderReq             CLIENTUPDATEGENDERREQ;
typedef       ClientUpdateGenderReq*          LPCLIENTUPDATEGENDERREQ;
typedef const ClientUpdateGenderReq*         LCPCLIENTUPDATEGENDERREQ;


class ClientUpdateGenderResp // 客户端更新性别
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientUpdateGenderResp          tagClientUpdateGenderResp;
typedef       ClientUpdateGenderResp             CLIENTUPDATEGENDERRESP;
typedef       ClientUpdateGenderResp*          LPCLIENTUPDATEGENDERRESP;
typedef const ClientUpdateGenderResp*         LCPCLIENTUPDATEGENDERRESP;


class CG_UpdateResidentionDetail_Req // 客户端更新详细居住地
{
    public: /* members */
        int32_t iResidentionDetailLen; // 详细居住地字符串长度
        char szResidentionDetail[ACCESS_RESIDENTION_DETAIL_MAX_LEN]; // 详细居住地

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CG_UpdateResidentionDetail_Req          tagCG_UpdateResidentionDetail_Req;
typedef       CG_UpdateResidentionDetail_Req             CG_UPDATERESIDENTIONDETAIL_REQ;
typedef       CG_UpdateResidentionDetail_Req*          LPCG_UPDATERESIDENTIONDETAIL_REQ;
typedef const CG_UpdateResidentionDetail_Req*         LCPCG_UPDATERESIDENTIONDETAIL_REQ;


class GC_UpdateResidentionDetail_Resp // 客户端更新详细居住地响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       GC_UpdateResidentionDetail_Resp          tagGC_UpdateResidentionDetail_Resp;
typedef       GC_UpdateResidentionDetail_Resp             GC_UPDATERESIDENTIONDETAIL_RESP;
typedef       GC_UpdateResidentionDetail_Resp*          LPGC_UPDATERESIDENTIONDETAIL_RESP;
typedef const GC_UpdateResidentionDetail_Resp*         LCPGC_UPDATERESIDENTIONDETAIL_RESP;


class ClientRequestAccessTradeRegisterTradeinfo // 客户端请求网关交易服务器注册交易信息
{
    public: /* members */
        int64_t llUid; // uid
        int64_t llPromoterUid; // uid of promoter
        int32_t iPromoteFlag; // 是否推广成功

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeRegisterTradeinfo          tagClientRequestAccessTradeRegisterTradeinfo;
typedef       ClientRequestAccessTradeRegisterTradeinfo             CLIENTREQUESTACCESSTRADEREGISTERTRADEINFO;
typedef       ClientRequestAccessTradeRegisterTradeinfo*          LPCLIENTREQUESTACCESSTRADEREGISTERTRADEINFO;
typedef const ClientRequestAccessTradeRegisterTradeinfo*         LCPCLIENTREQUESTACCESSTRADEREGISTERTRADEINFO;


class TradeResponseAccessClientRegisterTradeinfo // 交易服务器回应网关客户端注册交易信息
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientRegisterTradeinfo          tagTradeResponseAccessClientRegisterTradeinfo;
typedef       TradeResponseAccessClientRegisterTradeinfo             TRADERESPONSEACCESSCLIENTREGISTERTRADEINFO;
typedef       TradeResponseAccessClientRegisterTradeinfo*          LPTRADERESPONSEACCESSCLIENTREGISTERTRADEINFO;
typedef const TradeResponseAccessClientRegisterTradeinfo*         LCPTRADERESPONSEACCESSCLIENTREGISTERTRADEINFO;


class AT_OnlineUserCount_Ntf // 网关通知交易服务器在线人数
{
    public: /* members */
        int32_t iTbusLen; // tbus地址长度
        char szTbus[20]; // tbus地址
        int32_t iChannel; // user channel
        int32_t iUserCount; // user count

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       AT_OnlineUserCount_Ntf          tagAT_OnlineUserCount_Ntf;
typedef       AT_OnlineUserCount_Ntf             AT_ONLINEUSERCOUNT_NTF;
typedef       AT_OnlineUserCount_Ntf*          LPAT_ONLINEUSERCOUNT_NTF;
typedef const AT_OnlineUserCount_Ntf*         LCPAT_ONLINEUSERCOUNT_NTF;


class ClientRequestAccessTradeUpdateArgue // 客户端请求网关交易服务器对订单进行评价
{
    public: /* members */
        int64_t llOrderid; // 订单id
        int32_t iScore; // 评价分数[1,5]

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeUpdateArgue          tagClientRequestAccessTradeUpdateArgue;
typedef       ClientRequestAccessTradeUpdateArgue             CLIENTREQUESTACCESSTRADEUPDATEARGUE;
typedef       ClientRequestAccessTradeUpdateArgue*          LPCLIENTREQUESTACCESSTRADEUPDATEARGUE;
typedef const ClientRequestAccessTradeUpdateArgue*         LCPCLIENTREQUESTACCESSTRADEUPDATEARGUE;


class TradeResponseAccessClientUpdateArgue // 交易服务器回应网关客户端对订单进行评价
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientUpdateArgue          tagTradeResponseAccessClientUpdateArgue;
typedef       TradeResponseAccessClientUpdateArgue             TRADERESPONSEACCESSCLIENTUPDATEARGUE;
typedef       TradeResponseAccessClientUpdateArgue*          LPTRADERESPONSEACCESSCLIENTUPDATEARGUE;
typedef const TradeResponseAccessClientUpdateArgue*         LCPTRADERESPONSEACCESSCLIENTUPDATEARGUE;


class ClientRequestAccessTradeSelectTradeUserInfo // 客户端请求网关交易服务器查询账号交易信息
{
    public: /* members */
        int64_t llUid; // uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectTradeUserInfo          tagClientRequestAccessTradeSelectTradeUserInfo;
typedef       ClientRequestAccessTradeSelectTradeUserInfo             CLIENTREQUESTACCESSTRADESELECTTRADEUSERINFO;
typedef       ClientRequestAccessTradeSelectTradeUserInfo*          LPCLIENTREQUESTACCESSTRADESELECTTRADEUSERINFO;
typedef const ClientRequestAccessTradeSelectTradeUserInfo*         LCPCLIENTREQUESTACCESSTRADESELECTTRADEUSERINFO;


class UserInfoSimp
{
    public: /* members */
        int64_t llUid; // uid
        int32_t iGold_integrity; // 诚信金
        int32_t iIntegrity_level; // 诚信金等级
        int32_t iGold_youwo; // 有我币
        int32_t iGold_game; // 游戏币
        int32_t iGold_validate; // 试金石
        int32_t iVip_level; // vip等级
        int32_t iVip_buy_time; // vip购买时间
        int32_t iVip_deadline; // vip过期时间
        int32_t iPhoto_count; // 照片数
        int64_t llCert_flags; // 认证标志
        int32_t iSincerity_value; // 诚信值
        int32_t iBusiness_value; // 业务值
        int32_t iAuthentication_value; // 担保值
        int32_t iCharm_value; // 魅力值
        int32_t iPraise; // 被赞数
        int32_t iAttended; // 被关注数
        int64_t llService; // 我的服务
        int32_t iVisitor_count; // 最近访问人数
        int32_t iGifts_num; // 礼品总数
        int32_t iGifts_pag_num; // 礼品总页数
        int64_t llExp; // 经验值
        int32_t iLevel; // 玩家等级
        int32_t iPraise_count; // 好评数
        int32_t iBad_count; // 差评数
        int32_t iRecharge; // 充值数
        int32_t iGuarantee_count; // 担保的人数
        int32_t iPromise_count; // 担保我的人数
        int32_t iDeposit_level; // 押金等级
        int32_t iDeposit_limit; // 押金上限 单位为元
        int32_t iOffline_deposit_limit; // 线下支付方式的押金上限 单位为元
        int32_t iOrder_create_fnum; // 发单完成数
        int32_t iOrder_apply_fnum; // 接单完成数
        int64_t llInterest; // 兴趣

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       UserInfoSimp          tagUserInfoSimp;
typedef       UserInfoSimp             USERINFOSIMP;
typedef       UserInfoSimp*          LPUSERINFOSIMP;
typedef const UserInfoSimp*         LCPUSERINFOSIMP;


class TradeResponseAccessClientSelectTradeUserInfo // 交易服务器回应网关客户端查询账号交易信息
{
    public: /* members */
        int32_t iResult; // 返回状态
        UserInfoSimp stUserInfoSimp; // 交易简要信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectTradeUserInfo          tagTradeResponseAccessClientSelectTradeUserInfo;
typedef       TradeResponseAccessClientSelectTradeUserInfo             TRADERESPONSEACCESSCLIENTSELECTTRADEUSERINFO;
typedef       TradeResponseAccessClientSelectTradeUserInfo*          LPTRADERESPONSEACCESSCLIENTSELECTTRADEUSERINFO;
typedef const TradeResponseAccessClientSelectTradeUserInfo*         LCPTRADERESPONSEACCESSCLIENTSELECTTRADEUSERINFO;


class ClientRequestAccessTradeUpdateService // 客户端请求网关交易服务器更新我的服务
{
    public: /* members */
        int64_t llService; // 我的服务

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeUpdateService          tagClientRequestAccessTradeUpdateService;
typedef       ClientRequestAccessTradeUpdateService             CLIENTREQUESTACCESSTRADEUPDATESERVICE;
typedef       ClientRequestAccessTradeUpdateService*          LPCLIENTREQUESTACCESSTRADEUPDATESERVICE;
typedef const ClientRequestAccessTradeUpdateService*         LCPCLIENTREQUESTACCESSTRADEUPDATESERVICE;


class TradeResponseAccessClientUpdateService // 交易服务器回应网关客户端更新我的服务
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientUpdateService          tagTradeResponseAccessClientUpdateService;
typedef       TradeResponseAccessClientUpdateService             TRADERESPONSEACCESSCLIENTUPDATESERVICE;
typedef       TradeResponseAccessClientUpdateService*          LPTRADERESPONSEACCESSCLIENTUPDATESERVICE;
typedef const TradeResponseAccessClientUpdateService*         LCPTRADERESPONSEACCESSCLIENTUPDATESERVICE;


class CT_BuyCar_Req // 买车请求
{
    public: /* members */
        int32_t iCarId; // 车辆id
        int64_t llToUid; // 买给谁
        int8_t chCurrencyType; // 货币类型 0: 试金石 1: 游戏币

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_BuyCar_Req          tagCT_BuyCar_Req;
typedef       CT_BuyCar_Req             CT_BUYCAR_REQ;
typedef       CT_BuyCar_Req*          LPCT_BUYCAR_REQ;
typedef const CT_BuyCar_Req*         LCPCT_BUYCAR_REQ;


class TC_BuyCar_Resp // 买车响应
{
    public: /* members */
        int32_t iResult; // 返回码

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_BuyCar_Resp          tagTC_BuyCar_Resp;
typedef       TC_BuyCar_Resp             TC_BUYCAR_RESP;
typedef       TC_BuyCar_Resp*          LPTC_BUYCAR_RESP;
typedef const TC_BuyCar_Resp*         LCPTC_BUYCAR_RESP;


class CT_OperateCar_Req // 操作车
{
    public: /* members */
        int32_t iCarId; // 车辆id
        int8_t chFlag; // 操作标志

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_OperateCar_Req          tagCT_OperateCar_Req;
typedef       CT_OperateCar_Req             CT_OPERATECAR_REQ;
typedef       CT_OperateCar_Req*          LPCT_OPERATECAR_REQ;
typedef const CT_OperateCar_Req*         LCPCT_OPERATECAR_REQ;


class TC_OperateCar_Resp // 操作车响应
{
    public: /* members */
        int32_t iResult; // 返回码
        int8_t chFlag; // 操作标志

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_OperateCar_Resp          tagTC_OperateCar_Resp;
typedef       TC_OperateCar_Resp             TC_OPERATECAR_RESP;
typedef       TC_OperateCar_Resp*          LPTC_OPERATECAR_RESP;
typedef const TC_OperateCar_Resp*         LCPTC_OPERATECAR_RESP;


class GiftsInfo
{
    public: /* members */
        int64_t llPresenter_uid; // 赠送者id
        int32_t iTime; // 赠送时间
        int32_t iGiftsid; // 礼品id
        int32_t iGiftscount; // 礼品个数

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       GiftsInfo          tagGiftsInfo;
typedef       GiftsInfo             GIFTSINFO;
typedef       GiftsInfo*          LPGIFTSINFO;
typedef const GiftsInfo*         LCPGIFTSINFO;


class ClientRequestAccessTradeSelectGifts // 客户端请求网关交易服务器查看礼物信息
{
    public: /* members */
        int64_t llGiftsPagid; // 礼品页面id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectGifts          tagClientRequestAccessTradeSelectGifts;
typedef       ClientRequestAccessTradeSelectGifts             CLIENTREQUESTACCESSTRADESELECTGIFTS;
typedef       ClientRequestAccessTradeSelectGifts*          LPCLIENTREQUESTACCESSTRADESELECTGIFTS;
typedef const ClientRequestAccessTradeSelectGifts*         LCPCLIENTREQUESTACCESSTRADESELECTGIFTS;


class TradeResponseAccessClientSelectGifts // 交易服务器回应网关客户端查看礼物信息
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iGiftsInpagNum; // 本页礼品信息数量
        GiftsInfo astGiftsInfoList[TRADE_GIFTS_MAX_COUNT]; // 礼物列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectGifts          tagTradeResponseAccessClientSelectGifts;
typedef       TradeResponseAccessClientSelectGifts             TRADERESPONSEACCESSCLIENTSELECTGIFTS;
typedef       TradeResponseAccessClientSelectGifts*          LPTRADERESPONSEACCESSCLIENTSELECTGIFTS;
typedef const TradeResponseAccessClientSelectGifts*         LCPTRADERESPONSEACCESSCLIENTSELECTGIFTS;


class ClientRequestAccessTradePresentGifts // 客户端请求网关交易服务器赠送礼物
{
    public: /* members */
        int64_t llReceive_uid; // 收礼物者id
        int32_t iGiftsid; // 礼品id
        int32_t iGiftscount; // 礼品个数

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradePresentGifts          tagClientRequestAccessTradePresentGifts;
typedef       ClientRequestAccessTradePresentGifts             CLIENTREQUESTACCESSTRADEPRESENTGIFTS;
typedef       ClientRequestAccessTradePresentGifts*          LPCLIENTREQUESTACCESSTRADEPRESENTGIFTS;
typedef const ClientRequestAccessTradePresentGifts*         LCPCLIENTREQUESTACCESSTRADEPRESENTGIFTS;


class TradeResponseAccessClientPresentGifts // 交易服务器回应网关客户端赠送礼物
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientPresentGifts          tagTradeResponseAccessClientPresentGifts;
typedef       TradeResponseAccessClientPresentGifts             TRADERESPONSEACCESSCLIENTPRESENTGIFTS;
typedef       TradeResponseAccessClientPresentGifts*          LPTRADERESPONSEACCESSCLIENTPRESENTGIFTS;
typedef const TradeResponseAccessClientPresentGifts*         LCPTRADERESPONSEACCESSCLIENTPRESENTGIFTS;


class CT_GuaranteeFriend_Req // 担保好友请求
{
    public: /* members */
        int64_t llFriendUid; // 好友uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_GuaranteeFriend_Req          tagCT_GuaranteeFriend_Req;
typedef       CT_GuaranteeFriend_Req             CT_GUARANTEEFRIEND_REQ;
typedef       CT_GuaranteeFriend_Req*          LPCT_GUARANTEEFRIEND_REQ;
typedef const CT_GuaranteeFriend_Req*         LCPCT_GUARANTEEFRIEND_REQ;


class TC_GuaranteeFriend_Resp // 担保好友响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_GuaranteeFriend_Resp          tagTC_GuaranteeFriend_Resp;
typedef       TC_GuaranteeFriend_Resp             TC_GUARANTEEFRIEND_RESP;
typedef       TC_GuaranteeFriend_Resp*          LPTC_GUARANTEEFRIEND_RESP;
typedef const TC_GuaranteeFriend_Resp*         LCPTC_GUARANTEEFRIEND_RESP;


class CT_CancelGuaranteeFriend_Req // 取消担保好友请求
{
    public: /* members */
        int64_t llFriendUid; // 好友uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_CancelGuaranteeFriend_Req          tagCT_CancelGuaranteeFriend_Req;
typedef       CT_CancelGuaranteeFriend_Req             CT_CANCELGUARANTEEFRIEND_REQ;
typedef       CT_CancelGuaranteeFriend_Req*          LPCT_CANCELGUARANTEEFRIEND_REQ;
typedef const CT_CancelGuaranteeFriend_Req*         LCPCT_CANCELGUARANTEEFRIEND_REQ;


class TC_CancelGuaranteeFriend_Resp // 取消担保好友响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_CancelGuaranteeFriend_Resp          tagTC_CancelGuaranteeFriend_Resp;
typedef       TC_CancelGuaranteeFriend_Resp             TC_CANCELGUARANTEEFRIEND_RESP;
typedef       TC_CancelGuaranteeFriend_Resp*          LPTC_CANCELGUARANTEEFRIEND_RESP;
typedef const TC_CancelGuaranteeFriend_Resp*         LCPTC_CANCELGUARANTEEFRIEND_RESP;


class CT_QueryGuaranteeFriend_Req // 查询担保好友请求
{
    public: /* members */
        int64_t llUid; // 好友uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_QueryGuaranteeFriend_Req          tagCT_QueryGuaranteeFriend_Req;
typedef       CT_QueryGuaranteeFriend_Req             CT_QUERYGUARANTEEFRIEND_REQ;
typedef       CT_QueryGuaranteeFriend_Req*          LPCT_QUERYGUARANTEEFRIEND_REQ;
typedef const CT_QueryGuaranteeFriend_Req*         LCPCT_QUERYGUARANTEEFRIEND_REQ;


class TC_QueryGuaranteeFriend_Resp // 查询担保好友响应
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iGuaranteeCount; // 担保的好友个数
        int64_t guaranteeUidList[MAX_GUARANTEE_FRIEND_COUNT]; // 担保的好友uid 列表
        int32_t iPromiseCount; // 多少人担保了我
        int64_t promiseUidList[MAX_GUARANTEE_FRIEND_COUNT]; // 担保我的人uid 列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_QueryGuaranteeFriend_Resp          tagTC_QueryGuaranteeFriend_Resp;
typedef       TC_QueryGuaranteeFriend_Resp             TC_QUERYGUARANTEEFRIEND_RESP;
typedef       TC_QueryGuaranteeFriend_Resp*          LPTC_QUERYGUARANTEEFRIEND_RESP;
typedef const TC_QueryGuaranteeFriend_Resp*         LCPTC_QUERYGUARANTEEFRIEND_RESP;


class CT_QuerySelfGuarantee_Req // 查询我担保的人请求
{
    public: /* members */
        int64_t llUid; // 好友uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_QuerySelfGuarantee_Req          tagCT_QuerySelfGuarantee_Req;
typedef       CT_QuerySelfGuarantee_Req             CT_QUERYSELFGUARANTEE_REQ;
typedef       CT_QuerySelfGuarantee_Req*          LPCT_QUERYSELFGUARANTEE_REQ;
typedef const CT_QuerySelfGuarantee_Req*         LCPCT_QUERYSELFGUARANTEE_REQ;


class TC_QuerySelfGuarantee_Resp // 查询担保好友响应
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iGuaranteeCount; // 担保的好友个数
        int64_t guaranteeUidList[MAX_GUARANTEE_FRIEND_COUNT]; // 担保的好友uid 列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_QuerySelfGuarantee_Resp          tagTC_QuerySelfGuarantee_Resp;
typedef       TC_QuerySelfGuarantee_Resp             TC_QUERYSELFGUARANTEE_RESP;
typedef       TC_QuerySelfGuarantee_Resp*          LPTC_QUERYSELFGUARANTEE_RESP;
typedef const TC_QuerySelfGuarantee_Resp*         LCPTC_QUERYSELFGUARANTEE_RESP;


class CT_QueryPromiseSelf_Req // 查询担保了我的人信息请求
{
    public: /* members */
        int64_t llUid; // 好友uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_QueryPromiseSelf_Req          tagCT_QueryPromiseSelf_Req;
typedef       CT_QueryPromiseSelf_Req             CT_QUERYPROMISESELF_REQ;
typedef       CT_QueryPromiseSelf_Req*          LPCT_QUERYPROMISESELF_REQ;
typedef const CT_QueryPromiseSelf_Req*         LCPCT_QUERYPROMISESELF_REQ;


class TC_QueryPromiseSelf_Resp // 查询担保了我的人信息响应
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iPromiseCount; // 多少人担保了我
        int64_t promiseUidList[MAX_GUARANTEE_FRIEND_COUNT]; // 担保我的人uid 列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_QueryPromiseSelf_Resp          tagTC_QueryPromiseSelf_Resp;
typedef       TC_QueryPromiseSelf_Resp             TC_QUERYPROMISESELF_RESP;
typedef       TC_QueryPromiseSelf_Resp*          LPTC_QUERYPROMISESELF_RESP;
typedef const TC_QueryPromiseSelf_Resp*         LCPTC_QUERYPROMISESELF_RESP;


class TaskInfo
{
    public: /* members */
        int32_t iTasktype; // 任务类型
        int32_t iAccomplish; // 完成进度
        int32_t iStatus; // 领取状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TaskInfo          tagTaskInfo;
typedef       TaskInfo             TASKINFO;
typedef       TaskInfo*          LPTASKINFO;
typedef const TaskInfo*         LCPTASKINFO;


class TaskStaticInfo
{
    public: /* members */
        int32_t iTasktype; // 任务类型ID
        int32_t iTaskNameLen; // 任务名称长度
        char szTaskName[TRADE_TASK_NAME_MAX_LEN]; // 任务名称长度
        int32_t iTaskCondition; // 任务完成条件(用次数表示)
        int32_t iTaskCompleteLimit; // 任务可完成次数
        int32_t iTaskAwardType; // 任务奖励类型
        int32_t iTaskAwardAmount; // 任务奖励数量

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TaskStaticInfo          tagTaskStaticInfo;
typedef       TaskStaticInfo             TASKSTATICINFO;
typedef       TaskStaticInfo*          LPTASKSTATICINFO;
typedef const TaskStaticInfo*         LCPTASKSTATICINFO;


class TaskMultiInfo
{
    public: /* members */
        TaskInfo stTaskDynaInfo; // 用户进度相关信息
        TaskStaticInfo stTaskStaticInfo; // 该任务相关静态信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TaskMultiInfo          tagTaskMultiInfo;
typedef       TaskMultiInfo             TASKMULTIINFO;
typedef       TaskMultiInfo*          LPTASKMULTIINFO;
typedef const TaskMultiInfo*         LCPTASKMULTIINFO;


class ClientRequestAccessTradeSelectTaskInfo // 客户端请求网关交易服务器查询任务信息
{
    public: /* members */
        int64_t llUid; // uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectTaskInfo          tagClientRequestAccessTradeSelectTaskInfo;
typedef       ClientRequestAccessTradeSelectTaskInfo             CLIENTREQUESTACCESSTRADESELECTTASKINFO;
typedef       ClientRequestAccessTradeSelectTaskInfo*          LPCLIENTREQUESTACCESSTRADESELECTTASKINFO;
typedef const ClientRequestAccessTradeSelectTaskInfo*         LCPCLIENTREQUESTACCESSTRADESELECTTASKINFO;


class TradeResponseAccessClientSelectTaskInfo // 交易服务器回应网关客户端查询任务信息
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iTaskInfoNum; // 任务信息数量
        TaskMultiInfo astTaskInfoList[TRADE_TASK_MAX_COUNT]; // 任务列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectTaskInfo          tagTradeResponseAccessClientSelectTaskInfo;
typedef       TradeResponseAccessClientSelectTaskInfo             TRADERESPONSEACCESSCLIENTSELECTTASKINFO;
typedef       TradeResponseAccessClientSelectTaskInfo*          LPTRADERESPONSEACCESSCLIENTSELECTTASKINFO;
typedef const TradeResponseAccessClientSelectTaskInfo*         LCPTRADERESPONSEACCESSCLIENTSELECTTASKINFO;


class ClientRequestAccessTradeSellGifts // 客户端请求网关交易服务器出售礼物
{
    public: /* members */
        int64_t llGiftsPagID; // 礼品页id
        int32_t iGiftsPagIndex; // 礼品页下标

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSellGifts          tagClientRequestAccessTradeSellGifts;
typedef       ClientRequestAccessTradeSellGifts             CLIENTREQUESTACCESSTRADESELLGIFTS;
typedef       ClientRequestAccessTradeSellGifts*          LPCLIENTREQUESTACCESSTRADESELLGIFTS;
typedef const ClientRequestAccessTradeSellGifts*         LCPCLIENTREQUESTACCESSTRADESELLGIFTS;


class TradeResponseAccessClientSellGifts // 交易服务器回应网关客户端出售礼物
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSellGifts          tagTradeResponseAccessClientSellGifts;
typedef       TradeResponseAccessClientSellGifts             TRADERESPONSEACCESSCLIENTSELLGIFTS;
typedef       TradeResponseAccessClientSellGifts*          LPTRADERESPONSEACCESSCLIENTSELLGIFTS;
typedef const TradeResponseAccessClientSellGifts*         LCPTRADERESPONSEACCESSCLIENTSELLGIFTS;


class ClientGetThirdPartyPayTokenReq // 客户端请求获取第三方支付token
{
    public: /* members */
        int16_t nThirdPartyPayTokenIndex; // 第三方支付token 索引， 1表示要查询微信的token，2表示要查询阿里支付的token

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientGetThirdPartyPayTokenReq          tagClientGetThirdPartyPayTokenReq;
typedef       ClientGetThirdPartyPayTokenReq             CLIENTGETTHIRDPARTYPAYTOKENREQ;
typedef       ClientGetThirdPartyPayTokenReq*          LPCLIENTGETTHIRDPARTYPAYTOKENREQ;
typedef const ClientGetThirdPartyPayTokenReq*         LCPCLIENTGETTHIRDPARTYPAYTOKENREQ;


class ClientGetThirdPartyPayTokenResp // 网关回应 客户端请求获取第三方支付token
{
    public: /* members */
        int32_t iResult; // 返回状态 0表示正确，其他为错误
        int32_t iTokenValueLen; // token值的长度
        char szTokenValue[ACCESS_THIRDPARTY_PAY_TOKEN_MAX_LEN]; // token值
        int64_t llTokenValidTime; // token 有效时长
        int64_t llTokenCreateTime; // 生成token 的时刻

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientGetThirdPartyPayTokenResp          tagClientGetThirdPartyPayTokenResp;
typedef       ClientGetThirdPartyPayTokenResp             CLIENTGETTHIRDPARTYPAYTOKENRESP;
typedef       ClientGetThirdPartyPayTokenResp*          LPCLIENTGETTHIRDPARTYPAYTOKENRESP;
typedef const ClientGetThirdPartyPayTokenResp*         LCPCLIENTGETTHIRDPARTYPAYTOKENRESP;


class ClientGeneratePayOrderReq // 生成支付订单
{
    public: /* members */
        int32_t iPrice; // 单价(以分为单位)
        int32_t iQuantity; // 数量
        int8_t chItemType; // 物品类型(已经定义客户端和服务端公用的枚举值)
        int16_t nItemNameLen; // 购买的商品名称 长度
        char szItemName[TRADE_ITEM_NAME_MAX_LEN]; // 购买的商品名称
        int8_t chChannelId; // 渠道ID(暂时保留)
        int8_t chPayWay; // 支付方式(已经定义客户端和服务端公用的枚举值)
        int8_t chPaymentType; // 支付类型(购买、提取)(已经定义客户端和服务端公用的枚举值)
        int8_t chAppVersionLen; // 应用 版本号 长度
        char szAppVersion[TRADE_APP_VERSION_MAX_LEN]; // 应用 版本号

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientGeneratePayOrderReq          tagClientGeneratePayOrderReq;
typedef       ClientGeneratePayOrderReq             CLIENTGENERATEPAYORDERREQ;
typedef       ClientGeneratePayOrderReq*          LPCLIENTGENERATEPAYORDERREQ;
typedef const ClientGeneratePayOrderReq*         LCPCLIENTGENERATEPAYORDERREQ;


class ClientGeneratePayOrderResp // 生成支付订单 响应
{
    public: /* members */
        int32_t iResult; // 生成支付订单 结果
        int64_t llPayOrderId; // 支付订单ID
        int32_t iSecurityInfoLen; // 支付宝安全性信息长度
        char szSecurityInfo[SECURITY_INFO_MAX_LEN]; // 支付宝安全性信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
            VERSION_iSecurityInfoLen = 2,
            VERSION_szSecurityInfo = 2,
        };
};

typedef       ClientGeneratePayOrderResp          tagClientGeneratePayOrderResp;
typedef       ClientGeneratePayOrderResp             CLIENTGENERATEPAYORDERRESP;
typedef       ClientGeneratePayOrderResp*          LPCLIENTGENERATEPAYORDERRESP;
typedef const ClientGeneratePayOrderResp*         LCPCLIENTGENERATEPAYORDERRESP;


class TradeNotifyClientPayResult // 通知支付结果给客户端
{
    public: /* members */
        int32_t iResult; // 结果
        int64_t llPayOrderId; // 支付订单ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeNotifyClientPayResult          tagTradeNotifyClientPayResult;
typedef       TradeNotifyClientPayResult             TRADENOTIFYCLIENTPAYRESULT;
typedef       TradeNotifyClientPayResult*          LPTRADENOTIFYCLIENTPAYRESULT;
typedef const TradeNotifyClientPayResult*         LCPTRADENOTIFYCLIENTPAYRESULT;


class ClientExchangeStoneOrCurrencyReq // 客户端请求用有我币兑换游戏币或者试金石
{
    public: /* members */
        int64_t llUid; // 用户id
        int8_t chItemType; // 要兑换的物品类型(已经定义客户端和服务端公用的枚举值)
        int32_t iQuantity; // 要兑换的物品数量
        int32_t iYouWoCoinQuantity; // 所需要的有我币的数量

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientExchangeStoneOrCurrencyReq          tagClientExchangeStoneOrCurrencyReq;
typedef       ClientExchangeStoneOrCurrencyReq             CLIENTEXCHANGESTONEORCURRENCYREQ;
typedef       ClientExchangeStoneOrCurrencyReq*          LPCLIENTEXCHANGESTONEORCURRENCYREQ;
typedef const ClientExchangeStoneOrCurrencyReq*         LCPCLIENTEXCHANGESTONEORCURRENCYREQ;


class ClientExchangeStoneOrCurrencyResp // 客户端请求用有我币兑换游戏币或者试金石 响应
{
    public: /* members */
        int32_t iResult; // 客户端请求用有我币兑换游戏币或者试金石 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientExchangeStoneOrCurrencyResp          tagClientExchangeStoneOrCurrencyResp;
typedef       ClientExchangeStoneOrCurrencyResp             CLIENTEXCHANGESTONEORCURRENCYRESP;
typedef       ClientExchangeStoneOrCurrencyResp*          LPCLIENTEXCHANGESTONEORCURRENCYRESP;
typedef const ClientExchangeStoneOrCurrencyResp*         LCPCLIENTEXCHANGESTONEORCURRENCYRESP;


class ClientWithdrawHonestyGoldReq // 客户端请求提取诚信金
{
    public: /* members */
        int64_t llUid; // 用户id
        int32_t iQuantity; // 要提取的数量
        int32_t iCurrencyType; // 货币类型 
        int16_t nBuyerPayAccountLen; // 买家用户的支付宝或者微信账号
        char szBuyerPayAccount[TRADE_BUYER_PAY_ACCOUNT_MAX_LEN]; // 买家用户的支付宝或者微信账号
        int32_t iAccountType; // 账户类型

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientWithdrawHonestyGoldReq          tagClientWithdrawHonestyGoldReq;
typedef       ClientWithdrawHonestyGoldReq             CLIENTWITHDRAWHONESTYGOLDREQ;
typedef       ClientWithdrawHonestyGoldReq*          LPCLIENTWITHDRAWHONESTYGOLDREQ;
typedef const ClientWithdrawHonestyGoldReq*         LCPCLIENTWITHDRAWHONESTYGOLDREQ;


class ClientWithdrawHonestyGoldResp // 客户端请求提取诚信金 响应
{
    public: /* members */
        int32_t iResult; // 客户端请求提取诚信金 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientWithdrawHonestyGoldResp          tagClientWithdrawHonestyGoldResp;
typedef       ClientWithdrawHonestyGoldResp             CLIENTWITHDRAWHONESTYGOLDRESP;
typedef       ClientWithdrawHonestyGoldResp*          LPCLIENTWITHDRAWHONESTYGOLDRESP;
typedef const ClientWithdrawHonestyGoldResp*         LCPCLIENTWITHDRAWHONESTYGOLDRESP;


class ClientRequestAccessTradeSelectUserInfoList // 客户端请求网关交易服务器查询多人账号交易信息
{
    public: /* members */
        int32_t iUidCount; // 用户ID个数
        int64_t uidList[MAX_SELECT_USER_INFO_LIST_COUNT]; // 用户ID列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectUserInfoList          tagClientRequestAccessTradeSelectUserInfoList;
typedef       ClientRequestAccessTradeSelectUserInfoList             CLIENTREQUESTACCESSTRADESELECTUSERINFOLIST;
typedef       ClientRequestAccessTradeSelectUserInfoList*          LPCLIENTREQUESTACCESSTRADESELECTUSERINFOLIST;
typedef const ClientRequestAccessTradeSelectUserInfoList*         LCPCLIENTREQUESTACCESSTRADESELECTUSERINFOLIST;


class TradeResponseAccessClientSelectUserInfoList // 交易服务器回应网关客户端查询多人账号交易信息
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iUserInfoCount; // 查询到的多人账号交易信息个数
        UserInfoSimp astUserInfoList[MAX_SELECT_USER_INFO_LIST_COUNT]; // 多人账号交易信息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectUserInfoList          tagTradeResponseAccessClientSelectUserInfoList;
typedef       TradeResponseAccessClientSelectUserInfoList             TRADERESPONSEACCESSCLIENTSELECTUSERINFOLIST;
typedef       TradeResponseAccessClientSelectUserInfoList*          LPTRADERESPONSEACCESSCLIENTSELECTUSERINFOLIST;
typedef const TradeResponseAccessClientSelectUserInfoList*         LCPTRADERESPONSEACCESSCLIENTSELECTUSERINFOLIST;


class ClientRequestAccessTradeUpLevelVip // 客户端请求网关交易服务器升级vip等级
{
    public: /* members */
        int32_t iVipInfoId; // 要升vip信息id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeUpLevelVip          tagClientRequestAccessTradeUpLevelVip;
typedef       ClientRequestAccessTradeUpLevelVip             CLIENTREQUESTACCESSTRADEUPLEVELVIP;
typedef       ClientRequestAccessTradeUpLevelVip*          LPCLIENTREQUESTACCESSTRADEUPLEVELVIP;
typedef const ClientRequestAccessTradeUpLevelVip*         LCPCLIENTREQUESTACCESSTRADEUPLEVELVIP;


class TradeResponseAccessClientUpLevelVip // 交易服务器回应网关客户端升级vip等级
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientUpLevelVip          tagTradeResponseAccessClientUpLevelVip;
typedef       TradeResponseAccessClientUpLevelVip             TRADERESPONSEACCESSCLIENTUPLEVELVIP;
typedef       TradeResponseAccessClientUpLevelVip*          LPTRADERESPONSEACCESSCLIENTUPLEVELVIP;
typedef const TradeResponseAccessClientUpLevelVip*         LCPTRADERESPONSEACCESSCLIENTUPLEVELVIP;


class ClientRequestAccessTradeGetChatRoomInfoList // 客户端请求网关交易服务器获取当前火热聊天室信息列表
{
    public: /* members */
        int64_t llUid; // uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeGetChatRoomInfoList          tagClientRequestAccessTradeGetChatRoomInfoList;
typedef       ClientRequestAccessTradeGetChatRoomInfoList             CLIENTREQUESTACCESSTRADEGETCHATROOMINFOLIST;
typedef       ClientRequestAccessTradeGetChatRoomInfoList*          LPCLIENTREQUESTACCESSTRADEGETCHATROOMINFOLIST;
typedef const ClientRequestAccessTradeGetChatRoomInfoList*         LCPCLIENTREQUESTACCESSTRADEGETCHATROOMINFOLIST;


class ChatRoomData
{
    public: /* members */
        int32_t i_size; // 数据长度
        char sz_value[MAX_CHATROOMDATA_SIZE]; // 数据内容

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ChatRoomData          tagChatRoomData;
typedef       ChatRoomData             CHATROOMDATA;
typedef       ChatRoomData*          LPCHATROOMDATA;
typedef const ChatRoomData*         LCPCHATROOMDATA;


class ChatRoomInfo
{
    public: /* members */
        int32_t iIndex; // Index
        ChatRoomData stRoomid; // 聊天室ID
        ChatRoomData stName; // 聊天室名称
        int64_t llIconid; // iconid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ChatRoomInfo          tagChatRoomInfo;
typedef       ChatRoomInfo             CHATROOMINFO;
typedef       ChatRoomInfo*          LPCHATROOMINFO;
typedef const ChatRoomInfo*         LCPCHATROOMINFO;


class TradeResponseAccessClientGetChatRoomInfoList // 交易服务器回应网关客户端获取当前火热聊天室信息列表
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iChatRoomCount; // 返回的聊天室数量
        ChatRoomInfo astChatRoomInfoList[MAX_CHATROOM_COUNT]; // 火热聊天室列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientGetChatRoomInfoList          tagTradeResponseAccessClientGetChatRoomInfoList;
typedef       TradeResponseAccessClientGetChatRoomInfoList             TRADERESPONSEACCESSCLIENTGETCHATROOMINFOLIST;
typedef       TradeResponseAccessClientGetChatRoomInfoList*          LPTRADERESPONSEACCESSCLIENTGETCHATROOMINFOLIST;
typedef const TradeResponseAccessClientGetChatRoomInfoList*         LCPTRADERESPONSEACCESSCLIENTGETCHATROOMINFOLIST;


class ClientRequestAccessTradeSelectGiftsPagidList // 客户端请求网关交易服务器查询礼物页ID列表
{
    public: /* members */
        int64_t llUid; // uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectGiftsPagidList          tagClientRequestAccessTradeSelectGiftsPagidList;
typedef       ClientRequestAccessTradeSelectGiftsPagidList             CLIENTREQUESTACCESSTRADESELECTGIFTSPAGIDLIST;
typedef       ClientRequestAccessTradeSelectGiftsPagidList*          LPCLIENTREQUESTACCESSTRADESELECTGIFTSPAGIDLIST;
typedef const ClientRequestAccessTradeSelectGiftsPagidList*         LCPCLIENTREQUESTACCESSTRADESELECTGIFTSPAGIDLIST;


class TradeResponseAccessClientSelectGiftsPagidList // 交易服务器回应网关客户端查询礼物页ID列表
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iGifts_num; // 礼品总数
        int32_t iGifts_pag_num; // 礼品总页数
        int64_t gifts_pagid[256]; // 礼品页面id列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectGiftsPagidList          tagTradeResponseAccessClientSelectGiftsPagidList;
typedef       TradeResponseAccessClientSelectGiftsPagidList             TRADERESPONSEACCESSCLIENTSELECTGIFTSPAGIDLIST;
typedef       TradeResponseAccessClientSelectGiftsPagidList*          LPTRADERESPONSEACCESSCLIENTSELECTGIFTSPAGIDLIST;
typedef const TradeResponseAccessClientSelectGiftsPagidList*         LCPTRADERESPONSEACCESSCLIENTSELECTGIFTSPAGIDLIST;


class ClientRequestAccessTradeSelectIdentityBank // 客户端请求网关交易服务器查询身份证银行卡信息
{
    public: /* members */
        int64_t llUid; // uid 只能查询自己的内容

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectIdentityBank          tagClientRequestAccessTradeSelectIdentityBank;
typedef       ClientRequestAccessTradeSelectIdentityBank             CLIENTREQUESTACCESSTRADESELECTIDENTITYBANK;
typedef       ClientRequestAccessTradeSelectIdentityBank*          LPCLIENTREQUESTACCESSTRADESELECTIDENTITYBANK;
typedef const ClientRequestAccessTradeSelectIdentityBank*         LCPCLIENTREQUESTACCESSTRADESELECTIDENTITYBANK;


class TradeResponseAccessClientSelectIdentityBank // 交易服务器回应网关客户端查询身份证银行卡信息
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iIdentity_card_count; // 身份证号码信息长度
        char szIdentity_card[20]; // 身份证号码信息
        int32_t iBank_card_count; // 银行卡号长度
        char szBank_card[32]; // 银行卡号

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectIdentityBank          tagTradeResponseAccessClientSelectIdentityBank;
typedef       TradeResponseAccessClientSelectIdentityBank             TRADERESPONSEACCESSCLIENTSELECTIDENTITYBANK;
typedef       TradeResponseAccessClientSelectIdentityBank*          LPTRADERESPONSEACCESSCLIENTSELECTIDENTITYBANK;
typedef const TradeResponseAccessClientSelectIdentityBank*         LCPTRADERESPONSEACCESSCLIENTSELECTIDENTITYBANK;


class CT_UserComplaint_Req // 用户投诉
{
    public: /* members */
        int64_t llCom_uid; // 投诉者uid
        int64_t llCom_phone; // 投诉者电话
        int64_t llTo_uid; // 投诉对象uid
        int64_t llTo_phone; // 投诉对象电话
        int32_t iDescLen; // 描述长度
        char szDesc[MAX_USER_COMPLAINT_DESC_LEN]; // 投诉描述
        int64_t llOrder_id; // 订单号

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_UserComplaint_Req          tagCT_UserComplaint_Req;
typedef       CT_UserComplaint_Req             CT_USERCOMPLAINT_REQ;
typedef       CT_UserComplaint_Req*          LPCT_USERCOMPLAINT_REQ;
typedef const CT_UserComplaint_Req*         LCPCT_USERCOMPLAINT_REQ;


class TC_UserComplaint_Resp // 用户投诉响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_UserComplaint_Resp          tagTC_UserComplaint_Resp;
typedef       TC_UserComplaint_Resp             TC_USERCOMPLAINT_RESP;
typedef       TC_UserComplaint_Resp*          LPTC_USERCOMPLAINT_RESP;
typedef const TC_UserComplaint_Resp*         LCPTC_USERCOMPLAINT_RESP;


class ClientRequestAccessTradeSelectVisitorsList // 客户端请求网关交易服务器查询最近访问列表
{
    public: /* members */
        int64_t llUid; // uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectVisitorsList          tagClientRequestAccessTradeSelectVisitorsList;
typedef       ClientRequestAccessTradeSelectVisitorsList             CLIENTREQUESTACCESSTRADESELECTVISITORSLIST;
typedef       ClientRequestAccessTradeSelectVisitorsList*          LPCLIENTREQUESTACCESSTRADESELECTVISITORSLIST;
typedef const ClientRequestAccessTradeSelectVisitorsList*         LCPCLIENTREQUESTACCESSTRADESELECTVISITORSLIST;


class TradeResponseAccessClientSelectVisitorsList // 交易服务器回应网关客户端查询最近访问列表
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iVisitor_count; // 最近访问人数
        int64_t visitors[32]; // 最近访问

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectVisitorsList          tagTradeResponseAccessClientSelectVisitorsList;
typedef       TradeResponseAccessClientSelectVisitorsList             TRADERESPONSEACCESSCLIENTSELECTVISITORSLIST;
typedef       TradeResponseAccessClientSelectVisitorsList*          LPTRADERESPONSEACCESSCLIENTSELECTVISITORSLIST;
typedef const TradeResponseAccessClientSelectVisitorsList*         LCPTRADERESPONSEACCESSCLIENTSELECTVISITORSLIST;


class ClientRequestAccessTradeSelectParticulars // 客户端请求网关交易服务器查询详细描述
{
    public: /* members */
        int64_t llOrderid; // 订单id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectParticulars          tagClientRequestAccessTradeSelectParticulars;
typedef       ClientRequestAccessTradeSelectParticulars             CLIENTREQUESTACCESSTRADESELECTPARTICULARS;
typedef       ClientRequestAccessTradeSelectParticulars*          LPCLIENTREQUESTACCESSTRADESELECTPARTICULARS;
typedef const ClientRequestAccessTradeSelectParticulars*         LCPCLIENTREQUESTACCESSTRADESELECTPARTICULARS;


class TradeResponseAccessClientSelectParticulars // 交易服务器回应网关客户端查询详细描述
{
    public: /* members */
        int32_t iResult; // 返回状态
        uint32_t dwParticularsLen; // 详细描述长度
        char szParticulars[512]; // 详细描述

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectParticulars          tagTradeResponseAccessClientSelectParticulars;
typedef       TradeResponseAccessClientSelectParticulars             TRADERESPONSEACCESSCLIENTSELECTPARTICULARS;
typedef       TradeResponseAccessClientSelectParticulars*          LPTRADERESPONSEACCESSCLIENTSELECTPARTICULARS;
typedef const TradeResponseAccessClientSelectParticulars*         LCPTRADERESPONSEACCESSCLIENTSELECTPARTICULARS;


class ClientRequestAccessTradeOrderDone // 客户端请求网关交易服务器完成订单
{
    public: /* members */
        int64_t llOrderid; // 订单id
        int32_t iRequestType; // eREQUEST_ORDER_DONE_TYPE 0普通请求完成，1强制请求完成

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeOrderDone          tagClientRequestAccessTradeOrderDone;
typedef       ClientRequestAccessTradeOrderDone             CLIENTREQUESTACCESSTRADEORDERDONE;
typedef       ClientRequestAccessTradeOrderDone*          LPCLIENTREQUESTACCESSTRADEORDERDONE;
typedef const ClientRequestAccessTradeOrderDone*         LCPCLIENTREQUESTACCESSTRADEORDERDONE;


class TradeRsponseAccessClientOrderDone // 交易服务器回应网关客户端完成订单
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeRsponseAccessClientOrderDone          tagTradeRsponseAccessClientOrderDone;
typedef       TradeRsponseAccessClientOrderDone             TRADERSPONSEACCESSCLIENTORDERDONE;
typedef       TradeRsponseAccessClientOrderDone*          LPTRADERSPONSEACCESSCLIENTORDERDONE;
typedef const TradeRsponseAccessClientOrderDone*         LCPTRADERSPONSEACCESSCLIENTORDERDONE;


class ClientRequestAccessTradeOrderClosedown // 客户端请求网关交易服务器关闭订单
{
    public: /* members */
        int64_t llOrderid; // 订单id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeOrderClosedown          tagClientRequestAccessTradeOrderClosedown;
typedef       ClientRequestAccessTradeOrderClosedown             CLIENTREQUESTACCESSTRADEORDERCLOSEDOWN;
typedef       ClientRequestAccessTradeOrderClosedown*          LPCLIENTREQUESTACCESSTRADEORDERCLOSEDOWN;
typedef const ClientRequestAccessTradeOrderClosedown*         LCPCLIENTREQUESTACCESSTRADEORDERCLOSEDOWN;


class TradeRsponseAccessClientOrderClosedown // 交易服务器回应网关客户端关闭订单
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeRsponseAccessClientOrderClosedown          tagTradeRsponseAccessClientOrderClosedown;
typedef       TradeRsponseAccessClientOrderClosedown             TRADERSPONSEACCESSCLIENTORDERCLOSEDOWN;
typedef       TradeRsponseAccessClientOrderClosedown*          LPTRADERSPONSEACCESSCLIENTORDERCLOSEDOWN;
typedef const TradeRsponseAccessClientOrderClosedown*         LCPTRADERSPONSEACCESSCLIENTORDERCLOSEDOWN;


class ApplyerUserInfo
{
    public: /* members */
        int64_t llUid; // uid
        int64_t llPortrait; // 头像id
        int32_t iNickNameLen; // 昵称长度
        char szNickName[ACCESS_NICK_NAME_LEN]; // 昵称
        int64_t llBirthday; // 生日
        uint8_t bGender; // 性别
        int32_t iIntegrity_level; // 诚信金等级
        int64_t llLongitude; // 订单经度
        int64_t llDimension; // 订单维度
        int32_t iIsFriend; // 是否是好友
        int32_t iSincerityValue; // 信誉值
        int32_t iOrderApplyFiniCount; // 接单完成数

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ApplyerUserInfo          tagApplyerUserInfo;
typedef       ApplyerUserInfo             APPLYERUSERINFO;
typedef       ApplyerUserInfo*          LPAPPLYERUSERINFO;
typedef const ApplyerUserInfo*         LCPAPPLYERUSERINFO;


class ClientRequestAccessTradeSelectApplyerUserInfoList // 客户端请求网关交易服务器查询报名者信息列表
{
    public: /* members */
        int32_t iUidCount; // 用户ID个数
        int64_t uidList[MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT]; // 用户ID列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectApplyerUserInfoList          tagClientRequestAccessTradeSelectApplyerUserInfoList;
typedef       ClientRequestAccessTradeSelectApplyerUserInfoList             CLIENTREQUESTACCESSTRADESELECTAPPLYERUSERINFOLIST;
typedef       ClientRequestAccessTradeSelectApplyerUserInfoList*          LPCLIENTREQUESTACCESSTRADESELECTAPPLYERUSERINFOLIST;
typedef const ClientRequestAccessTradeSelectApplyerUserInfoList*         LCPCLIENTREQUESTACCESSTRADESELECTAPPLYERUSERINFOLIST;


class TradeResponseAccessClientSelectApplyerUserInfoList // 交易服务器回应网关客户端查询报名者信息列表
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iApplyerUserInfoCount; // 查询到的报名者信息个数
        ApplyerUserInfo astApplyerUserInfoList[MAX_SELECT_APPLYER_USER_INFO_LIST_COUNT]; // 报名者信息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectApplyerUserInfoList          tagTradeResponseAccessClientSelectApplyerUserInfoList;
typedef       TradeResponseAccessClientSelectApplyerUserInfoList             TRADERESPONSEACCESSCLIENTSELECTAPPLYERUSERINFOLIST;
typedef       TradeResponseAccessClientSelectApplyerUserInfoList*          LPTRADERESPONSEACCESSCLIENTSELECTAPPLYERUSERINFOLIST;
typedef const TradeResponseAccessClientSelectApplyerUserInfoList*         LCPTRADERESPONSEACCESSCLIENTSELECTAPPLYERUSERINFOLIST;


class ClientNotifyTradeUserGisInfo // 客户端通知交易服务器用户的地理位置信息，以更新到LBS
{
    public: /* members */
        GISInfo stGISInfo; // 客户端地理位置信息
        int32_t iVersionType; // 版本类型（参考VersionType的常量定义）

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
            VERSION_iVersionType = 2,
        };
};

typedef       ClientNotifyTradeUserGisInfo          tagClientNotifyTradeUserGisInfo;
typedef       ClientNotifyTradeUserGisInfo             CLIENTNOTIFYTRADEUSERGISINFO;
typedef       ClientNotifyTradeUserGisInfo*          LPCLIENTNOTIFYTRADEUSERGISINFO;
typedef const ClientNotifyTradeUserGisInfo*         LCPCLIENTNOTIFYTRADEUSERGISINFO;


class TradeResponseClientUserGisInfoResult // 交易服务器回应客户端更新用户的地理位置信息结果
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseClientUserGisInfoResult          tagTradeResponseClientUserGisInfoResult;
typedef       TradeResponseClientUserGisInfoResult             TRADERESPONSECLIENTUSERGISINFORESULT;
typedef       TradeResponseClientUserGisInfoResult*          LPTRADERESPONSECLIENTUSERGISINFORESULT;
typedef const TradeResponseClientUserGisInfoResult*         LCPTRADERESPONSECLIENTUSERGISINFORESULT;


class Apply_info
{
    public: /* members */
        int64_t llUid; // 报名者id
        int32_t iStatus; // 报名状态
        int32_t iApply_time; // 报名时间

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       Apply_info          tagApply_info;
typedef       Apply_info             APPLY_INFO;
typedef       Apply_info*          LPAPPLY_INFO;
typedef const Apply_info*         LCPAPPLY_INFO;


class Audio_info
{
    public: /* members */
        int64_t llAudio_id; // 上传的语音id(uid+time_stamp)
        int32_t iSeconds; // 上传的这个语音时间长度（second）

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       Audio_info          tagAudio_info;
typedef       Audio_info             AUDIO_INFO;
typedef       Audio_info*          LPAUDIO_INFO;
typedef const Audio_info*         LCPAUDIO_INFO;


class ClientRequestAccessTradeSelectOrderDetailsInfo // 客户端请求网关交易服务器查询订单详细信息(合并界面协议)
{
    public: /* members */
        int64_t llOrderid; // 订单id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeSelectOrderDetailsInfo          tagClientRequestAccessTradeSelectOrderDetailsInfo;
typedef       ClientRequestAccessTradeSelectOrderDetailsInfo             CLIENTREQUESTACCESSTRADESELECTORDERDETAILSINFO;
typedef       ClientRequestAccessTradeSelectOrderDetailsInfo*          LPCLIENTREQUESTACCESSTRADESELECTORDERDETAILSINFO;
typedef const ClientRequestAccessTradeSelectOrderDetailsInfo*         LCPCLIENTREQUESTACCESSTRADESELECTORDERDETAILSINFO;


class TradeResponseAccessClientSelectOrderDetailsInfo // 交易服务器回应网关客户端查询订单详细信息(合并界面协议)
{
    public: /* members */
        int32_t iResult; // 返回状态
        int64_t llOrderid; // 订单id
        int64_t llCreater_uid; // 创建者uid
        int64_t llCreater_phone; // 订单创建者的电话号码
        int64_t llApplyer_phone; // 订单服务者的电话号码
        int32_t iStatus; // 订单状态
        int32_t iType; // 订单类型
        int32_t iGender; // 此单面向的对象的性别
        int32_t iCreate_time; // 订单创建时间
        int32_t iMoney_type; // 币种
        int32_t iMoney_num; // 币数
        int64_t llLongitude; // 订单经度
        int64_t llDimension; // 订单维度
        int32_t iParticulars_len; // 详细描述长度
        char szParticulars[2048]; // 详细描述
        int32_t iPos_info_len; // 地区信息长度
        char szPos_info[128]; // 地区信息
        int32_t iApply_num; // 报名者人数
        Apply_info astApply_info_list[256]; // 报名者信息列表
        int32_t iPicture_num; // 发单时上传的照片数量
        int64_t pictureid_list[32]; // 上传的照片id列表(数组元素为uid+time_stamp)
        int32_t iAudio_num; // 发单时上传的语音个数
        Audio_info astAudio_info_list[16]; // 上传的语音信息列表
        int64_t llDiscuss_head_id; // 订单评论的头id
        int64_t llDiscuss_tail_id; // 订单评论的尾id
        int32_t iScore; // 评价分数[1,5]
        int32_t iSincerity_value; // 诚信值
        int32_t iO_apply_fini_num; // 接单成功数
        int64_t llApplyer_uid; // 服务者uid
        int32_t iCreater_gender; // 创建者性别
        int32_t iApplyer_gender; // 服务者性别
        int64_t llCreater_birth; // 创建者生日
        int64_t llApplyer_birth; // 服务者生日
        int32_t iCreater_nickname_len; // 昵称长度
        char szCreater_nickname[ACCESS_NICK_NAME_LEN]; // 昵称
        int32_t iApplyer_nickname_len; // 昵称长度
        char szApplyer_nickname[ACCESS_NICK_NAME_LEN]; // 昵称
        int32_t iApply_status; // 客户端看到的状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientSelectOrderDetailsInfo          tagTradeResponseAccessClientSelectOrderDetailsInfo;
typedef       TradeResponseAccessClientSelectOrderDetailsInfo             TRADERESPONSEACCESSCLIENTSELECTORDERDETAILSINFO;
typedef       TradeResponseAccessClientSelectOrderDetailsInfo*          LPTRADERESPONSEACCESSCLIENTSELECTORDERDETAILSINFO;
typedef const TradeResponseAccessClientSelectOrderDetailsInfo*         LCPTRADERESPONSEACCESSCLIENTSELECTORDERDETAILSINFO;


class CT_GlobalUserInfoList_Req // 全局用户个人信息
{
    public: /* members */
        int32_t iUidCount; // uid 个数
        int64_t uids[MAX_QUERY_GLOBAL_USER_INFO_COUNT]; // uid 数组

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_GlobalUserInfoList_Req          tagCT_GlobalUserInfoList_Req;
typedef       CT_GlobalUserInfoList_Req             CT_GLOBALUSERINFOLIST_REQ;
typedef       CT_GlobalUserInfoList_Req*          LPCT_GLOBALUSERINFOLIST_REQ;
typedef const CT_GlobalUserInfoList_Req*         LCPCT_GLOBALUSERINFOLIST_REQ;


class GlobalUserInfo // 全局用户个人信息
{
    public: /* members */
        int64_t llUid; // uid
        int64_t llPhone_num; // 电话号码
        int32_t iGold_integrity; // 诚信金
        int32_t iIntegrity_level; // 诚信金等级
        int32_t iGold_youwo; // 有我币
        int32_t iGold_game; // 游戏币
        int32_t iGold_validate; // 试金石
        int32_t iVip_level; // vip等级
        int32_t iVip_buy_time; // vip购买时间
        int32_t iVip_deadline; // vip过期时间
        int32_t iPhoto_count; // 照片数
        int64_t llCert_flags; // 认证标志
        int32_t iSincerity_value; // 诚信值
        int32_t iBusiness_value; // 业务值
        int32_t iAuthentication_value; // 担保值
        int32_t iCharm_value; // 魅力值
        int32_t iPraise; // 被赞数
        int32_t iAttended; // 被关注数
        int64_t llService; // 我的服务
        int32_t iVisitor_count; // 最近访问人数
        int32_t iGifts_num; // 礼品总数
        int32_t iGifts_pag_num; // 礼品总页数
        int64_t llExp; // 经验值
        int32_t iLevel; // 玩家等级
        int32_t iPraise_count; // 好评数
        int32_t iBad_count; // 差评数
        int32_t iRecharge; // 充值数
        int32_t iGuarantee_count; // 担保的人数
        int32_t iPromise_count; // 担保我的人数
        int32_t iDeposit_level; // 押金等级
        int32_t iDeposit_limit; // 押金上限
        int32_t iOffline_deposit_limit; // 线下支付方式的押金上限
        int32_t iOrder_create_fnum; // 发单完成数
        int32_t iOrder_apply_fnum; // 接单完成数
        int64_t llInterest; // 兴趣
        int8_t chGender; // 性别
        int64_t llBirthday; // 生日
        int64_t llPortrait; // 头像
        int32_t iNickNameLen; // 昵称长度
        char szNickName[ACCESS_NICK_NAME_LEN]; // 昵称
        int32_t iOccupation; // 职业
        int32_t iResidention; // 居住地
        int32_t iSignatureLen; // 个性签名长度
        char szSignature[ACCESS_USER_SIGNATURE_MAX_LEN]; // 个性签名
        int32_t iResidentionDetailLen; // 常出没地长度
        char szResidentionDetail[ACCESS_RESIDENTION_DETAIL_MAX_LEN]; // 常出没地
        int32_t iHeight; // 身高
        int32_t iSchool; // 学校
        int32_t iLove_status; // 情感状态
        int64_t llHobby; // 爱好
        int32_t iInSchoolYear; // 入学年份
        int32_t iColleageNameLen; // 学校名称长度
        char szColleageName[MAX_COLLEGE_NAME_LEN]; // 学校名称
        int32_t iProfessionLen; // 专业长度
        char szProfession[MAX_PROFESSION_NAME_LEN]; // 专业名称
        int32_t iOccupationNameLen; // 职业名称长度
        char szOccupationName[MAX_OCCUPATION_NAME_LEN]; // 职业名称
        int64_t llGood_reputation; // 点赞数
        int64_t llReputation_time; // 上次点赞时间

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
            VERSION_iHeight = 2,
            VERSION_iSchool = 2,
            VERSION_iLove_status = 2,
            VERSION_llHobby = 2,
            VERSION_iInSchoolYear = 2,
            VERSION_iColleageNameLen = 2,
            VERSION_szColleageName = 2,
            VERSION_iProfessionLen = 2,
            VERSION_szProfession = 2,
            VERSION_iOccupationNameLen = 2,
            VERSION_szOccupationName = 2,
            VERSION_llGood_reputation = 2,
            VERSION_llReputation_time = 2,
        };
};

typedef       GlobalUserInfo          tagGlobalUserInfo;
typedef       GlobalUserInfo             GLOBALUSERINFO;
typedef       GlobalUserInfo*          LPGLOBALUSERINFO;
typedef const GlobalUserInfo*         LCPGLOBALUSERINFO;


class TC_GlobalUserInfoList_Resp // 全局用户个人信息响应
{
    public: /* members */
        int32_t iResult; // 结果
        int32_t iInfoCount; // 结果个数
        GlobalUserInfo astGlobalUserInfos[MAX_QUERY_GLOBAL_USER_INFO_COUNT]; // 全局用户信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
        };
};

typedef       TC_GlobalUserInfoList_Resp          tagTC_GlobalUserInfoList_Resp;
typedef       TC_GlobalUserInfoList_Resp             TC_GLOBALUSERINFOLIST_RESP;
typedef       TC_GlobalUserInfoList_Resp*          LPTC_GLOBALUSERINFOLIST_RESP;
typedef const TC_GlobalUserInfoList_Resp*         LCPTC_GLOBALUSERINFOLIST_RESP;


class ClientRequestAccessTradeCompileUserInfo // 客户端请求网关交易服务器编辑资料
{
    public: /* members */
        int64_t llPortrait; // 头像id
        int32_t iNickNameLen; // 昵称长度
        char szNickName[ACCESS_NICK_NAME_LEN]; // 昵称
        int8_t chGender; // 性别
        int32_t iResidention; // 居住地
        int64_t llBirthday; // 生日
        int32_t iOccupation; // 职业
        int64_t llInterest; // 兴趣
        int32_t iHeight; // 身高
        int32_t iSchool; // 学校
        int32_t iLove_status; // 情感状态
        int64_t llHobby; // 爱好
        int32_t iSignatureLen; // 个性签名长度
        char szSignature[ACCESS_USER_SIGNATURE_MAX_LEN]; // 个性签名
        int32_t iResidentionDetailLen; // 常出没地长度
        char szResidentionDetail[ACCESS_RESIDENTION_DETAIL_MAX_LEN]; // 常出没地
        int32_t iInSchool; // 入学年份
        int32_t iColleageNameLen; // 学校名称长度
        char szColleageName[MAX_COLLEGE_NAME_LEN]; // 学校名称
        int32_t iProfessionLen; // 
        char szProfession[MAX_PROFESSION_NAME_LEN]; // 专业名称
        int32_t iOccupationNameLen; // 职业名称长度
        char szOccupationName[MAX_OCCUPATION_NAME_LEN]; // 职业名称
        int32_t iFirstComplie; // 0不是第一次编辑，1是第一次编辑

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
            VERSION_iHeight = 2,
            VERSION_iSchool = 2,
            VERSION_iLove_status = 2,
            VERSION_llHobby = 2,
            VERSION_iSignatureLen = 2,
            VERSION_szSignature = 2,
            VERSION_iResidentionDetailLen = 2,
            VERSION_szResidentionDetail = 2,
            VERSION_iInSchool = 2,
            VERSION_iColleageNameLen = 2,
            VERSION_szColleageName = 2,
            VERSION_iProfessionLen = 2,
            VERSION_szProfession = 2,
            VERSION_iOccupationNameLen = 2,
            VERSION_szOccupationName = 2,
            VERSION_iFirstComplie = 2,
        };
};

typedef       ClientRequestAccessTradeCompileUserInfo          tagClientRequestAccessTradeCompileUserInfo;
typedef       ClientRequestAccessTradeCompileUserInfo             CLIENTREQUESTACCESSTRADECOMPILEUSERINFO;
typedef       ClientRequestAccessTradeCompileUserInfo*          LPCLIENTREQUESTACCESSTRADECOMPILEUSERINFO;
typedef const ClientRequestAccessTradeCompileUserInfo*         LCPCLIENTREQUESTACCESSTRADECOMPILEUSERINFO;


class TradeResponseAccessClientCompileUserInfo // 交易服务器回应网关客户端编辑资料
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientCompileUserInfo          tagTradeResponseAccessClientCompileUserInfo;
typedef       TradeResponseAccessClientCompileUserInfo             TRADERESPONSEACCESSCLIENTCOMPILEUSERINFO;
typedef       TradeResponseAccessClientCompileUserInfo*          LPTRADERESPONSEACCESSCLIENTCOMPILEUSERINFO;
typedef const TradeResponseAccessClientCompileUserInfo*         LCPTRADERESPONSEACCESSCLIENTCOMPILEUSERINFO;


class CT_DiscussOrder_Req // 请求评论订单
{
    public: /* members */
        int64_t llUid; // 评论者id
        int64_t llToUid; // 被评论者id
        int64_t llOrderId; // 订单id
        int32_t iDiscussContentLen; // 评论内容长度
        char szDiscussContent[MAX_DISCUSS_DETAIL_CONTENT_LEN]; // 评论内容

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_DiscussOrder_Req          tagCT_DiscussOrder_Req;
typedef       CT_DiscussOrder_Req             CT_DISCUSSORDER_REQ;
typedef       CT_DiscussOrder_Req*          LPCT_DISCUSSORDER_REQ;
typedef const CT_DiscussOrder_Req*         LCPCT_DISCUSSORDER_REQ;


class TC_DiscussOrder_Resp // 请求评论订单响应
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_DiscussOrder_Resp          tagTC_DiscussOrder_Resp;
typedef       TC_DiscussOrder_Resp             TC_DISCUSSORDER_RESP;
typedef       TC_DiscussOrder_Resp*          LPTC_DISCUSSORDER_RESP;
typedef const TC_DiscussOrder_Resp*         LCPTC_DISCUSSORDER_RESP;


class DiscussDetailInfo
{
    public: /* members */
        int64_t llDiscussId; // 评论id
        int64_t llOrderId; // 订单id
        int64_t llFromUid; // 发起评论者uid
        int64_t llToUid; // 被评论者uid
        int32_t iDiscussContentLen; // 评论内容长度
        char szDiscussContent[MAX_DISCUSS_DETAIL_CONTENT_LEN]; // 评论内容
        int64_t llDiscussTime; // 评论时间
        int32_t iDiscussStatus; // 评论状态
        int32_t iNickNameLen; // 昵称长度
        char szNickName[ACCESS_NICK_NAME_LEN]; // nickname
        int32_t iGender; // 性别
        int32_t iIntegrityLevel; // 诚信金等级

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       DiscussDetailInfo          tagDiscussDetailInfo;
typedef       DiscussDetailInfo             DISCUSSDETAILINFO;
typedef       DiscussDetailInfo*          LPDISCUSSDETAILINFO;
typedef const DiscussDetailInfo*         LCPDISCUSSDETAILINFO;


class CT_QueryDiscussDetail_Req // 请求订单评论信息
{
    public: /* members */
        int64_t llOrderId; // 订单id
        int64_t llCurDiscussId; // 当前的评论id
        int32_t iExpectedCount; // 期待的记录条数 范围是(1-20)

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_QueryDiscussDetail_Req          tagCT_QueryDiscussDetail_Req;
typedef       CT_QueryDiscussDetail_Req             CT_QUERYDISCUSSDETAIL_REQ;
typedef       CT_QueryDiscussDetail_Req*          LPCT_QUERYDISCUSSDETAIL_REQ;
typedef const CT_QueryDiscussDetail_Req*         LCPCT_QUERYDISCUSSDETAIL_REQ;


class TC_QueryDiscussDetail_Resp // 请求订单评论信息响应
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iTotalCount; // 记录总条数
        int32_t iInfoCount; // 返回记录条数
        DiscussDetailInfo astDiscussDetailInfos[MAX_DISCUSS_DETAIL_RECORD_COUNT_ONCE]; // 评论信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_QueryDiscussDetail_Resp          tagTC_QueryDiscussDetail_Resp;
typedef       TC_QueryDiscussDetail_Resp             TC_QUERYDISCUSSDETAIL_RESP;
typedef       TC_QueryDiscussDetail_Resp*          LPTC_QUERYDISCUSSDETAIL_RESP;
typedef const TC_QueryDiscussDetail_Resp*         LCPTC_QUERYDISCUSSDETAIL_RESP;


class CT_DeleteDiscuss_Req // 请求删除评论
{
    public: /* members */
        int64_t llOrderId; // 订单id
        int64_t llDiscussId; // 评论id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_DeleteDiscuss_Req          tagCT_DeleteDiscuss_Req;
typedef       CT_DeleteDiscuss_Req             CT_DELETEDISCUSS_REQ;
typedef       CT_DeleteDiscuss_Req*          LPCT_DELETEDISCUSS_REQ;
typedef const CT_DeleteDiscuss_Req*         LCPCT_DELETEDISCUSS_REQ;


class TC_DeleteDiscuss_Resp // 请求删除评论响应
{
    public: /* members */
        int32_t iResult; // 结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_DeleteDiscuss_Resp          tagTC_DeleteDiscuss_Resp;
typedef       TC_DeleteDiscuss_Resp             TC_DELETEDISCUSS_RESP;
typedef       TC_DeleteDiscuss_Resp*          LPTC_DELETEDISCUSS_RESP;
typedef const TC_DeleteDiscuss_Resp*         LCPTC_DELETEDISCUSS_RESP;


class ClientRequestAccessTradeGetTaskAward // 客户端请求网关交易服务器获取任务奖励
{
    public: /* members */
        int32_t iTaskId; // 任务ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeGetTaskAward          tagClientRequestAccessTradeGetTaskAward;
typedef       ClientRequestAccessTradeGetTaskAward             CLIENTREQUESTACCESSTRADEGETTASKAWARD;
typedef       ClientRequestAccessTradeGetTaskAward*          LPCLIENTREQUESTACCESSTRADEGETTASKAWARD;
typedef const ClientRequestAccessTradeGetTaskAward*         LCPCLIENTREQUESTACCESSTRADEGETTASKAWARD;


class TradeResponseAccessClientGetTaskAward // 交易服务器回应网关客户端获取任务奖励
{
    public: /* members */
        int32_t iResult; // 返回结果

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientGetTaskAward          tagTradeResponseAccessClientGetTaskAward;
typedef       TradeResponseAccessClientGetTaskAward             TRADERESPONSEACCESSCLIENTGETTASKAWARD;
typedef       TradeResponseAccessClientGetTaskAward*          LPTRADERESPONSEACCESSCLIENTGETTASKAWARD;
typedef const TradeResponseAccessClientGetTaskAward*         LCPTRADERESPONSEACCESSCLIENTGETTASKAWARD;


class OfflineMesgData // 用户登录时，服务器发送离线时收到的消息
{
    public: /* members */
        int64_t llSenderid; // 发送消息用户uid
        int32_t iMesgLen; // 昵称长度
        char szMesgData[SYSTEM_SEND_MESG_MAX_LEN]; // 消息内容
        int8_t chType; // 消息类型，系统消息、订单消息等等
        int32_t iTimeStamp; // 发送消息的时间

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       OfflineMesgData          tagOfflineMesgData;
typedef       OfflineMesgData             OFFLINEMESGDATA;
typedef       OfflineMesgData*          LPOFFLINEMESGDATA;
typedef const OfflineMesgData*         LCPOFFLINEMESGDATA;


class CmdSystemSendMesg // 服务器主动给用户推送消息
{
    public: /* members */
        int32_t iMesgCount; // 离线消息数量
        OfflineMesgData astOfflineMesgData[OFFLINE_MESG_MAX_COUNT]; // 离线消息列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CmdSystemSendMesg          tagCmdSystemSendMesg;
typedef       CmdSystemSendMesg             CMDSYSTEMSENDMESG;
typedef       CmdSystemSendMesg*          LPCMDSYSTEMSENDMESG;
typedef const CmdSystemSendMesg*         LCPCMDSYSTEMSENDMESG;


class ClientRequestAccessTradeOrderDoneApplyer // 客户端请求网关交易服务器接单人完成订单
{
    public: /* members */
        int64_t llOrderid; // 订单id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeOrderDoneApplyer          tagClientRequestAccessTradeOrderDoneApplyer;
typedef       ClientRequestAccessTradeOrderDoneApplyer             CLIENTREQUESTACCESSTRADEORDERDONEAPPLYER;
typedef       ClientRequestAccessTradeOrderDoneApplyer*          LPCLIENTREQUESTACCESSTRADEORDERDONEAPPLYER;
typedef const ClientRequestAccessTradeOrderDoneApplyer*         LCPCLIENTREQUESTACCESSTRADEORDERDONEAPPLYER;


class TradeResponseAccessClientOrderDoneApplyer // 交易服务器回应网关客户端接单人完成订单
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientOrderDoneApplyer          tagTradeResponseAccessClientOrderDoneApplyer;
typedef       TradeResponseAccessClientOrderDoneApplyer             TRADERESPONSEACCESSCLIENTORDERDONEAPPLYER;
typedef       TradeResponseAccessClientOrderDoneApplyer*          LPTRADERESPONSEACCESSCLIENTORDERDONEAPPLYER;
typedef const TradeResponseAccessClientOrderDoneApplyer*         LCPTRADERESPONSEACCESSCLIENTORDERDONEAPPLYER;


class ClientRequestAccessTradeOrderDoneCreater // 客户端请求网关交易服务器发单人完成订单
{
    public: /* members */
        int64_t llOrderid; // 订单id

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeOrderDoneCreater          tagClientRequestAccessTradeOrderDoneCreater;
typedef       ClientRequestAccessTradeOrderDoneCreater             CLIENTREQUESTACCESSTRADEORDERDONECREATER;
typedef       ClientRequestAccessTradeOrderDoneCreater*          LPCLIENTREQUESTACCESSTRADEORDERDONECREATER;
typedef const ClientRequestAccessTradeOrderDoneCreater*         LCPCLIENTREQUESTACCESSTRADEORDERDONECREATER;


class TradeResponseAccessClientOrderDoneCreater // 交易服务器回应网关客户端发单人完成订单
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientOrderDoneCreater          tagTradeResponseAccessClientOrderDoneCreater;
typedef       TradeResponseAccessClientOrderDoneCreater             TRADERESPONSEACCESSCLIENTORDERDONECREATER;
typedef       TradeResponseAccessClientOrderDoneCreater*          LPTRADERESPONSEACCESSCLIENTORDERDONECREATER;
typedef const TradeResponseAccessClientOrderDoneCreater*         LCPTRADERESPONSEACCESSCLIENTORDERDONECREATER;


class CT_ReportInfo_Req // 举报信息请求
{
    public: /* members */
        int64_t llReporterUid; // 举报人uid
        int64_t llObjectUid; // 被举报人uid
        int64_t llObjectOrderId; // 被举报的订单id
        int32_t iReportDescLen; // 举报描述长度
        char szReportDesc[REPORT_DESC_MAX_LEN]; // 举报描述

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CT_ReportInfo_Req          tagCT_ReportInfo_Req;
typedef       CT_ReportInfo_Req             CT_REPORTINFO_REQ;
typedef       CT_ReportInfo_Req*          LPCT_REPORTINFO_REQ;
typedef const CT_ReportInfo_Req*         LCPCT_REPORTINFO_REQ;


class TC_ReportInfo_Resp // 举报信息响应
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TC_ReportInfo_Resp          tagTC_ReportInfo_Resp;
typedef       TC_ReportInfo_Resp             TC_REPORTINFO_RESP;
typedef       TC_ReportInfo_Resp*          LPTC_REPORTINFO_RESP;
typedef const TC_ReportInfo_Resp*         LCPTC_REPORTINFO_RESP;


class PlayersNearbyInfo // 附近的人信息
{
    public: /* members */
        int64_t llUid; // 该用户的uid
        int32_t iGender; // 该用户的性别
        int64_t llDistance; // 该用户离我的距离
        int32_t iNickNameLen; // 昵称长度
        char szNickname[ACCESS_NICK_NAME_LEN]; // 昵称
        int64_t llLongitude; // GPS经度
        int64_t llLatitude; // GPS维度
        int64_t llLastUpdateTime; // 最近一次更新位置信息时间
        int64_t llBirthday; // 生日
        int32_t iSignatureLen; // 个性签名长度
        char szSignature[ACCESS_USER_SIGNATURE_MAX_LEN]; // 个性签名

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       PlayersNearbyInfo          tagPlayersNearbyInfo;
typedef       PlayersNearbyInfo             PLAYERSNEARBYINFO;
typedef       PlayersNearbyInfo*          LPPLAYERSNEARBYINFO;
typedef const PlayersNearbyInfo*         LCPPLAYERSNEARBYINFO;


class ClientPlayersNearbyReq // 附近的人请求
{
    public: /* members */
        int64_t llLongitude; // GPS经度
        int64_t llLatitude; // GPS维度
        int32_t iGender; // 筛选用户的性别

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientPlayersNearbyReq          tagClientPlayersNearbyReq;
typedef       ClientPlayersNearbyReq             CLIENTPLAYERSNEARBYREQ;
typedef       ClientPlayersNearbyReq*          LPCLIENTPLAYERSNEARBYREQ;
typedef const ClientPlayersNearbyReq*         LCPCLIENTPLAYERSNEARBYREQ;


class ClientPlayersNearbyResp // 附近的人响应
{
    public: /* members */
        int32_t iResult; // 返回状态
        int32_t iPlayersNearbyCount; // 附近的人记录条数
        PlayersNearbyInfo astPlayersNearbyInfo[PLAYERS_NEARBY_MAX_COUNT]; // 附近的人信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientPlayersNearbyResp          tagClientPlayersNearbyResp;
typedef       ClientPlayersNearbyResp             CLIENTPLAYERSNEARBYRESP;
typedef       ClientPlayersNearbyResp*          LPCLIENTPLAYERSNEARBYRESP;
typedef const ClientPlayersNearbyResp*         LCPCLIENTPLAYERSNEARBYRESP;


class ClientRequestAccessTradeMakeReputation // 客户端请求网关交易服务器给某人点赞
{
    public: /* members */
        int64_t llReceive_uid; // 被赞用户uid

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientRequestAccessTradeMakeReputation          tagClientRequestAccessTradeMakeReputation;
typedef       ClientRequestAccessTradeMakeReputation             CLIENTREQUESTACCESSTRADEMAKEREPUTATION;
typedef       ClientRequestAccessTradeMakeReputation*          LPCLIENTREQUESTACCESSTRADEMAKEREPUTATION;
typedef const ClientRequestAccessTradeMakeReputation*         LCPCLIENTREQUESTACCESSTRADEMAKEREPUTATION;


class TradeResponseAccessClientMakeReputation // 交易服务器回应网关客户端接给某人点赞
{
    public: /* members */
        int32_t iResult; // 返回状态

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       TradeResponseAccessClientMakeReputation          tagTradeResponseAccessClientMakeReputation;
typedef       TradeResponseAccessClientMakeReputation             TRADERESPONSEACCESSCLIENTMAKEREPUTATION;
typedef       TradeResponseAccessClientMakeReputation*          LPTRADERESPONSEACCESSCLIENTMAKEREPUTATION;
typedef const TradeResponseAccessClientMakeReputation*         LCPTRADERESPONSEACCESSCLIENTMAKEREPUTATION;


class ClientPkgHead
{
    public: /* members */
        uint16_t wDataSize; // 包长度
        uint8_t bCheckCode; // 校验字段
        uint8_t bMessageVer; // 版本标识
        uint32_t dwCmdID; // 命令字

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       ClientPkgHead          tagClientPkgHead;
typedef       ClientPkgHead             CLIENTPKGHEAD;
typedef       ClientPkgHead*          LPCLIENTPKGHEAD;
typedef const ClientPkgHead*         LCPCLIENTPKGHEAD;


class ClientPkgBody
{
    public: /* members */
        union
        {
            CmdKickoffUserNotify stCmdKickoffUserNotify; // 服务器踢掉用户通知给客户端
            ClientVcCodeReq stClientVcCodeReq; // 获取验证码请求
            ClientVcCodeResp stClientVcCodeResp; // 获取验证码请求返回
            ClientRegisterReq stClientRegisterReq; // 注册账号请求
            ClientRegisterResp stClientRegisterResp; // 注册账号返回
            ClientNameLogonReq stClientNameLogonReq; // 使用用户名登录请求
            ClientNameLogonResp stClientNameLogonResp; // 使用用户名登录返回
            ClientBaseInfoReq stClientBaseInfoReq; // 用户基本信息请求
            ClientBaseInfoResp stClientBaseInfoResp; // 用户基本信息应答
            ClientUpdateBaseInfoReq stClientUpdateBaseInfoReq; // 用户更新基本信息请求
            ClientUpdateBaseInfoResp stClientUpdateBaseInfoResp; // 用户更新基本信息应答
            ClientBaseInfoListReq stClientBaseInfoListReq; // 批量请求用户基本信息
            ClientBaseInfoListResp stClientBaseInfoListResp; // 应答
            ClientUpdateBirthdayReq stClientUpdateBirthdayReq; // 用户更新出生日期
            ClientUpdateBirthdayResp stClientUpdateBirthdayResp; // 用户更新出生日期响应
            ClientUpdateNickNameReq stClientUpdateNickNameReq; // 用户更新昵称
            ClientUpdateNickNameResp stClientUpdateNickNameResp; // 用户更新昵称响应
            ClientUpdateOccupationReq stClientUpdateOccupationReq; // 用户更新职业
            ClientUpdateOccupationResp stClientUpdateOccupationResp; // 用户更新职业响应
            ClientUpdateResidentionReq stClientUpdateResidentionReq; // 用户更新居住地
            ClientUpdateResidentionResp stClientUpdateResidentionResp; // 用户更新居住地响应
            ClientUpdateSignatureReq stClientUpdateSignatureReq; // 用户更新个性签名
            ClientUpdateSignatureResp stClientUpdateSignatureResp; // 用户更新个性签名响应
            ClientUpdatePortraitReq stClientUpdatePortraitReq; // 用户更新头像id
            ClientUpdatePortraitResp stClientUpdatePortraitResp; // 用户更新头像id响应
            ClientUpdateGenderReq stClientUpdateGenderReq; // 用户更新性别
            ClientUpdateGenderResp stClientUpdateGenderResp; // 用户更新性别响应
            ClientUserAccountInfoReq stClientUserAccountInfoReq; // 用户请求账户信息
            ClientUserAccountInfoResp stClientUserAccountInfoResp; // 用户账户信息应答
            CG_UpdateResidentionDetail_Req stCG_UpdateResidentionDetail_Req; // 客户端请求更新居住地详细信息
            GC_UpdateResidentionDetail_Resp stGC_UpdateResidentionDetail_Resp; // 客户端请求更新居住地详细信息响应
            ClientPhoneQueryUserIdReq stClientPhoneQueryUserIdReq; // 客户端通过手机号获取用户uid
            ClientPhoneQueryUserIdResp stClientPhoneQueryUserIdResp; // 客户端通过手机号获取用户uid响应
            ClientRetrieveCodeReq stClientRetrieveCodeReq; // 获取修改密码验证码
            ClientRetrieveCodeResp stClientRetrieveCodeResp; // 获取修改密码验证码
            ClientValidateRetrieveCodeReq stClientValidateRetrieveCodeReq; // 验证获取密码验证码
            ClientValidateRetrieveCodeResp stClientValidateRetrieveCodeResp; // 验证获取密码验证码
            ClientModifyPasswordReq stClientModifyPasswordReq; // 修改密码
            ClientModifyPasswordResp stClientModifyPasswordResp; // 修改密码
            ClientTokenLoginReq stClientTokenLoginReq; // TOKEN登录请求
            ClientTokenLoginResp stClientTokenLoginResp; // TOKEN登录返回
            ClientAccountInfoListReq stClientAccountInfoListReq; // 批量请求用户账户信息
            ClientAccountInfoListResp stClientAccountInfoListResp; // 应答
            ClientAddressPhoneQueryReq stClientAddressPhoneQueryReq; // 批量请求手机号码对应uid
            ClientAddressPhoneQueryResp stClientAddressPhoneQueryResp; // 批量请求手机号码对应uid应答
            ClientRequestAccessNameLogin stClientRequestAccessNameLogin; // 用户名密码登录请求
            ClientRequestAccessTokenLogin stClientRequestAccessTokenLogin; // token登录请求
            AccessResponseClientNameLogin stAccessResponseClientNameLogin; // 用户名密码登录应答
            ClientRequestAccessTradeCreateOrder stClientRequestAccessTradeCreateOrder; // 客户端请求网关交易服务器创建订单
            TradeResponseAccessClientCreateOrder stTradeResponseAccessClientCreateOrder; // 交易服务器回应网关客户端创建订单
            ClientRequestAccessTradeSelectOrderBasicInfo stClientRequestAccessTradeSelectOrderBasicInfo; // 客户端请求网关交易服务器查询订单基本信息
            TradeResponseAccessClientSelectOrderBasicInfo stTradeResponseAccessClientSelectOrderBasicInfo; // 交易服务器回应网关客户端查询订单基本信息
            ClientRequestAccessTradeSelectOrderSpecificInfo stClientRequestAccessTradeSelectOrderSpecificInfo; // 客户端请求网关交易服务器查询订单详细信息
            TradeResponseAccessClientSelectOrderSpecificInfo stTradeResponseAccessClientSelectOrderSpecificInfo; // 交易服务器回应网关客户端查询订单详细信息
            ClientRequestAccessTradeApplyOrder stClientRequestAccessTradeApplyOrder; // 客户端请求网关交易服务器报名参与活动
            TradeResponseAccessClientApplyOrder stTradeResponseAccessClientApplyOrder; // 交易服务器回应网关客户端报名参与活动
            ClientRequestAccessTradeSelectApplyer stClientRequestAccessTradeSelectApplyer; // 客户端请求网关交易服务器选择参与对象
            TradeResponseAccessClientSelectApplyer stTradeResponseAccessClientSelectApplyer; // 交易服务器回应网关客户端选择参与对象
            ClientConfirmOrCancelOrderReq stClientConfirmOrCancelOrderReq; // 客户端确认订单或者取消订单 请求
            ClientConfirmOrCancelOrderResp stClientConfirmOrCancelOrderResp; // 客户端确认订单或者取消订单 服务器响应
            ClientCreatedOrderBriefReq stClientCreatedOrderBriefReq; // 客户端查询创建过的订单 请求
            ClientCreatedOrderBriefResp stClientCreatedOrderBriefResp; // 客户端查询创建过的订单 服务器响应
            ClientRequestAccessTradeSelectDiscuss stClientRequestAccessTradeSelectDiscuss; // 客户端请求网关交易服务器查看评论信息
            TradeResponseAccessClientSelectDiscuss stTradeResponseAccessClientSelectDiscuss; // 交易服务器回应网关客户端查看评论信息
            ClientRequestAccessTradeCreateDiscuss stClientRequestAccessTradeCreateDiscuss; // 客户端请求网关交易服务器发表评论
            TradeResponseAccessClientCreateDiscuss stTradeResponseAccessClientCreateDiscuss; // 交易服务器回应网关客户端发表评论
            ClientRequestAccessTradeSelectPhotoWall stClientRequestAccessTradeSelectPhotoWall; // 客户端请求网关交易服务器获取照片墙信息
            TradeResponseAccessClientSelectPhotoWall stTradeResponseAccessClientSelectPhotoWall; // 交易服务器回应网关客户端获取照片墙信息
            ClientRequestAccessTradeUpdatePhotoWall stClientRequestAccessTradeUpdatePhotoWall; // 客户端请求网关交易服务器更新照片墙信息
            TradeResponseAccessClientUpdatePhotoWall stTradeResponseAccessClientUpdatePhotoWall; // 交易服务器回应网关客户端更新照片墙信息
            ClientRequestAccessTradeRegisterTradeinfo stClientRequestAccessTradeRegisterTradeinfo; // 客户端请求网关交易服务器注册账号交易信息
            TradeResponseAccessClientRegisterTradeinfo stTradeResponseAccessClientRegisterTradeinfo; // 交易服务器回应网关客户端注册账号交易信息
            ClientRequestAccessTradeUpdateArgue stClientRequestAccessTradeUpdateArgue; // 客户端请求网关交易服务器对订单进行评价
            TradeResponseAccessClientUpdateArgue stTradeResponseAccessClientUpdateArgue; // 交易服务器回应网关客户端对订单进行评价
            ClientRequestAccessTradeSelectTradeUserInfo stClientRequestAccessTradeSelectTradeUserInfo; // 客户端请求网关交易服务器查询账号交易信息
            TradeResponseAccessClientSelectTradeUserInfo stTradeResponseAccessClientSelectTradeUserInfo; // 交易服务器回应网关客户端查询账号交易信息
            ClientRequestAccessTradeUpdateService stClientRequestAccessTradeUpdateService; // 客户端请求网关交易服务器更新我的服务
            TradeResponseAccessClientUpdateService stTradeResponseAccessClientUpdateService; // 交易服务器回应网关客户端更新我的服务
            ClientRequestAccessTradeSelectGifts stClientRequestAccessTradeSelectGifts; // 客户端请求网关交易服务器查看礼物信息
            TradeResponseAccessClientSelectGifts stTradeResponseAccessClientSelectGifts; // 交易服务器回应网关客户端查看礼物信息
            ClientRequestAccessTradePresentGifts stClientRequestAccessTradePresentGifts; // 客户端请求网关交易服务器赠送礼物
            TradeResponseAccessClientPresentGifts stTradeResponseAccessClientPresentGifts; // 交易服务器回应网关客户端赠送礼物
            CT_BuyCar_Req stCT_BuyCar_Req; // 购买车
            TC_BuyCar_Resp stTC_BuyCar_Resp; // 购买车响应
            CT_OperateCar_Req stCT_OperateCar_Req; // 操作车
            TC_OperateCar_Resp stTC_OperateCar_Resp; // 操作车响应
            ClientAppliedOrderBriefReq stClientAppliedOrderBriefReq; // 客户端查询申请过的订单 请求
            ClientAppliedOrderBriefResp stClientAppliedOrderBriefResp; // 客户端查询申请过的订单 响应
            CT_GuaranteeFriend_Req stCT_GuaranteeFriend_Req; // 用户请求担保好友
            TC_GuaranteeFriend_Resp stTC_GuaranteeFriend_Resp; // 用户担保好友响应
            CT_CancelGuaranteeFriend_Req stCT_CancelGuaranteeFriend_Req; // 用户请求取消担保好友
            TC_CancelGuaranteeFriend_Resp stTC_CancelGuaranteeFriend_Resp; // 用户取消担保好友响应
            CT_QueryGuaranteeFriend_Req stCT_QueryGuaranteeFriend_Req; // 用户查询担保好友
            TC_QueryGuaranteeFriend_Resp stTC_QueryGuaranteeFriend_Resp; // 用户查询担保好友响应
            ClientRequestAccessTradeSelectTaskInfo stClientRequestAccessTradeSelectTaskInfo; // 客户端请求网关交易服务器查询任务信息
            TradeResponseAccessClientSelectTaskInfo stTradeResponseAccessClientSelectTaskInfo; // 交易服务器回应网关客户端查询任务信息
            ClientRequestAccessTradeSellGifts stClientRequestAccessTradeSellGifts; // 客户端请求网关交易服务器出售礼物
            TradeResponseAccessClientSellGifts stTradeResponseAccessClientSellGifts; // 交易服务器回应网关客户端出售礼物
            ClientRequestAccessTradeSelectUserInfoList stClientRequestAccessTradeSelectUserInfoList; // 客户端请求网关交易服务器查询多人账号交易信息
            TradeResponseAccessClientSelectUserInfoList stTradeResponseAccessClientSelectUserInfoList; // 交易服务器回应网关客户端查询多人账号交易信息
            ClientRequestAccessTradeUpLevelVip stClientRequestAccessTradeUpLevelVip; // 客户端请求网关交易服务器升级vip等级
            TradeResponseAccessClientUpLevelVip stTradeResponseAccessClientUpLevelVip; // 交易服务器回应网关客户端升级vip等级
            ClientRequestAccessTradeGetChatRoomInfoList stClientRequestAccessTradeGetChatRoomInfoList; // 客户端请求网关交易服务器获取当前火热聊天室信息列表
            TradeResponseAccessClientGetChatRoomInfoList stTradeResponseAccessClientGetChatRoomInfoList; // 交易服务器回应网关客户端获取当前火热聊天室信息列表
            ClientRequestAccessTradeSelectGiftsPagidList stClientRequestAccessTradeSelectGiftsPagidList; // 客户端请求网关交易服务器查询礼物页ID列表
            TradeResponseAccessClientSelectGiftsPagidList stTradeResponseAccessClientSelectGiftsPagidList; // 交易服务器回应网关客户端查询礼物页ID列表
            ClientRequestAccessTradeSelectIdentityBank stClientRequestAccessTradeSelectIdentityBank; // 客户端请求网关交易服务器查询身份证银行卡信息
            TradeResponseAccessClientSelectIdentityBank stTradeResponseAccessClientSelectIdentityBank; // 交易服务器回应网关客户端查询身份证银行卡信息
            ClientRequestAccessTradeSelectVisitorsList stClientRequestAccessTradeSelectVisitorsList; // 客户端请求网关交易服务器查询最近访问列表
            TradeResponseAccessClientSelectVisitorsList stTradeResponseAccessClientSelectVisitorsList; // 交易服务器回应网关客户端查询最近访问列表
            CT_QuerySelfGuarantee_Req stCT_QuerySelfGuarantee_Req; // 查询我的担保
            TC_QuerySelfGuarantee_Resp stTC_QuerySelfGuarantee_Resp; // 查询我的担保
            CT_QueryPromiseSelf_Req stCT_QueryPromiseSelf_Req; // 查询谁担保了我
            TC_QueryPromiseSelf_Resp stTC_QueryPromiseSelf_Resp; // 查询谁担保了我
            ClientRequestAccessTradeSelectParticulars stClientRequestAccessTradeSelectParticulars; // 客户端请求网关交易服务器查询详细描述
            TradeResponseAccessClientSelectParticulars stTradeResponseAccessClientSelectParticulars; // 交易服务器回应网关客户端查询详细描述
            CT_OrderStateInfoList_Req stCT_OrderStateInfoList_Req; // 客户端请求网关交易服务器批量查询订单状态信息
            TC_OrderStateInfoList_Resp stTC_OrderStateInfoList_Resp; // 客户端请求网关交易服务器批量查询订单状态信息响应
            CT_UserComplaint_Req stCT_UserComplaint_Req; // 投诉请求
            TC_UserComplaint_Resp stTC_UserComplaint_Resp; // 投诉响应
            ClientRequestAccessTradeOrderDone stClientRequestAccessTradeOrderDone; // 客户端请求网关交易服务器完成订单
            TradeRsponseAccessClientOrderDone stTradeRsponseAccessClientOrderDone; // 交易服务器回应网关客户端完成订单
            ClientRequestAccessTradeOrderClosedown stClientRequestAccessTradeOrderClosedown; // 客户端请求网关交易服务器关闭订单
            TradeRsponseAccessClientOrderClosedown stTradeRsponseAccessClientOrderClosedown; // 交易服务器回应网关客户端关闭订单
            AT_OnlineUserCount_Ntf stAT_OnlineUserCount_Ntf; // 网关通知交易服务器在线人数
            ClientRequestAccessTradeSelectApplyerUserInfoList stClientRequestAccessTradeSelectApplyerUserInfoList; // 客户端请求网关交易服务器查询报名者信息列表
            TradeResponseAccessClientSelectApplyerUserInfoList stTradeResponseAccessClientSelectApplyerUserInfoList; // 交易服务器回应网关客户端查询报名者信息列表
            ClientNotifyTradeUserGisInfo stClientNotifyTradeUserGisInfo; // 客户端通知交易服务器用户的地理位置信息，以更新到LBS
            TradeResponseClientUserGisInfoResult stTradeResponseClientUserGisInfoResult; // 交易服务器回应客户端更新用户的地理位置信息结果
            CT_HomeOrderInfo_Req stCT_HomeOrderInfo_Req; // 客户端请求网关交易服务器查询首页定单信息
            TC_HomeOrderInfo_Resp stTC_HomeOrderInfo_Resp; // 客户端请求网关交易服务器查询首页定单信息响应
            ClientRequestAccessTradeSelectOrderDetailsInfo stClientRequestAccessTradeSelectOrderDetailsInfo; // 客户端请求网关交易服务器查询订单详细信息(合并界面协议)
            TradeResponseAccessClientSelectOrderDetailsInfo stTradeResponseAccessClientSelectOrderDetailsInfo; // 交易服务器回应网关客户端查询订单详细信息(合并界面协议)
            ClientRequestAccessTradeCompileUserInfo stClientRequestAccessTradeCompileUserInfo; // 客户端请求网关交易服务器编辑资料
            TradeResponseAccessClientCompileUserInfo stTradeResponseAccessClientCompileUserInfo; // 交易服务器回应网关客户端编辑资料
            CT_GlobalUserInfoList_Req stCT_GlobalUserInfoList_Req; // 全局用户信息请求
            TC_GlobalUserInfoList_Resp stTC_GlobalUserInfoList_Resp; // 全局用户信息响应
            ClientRequestAccessTradeGetTaskAward stClientRequestAccessTradeGetTaskAward; // 客户端请求网关交易服务器获取任务奖励
            TradeResponseAccessClientGetTaskAward stTradeResponseAccessClientGetTaskAward; // 交易服务器回应网关客户端获取任务奖励
            CmdSystemSendMesg stCmdSystemSendMesg; // 服务器主动给用户推送消息
            CT_QueryDiscussDetail_Req stCT_QueryDiscussDetail_Req; // 查询评论信息请求
            TC_QueryDiscussDetail_Resp stTC_QueryDiscussDetail_Resp; // 查询评论信息响应
            CT_DeleteDiscuss_Req stCT_DeleteDiscuss_Req; // 删除评论请求
            TC_DeleteDiscuss_Resp stTC_DeleteDiscuss_Resp; // 删除评论响应
            CT_DiscussOrder_Req stCT_DiscussOrder_Req; // 评论订单请求
            TC_DiscussOrder_Resp stTC_DiscussOrder_Resp; // 评论订单响应
            ClientRequestAccessTradeOrderDoneApplyer stClientRequestAccessTradeOrderDoneApplyer; // 客户端请求网关交易服务器接单人完成订单
            TradeResponseAccessClientOrderDoneApplyer stTradeResponseAccessClientOrderDoneApplyer; // 交易服务器回应网关客户端接单人完成订单
            ClientRequestAccessTradeOrderDoneCreater stClientRequestAccessTradeOrderDoneCreater; // 客户端请求网关交易服务器发单人完成订单
            TradeResponseAccessClientOrderDoneCreater stTradeResponseAccessClientOrderDoneCreater; // 交易服务器回应网关客户端发单人完成订单
            CT_ReportInfo_Req stCT_ReportInfo_Req; // 举报请求
            TC_ReportInfo_Resp stTC_ReportInfo_Resp; // 举报响应
            ClientPlayersNearbyReq stClientPlayersNearbyReq; // 附近的人请求
            ClientPlayersNearbyResp stClientPlayersNearbyResp; // 附近的人响应
            ClientRequestAccessTradeMakeReputation stClientRequestAccessTradeMakeReputation; // 客户端请求网关交易服务器给某人点赞
            TradeResponseAccessClientMakeReputation stTradeResponseAccessClientMakeReputation; // 交易服务器回应网关客户端接给某人点赞
            ClientChatLogonReq stClientChatLogonReq; // 用户登录聊天服务器请求
            ClientChatLogonResp stClientChatLogonResp; // 用户登录聊天服务器返回
            ClientChatSendMsgReq stClientChatSendMsgReq; // 发送者用户发聊天消息请求
            ClientChatSendMsgResp stClientChatSendMsgResp; // 发送者用户发聊天消息返回
            ClientChatsvrForwardMsg stClientChatsvrForwardMsg; // 聊天服务器转发聊天消息
            ClientAddFriendReq stClientAddFriendReq; // 用户添加好友请求
            ClientAddFriendResp stClientAddFriendResp; // 用户添加好友应答
            ClientDeleteFriendReq stClientDeleteFriendReq; // 用户删除好友请求
            ClientDeleteFriendResp stClientDeleteFriendResp; // 用户删除好友应答
            ClientJoinGroupReq stClientJoinGroupReq; // 用户加入群请求
            ClientJoinGroupResp stClientJoinGroupResp; // 用户加入群应答
            ClientSecedeGroupReq stClientSecedeGroupReq; // 用户退出群请求
            ClientSecedeGroupResp stClientSecedeGroupResp; // 用户退出群应答
            ClientGetThirdPartyPayTokenReq stClientGetThirdPartyPayTokenReq; // 客户端请求获取第三方支付token
            ClientGetThirdPartyPayTokenResp stClientGetThirdPartyPayTokenResp; // 网关回应 客户端请求获取第三方支付token
            ClientGeneratePayOrderReq stClientGeneratePayOrderReq; // 生成支付订单 请求
            ClientGeneratePayOrderResp stClientGeneratePayOrderResp; // 生成支付订单 响应
            TradeNotifyClientPayResult stTradeNotifyClientPayResult; // 通知支付结果给客户端
            ClientExchangeStoneOrCurrencyReq stClientExchangeStoneOrCurrencyReq; // 客户端请求用有我币兑换游戏币或者试金石 请求
            ClientExchangeStoneOrCurrencyResp stClientExchangeStoneOrCurrencyResp; // 客户端请求用有我币兑换游戏币或者试金石 响应
            ClientWithdrawHonestyGoldReq stClientWithdrawHonestyGoldReq; // 客户端请求提取诚信金 请求
            ClientWithdrawHonestyGoldResp stClientWithdrawHonestyGoldResp; // 客户端请求提取诚信金 响应
        };

    public: /* methods */
        TdrError::ErrorType construct(int64_t selector);

        TdrError::ErrorType pack(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(int64_t selector, char* buffer, size_t size,
                                 size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(int64_t selector, char* buffer, size_t size,
                                 size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(int64_t selector, const char* buffer, size_t size,
                                   size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(int64_t selector, const char* buffer, size_t size,
                                   size_t* usedSize = NULL, unsigned cutVer = 0);

        TdrError::ErrorType visualize(int64_t selector, TdrWriteBuf& destBuf,
                                      int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(int64_t selector, char* buffer, size_t size,
                                      size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
        };
};

typedef       ClientPkgBody          tagClientPkgBody;
typedef       ClientPkgBody             CLIENTPKGBODY;
typedef       ClientPkgBody*          LPCLIENTPKGBODY;
typedef const ClientPkgBody*         LCPCLIENTPKGBODY;


class ClientPkg
{
    public: /* members */
        ClientPkgHead stHead; // 包头
        ClientPkgBody stBody; // 包体

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;
        TdrError::ErrorType pack_l(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);
        TdrError::ErrorType unpack_l(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 2,
        };
};

typedef       ClientPkg          tagClientPkg;
typedef       ClientPkg             CLIENTPKG;
typedef       ClientPkg*          LPCLIENTPKG;
typedef const ClientPkg*         LCPCLIENTPKG;


#pragma pack()

}
#endif
